<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="idm-api-qa" resourceRoot="" soapui-version="3.6.1" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://research.sun.com/wadl/2006/10" name="CustomerIDM API" type="rest" basePath="/v1.0/" definitionUrl="http://10.127.7.164:8080/v1.0/application.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.127.7.164:8080/v1.0/application.wadl"><con:part><con:url>http://10.127.7.164:8080/v1.0/application.wadl</con:url><con:content><![CDATA[<ns2:application xmlns:ns2="http://research.sun.com/wadl/2006/10">
  <ns2:doc jersey:generatedBy="Jersey: 1.5 01/14/2011 12:36 PM" xmlns:jersey="http://jersey.dev.java.net/"/>
  <ns2:doc title="CustomerIDM API" xml:lang="en">Rackspace Customer IDM Api Wadl.</ns2:doc>
  <ns2:grammars>
    <ns2:include href="xsd/idmapi.xsd"/>
  </ns2:grammars>
  <ns2:resources base="http://10.127.7.164:8080/v1.0/">
    <ns2:resource path="/">
      <ns2:doc>API Version</ns2:doc>
      <ns2:method id="getVersionInfo" name="GET">
        <ns2:doc>Gets the API Version info.</ns2:doc>
        <ns2:response>
          <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:version" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
        </ns2:response>
      </ns2:method>
      <ns2:resource path="xsd/{fileName}">
        <ns2:param name="fileName" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <ns2:method id="getXSD" name="GET">
          <ns2:response>
            <ns2:representation mediaType="application/json"/>
            <ns2:representation mediaType="application/xml"/>
          </ns2:response>
        </ns2:method>
      </ns2:resource>
      <ns2:resource path="xslt/{fileName}">
        <ns2:param name="fileName" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <ns2:method id="getXSLT" name="GET">
          <ns2:response>
            <ns2:representation mediaType="application/json"/>
            <ns2:representation mediaType="application/xml"/>
          </ns2:response>
        </ns2:method>
      </ns2:resource>
      <ns2:resource path="customers">
        <ns2:doc>Rackspace Customers.</ns2:doc>
        <ns2:method id="addCustomer" name="POST">
          <ns2:doc>Adds a Customer.</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:representation element="ns3:customer" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:customer" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:customer" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="{customerId}">
          <ns2:doc>A Rackspace Customer.</ns2:doc>
          <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getCustomer" name="GET">
            <ns2:doc>Gets a customer.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:customer" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="deleteCustomer" name="DELETE">
            <ns2:doc>Deletes a customer.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:customer" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:resource path="actions/lock">
            <ns2:doc>Customer lock.</ns2:doc>
            <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:method id="setCustomerLockStatus" name="PUT">
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:representation element="ns3:customer" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:customer" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:customer" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
          </ns2:resource>
          <ns2:resource path="clients">
            <ns2:doc>Client applications that belong to a customer.</ns2:doc>
            <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:method id="getClients" name="GET">
              <ns2:doc>Gets a list of client applications for a customer.</ns2:doc>
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="offset" style="query" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="limit" style="query" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:clients" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
            <ns2:method id="addClient" name="POST">
              <ns2:doc>Adds a client to the customer.</ns2:doc>
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:representation element="ns3:client" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:client" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:customerIdConflict" status="409" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:client" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
            <ns2:resource path="{clientId}">
              <ns2:doc>Client application resource.</ns2:doc>
              <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:method id="getClient" name="GET">
                <ns2:doc>Gets the client data.</ns2:doc>
                <ns2:request>
                  <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                </ns2:request>
                <ns2:response>
                  <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:client" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                </ns2:response>
              </ns2:method>
              <ns2:resource path="secret">
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="resetClientSecret" name="POST">
                  <ns2:doc>Reset the client secret</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:clientCredentials" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
              <ns2:resource path="groups">
                <ns2:doc>Client groups resource.</ns2:doc>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getClientGroups" name="GET">
                  <ns2:doc>Gets a list of Client groups.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation status="200"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:method id="addClientGroup" name="POST">
                  <ns2:doc>Adds a client group.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:clientGroup" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:clientGroup" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation status="200"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:resource path="{groupName}">
                  <ns2:doc>a client group resource.</ns2:doc>
                  <ns2:param name="groupName" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="deleteClientGroup" name="DELETE">
                    <ns2:doc>Deletes a Client groups</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="204"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                  <ns2:method id="getClientGroup" name="GET">
                    <ns2:doc>Gets a Client group.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:clientGroup" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                  <ns2:resource path="members">
                    <ns2:doc>a client group resource.</ns2:doc>
                    <ns2:resource path="{username}">
                      <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:param name="groupName" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:method id="addUserToClientGroup" name="PUT">
                        <ns2:doc>Adds a user to a client group.</ns2:doc>
                        <ns2:request>
                          <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </ns2:request>
                        <ns2:response>
                          <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation status="200"/>
                          <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        </ns2:response>
                      </ns2:method>
                      <ns2:method id="removeUserFromClientGroup" name="DELETE">
                        <ns2:doc>Removes a user from a client group.</ns2:doc>
                        <ns2:request>
                          <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        </ns2:request>
                        <ns2:response>
                          <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation status="204"/>
                          <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                          <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        </ns2:response>
                      </ns2:method>
                    </ns2:resource>
                  </ns2:resource>
                </ns2:resource>
              </ns2:resource>
              <ns2:resource path="permissions">
                <ns2:doc>Client permissions</ns2:doc>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getClientPermissions" name="GET">
                  <ns2:doc>Gets a list of defined and granted permissions for a client.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:permissions" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:resource path="defined">
                  <ns2:doc>Client defined permissions.</ns2:doc>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="getClientDefinedPermissions" name="GET">
                    <ns2:doc>Gets a list of Client defined permissions.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="200"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                  <ns2:method id="addClientPermission" name="POST">
                    <ns2:doc>Adds a client defined permission.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:representation element="ns3:permission" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:permission" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="200"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                  <ns2:resource path="{permissionId}">
                    <ns2:doc>A Client defined permission.</ns2:doc>
                    <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:param name="permissionId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:method id="updateClientPermission" name="PUT">
                      <ns2:doc>Updates a defined permission for a client.</ns2:doc>
                      <ns2:request>
                        <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                        <ns2:representation element="ns3:permission" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:permission" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      </ns2:request>
                      <ns2:response>
                        <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:permission" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      </ns2:response>
                    </ns2:method>
                    <ns2:method id="deleteClientPermission" name="DELETE">
                      <ns2:doc>Deletes a Client defined permission.</ns2:doc>
                      <ns2:request>
                        <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      </ns2:request>
                      <ns2:response>
                        <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation status="204"/>
                        <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      </ns2:response>
                    </ns2:method>
                    <ns2:method id="getClientPermission" name="GET">
                      <ns2:doc>Gets a Client defined permission.</ns2:doc>
                      <ns2:request>
                        <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      </ns2:request>
                      <ns2:response>
                        <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:permission" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                        <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      </ns2:response>
                    </ns2:method>
                  </ns2:resource>
                </ns2:resource>
                <ns2:resource path="granted">
                  <ns2:doc>Client granted permissions</ns2:doc>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="clientId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="getClientGrantedPermissions" name="GET">
                    <ns2:doc>Gets a list of Client granted permissions.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:permissions" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                </ns2:resource>
              </ns2:resource>
            </ns2:resource>
          </ns2:resource>
          <ns2:resource path="roles">
            <ns2:doc>Customer roles</ns2:doc>
            <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:method id="getRoles" name="GET">
              <ns2:doc>Gets a list of roles for a customer</ns2:doc>
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:roles" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
          </ns2:resource>
          <ns2:resource path="users">
            <ns2:doc>A customers users.</ns2:doc>
            <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:method id="addUser" name="POST">
              <ns2:doc>Adds a user to a customer</ns2:doc>
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
            <ns2:method id="getUsers" name="GET">
              <ns2:doc>Gets a list of users for a customer</ns2:doc>
              <ns2:request>
                <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="offset" style="query" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="limit" style="query" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              </ns2:request>
              <ns2:response>
                <ns2:representation element="ns3:usernameConflict" status="409" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:users" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              </ns2:response>
            </ns2:method>
            <ns2:resource path="{username}">
              <ns2:doc>A User.</ns2:doc>
              <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:method id="getUser" name="GET">
                <ns2:doc>Gets a user.</ns2:doc>
                <ns2:request>
                  <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                </ns2:request>
                <ns2:response>
                  <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                </ns2:response>
              </ns2:method>
              <ns2:method id="updateUser" name="PUT">
                <ns2:doc>Updates a user.</ns2:doc>
                <ns2:request>
                  <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                </ns2:request>
                <ns2:response>
                  <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                </ns2:response>
              </ns2:method>
              <ns2:method id="deleteUser" name="DELETE">
                <ns2:doc>Deletes a user.</ns2:doc>
                <ns2:request>
                  <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                </ns2:request>
                <ns2:response>
                  <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation status="204">
                    <ns2:doc>Successful request</ns2:doc>
                  </ns2:representation>
                  <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                </ns2:response>
              </ns2:method>
              <ns2:resource path="key">
                <ns2:doc>Support for user-level API that the Cloud Auth service uses.</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getApiKey" name="GET">
                  <ns2:doc>Gets an user's API key.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userApiKey" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:method id="resetApiKey" name="POST">
                  <ns2:doc>Resets a user's API key.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userApiKey" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
              <ns2:resource path="lock">
                <ns2:doc>User lock.</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="setUserLock" name="PUT">
                  <ns2:doc>Sets the value for the user lock.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
              <ns2:resource path="password">
                <ns2:doc>User Password.</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getUserPassword" name="GET">
                  <ns2:doc>Gets the user's password.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userPassword" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:method id="resetUserPassword" name="POST">
                  <ns2:doc>Resets a user's password.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userPassword" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:method id="setUserPassword" name="PUT">
                  <ns2:doc>Sets a user's password.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:param name="recovery" style="query" type="xs:boolean" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:userCredentials" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userCredentials" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userCredentials" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:resource path="recoverytoken">
                  <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="getPasswordResetToken" name="POST">
                    <ns2:doc>Gets a token restricted to resetting a user's password.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:token" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:severError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                </ns2:resource>
                <ns2:resource path="recoveryemail">
                  <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="sendRecoveryEmail" name="POST">
                    <ns2:doc>Sends an email to a user to allow the user to reset their password.</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                      <ns2:representation element="ns3:passwordRecovery" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:passwordRecovery" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="204">
                        <ns2:doc>Successful request</ns2:doc>
                      </ns2:representation>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                </ns2:resource>
              </ns2:resource>
              <ns2:resource path="groups">
                <ns2:doc>A users groups.</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getGroups" name="GET">
                  <ns2:doc>Gets a list of the groups a user is a member of.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:roles" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:resource path="{groupName}">
                  <ns2:param name="groupName" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  <ns2:method id="setRole" name="PUT">
                    <ns2:doc>Add a user to a Customer Idm group</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="204">
                        <ns2:doc>Successful request</ns2:doc>
                      </ns2:representation>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                  <ns2:method id="deleteRole" name="DELETE">
                    <ns2:doc>Remove a user from a Customer Idm group</ns2:doc>
                    <ns2:request>
                      <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    </ns2:request>
                    <ns2:response>
                      <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation status="204">
                        <ns2:doc>Successful request</ns2:doc>
                      </ns2:representation>
                      <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                      <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    </ns2:response>
                  </ns2:method>
                </ns2:resource>
              </ns2:resource>
              <ns2:resource path="secret">
                <ns2:doc>A users secret question and answer</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="getUserSecret" name="GET">
                  <ns2:doc>Gets a users secret question and answer</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userSecret" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
                <ns2:method id="setUserSecret" name="PUT">
                  <ns2:doc>Sets a users secret question and answer</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:userSecret" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userSecret" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:userSecret" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
              <ns2:resource path="softdelete">
                <ns2:doc>User soft delete flag</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="setUserSoftDelete" name="PUT">
                  <ns2:doc>Sets a users soft delete flag.</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
              <ns2:resource path="status">
                <ns2:doc>A user status</ns2:doc>
                <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:param name="customerId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                <ns2:method id="setUserStatus" name="PUT">
                  <ns2:doc>Sets a users status</ns2:doc>
                  <ns2:request>
                    <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
                    <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:request>
                  <ns2:response>
                    <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                    <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
                  </ns2:response>
                </ns2:method>
              </ns2:resource>
            </ns2:resource>
          </ns2:resource>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="users">
        <ns2:doc>First user for a customer</ns2:doc>
        <ns2:method id="addFirstUser" name="POST">
          <ns2:doc>Creates customer and adds first user.</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:usernameConflict" status="409" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:idmFault" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="{username}">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getUser" name="GET">
            <ns2:doc>Gets a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="{username}/servicecatalog">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getServiceCatalog" name="GET">
            <ns2:doc>Gets a list of serviceCatalog for a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serviceCatalog" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="{username}/baseurlrefs">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getBaseUrlRefs" name="GET">
            <ns2:doc>Gets a list of baseUrlRefs for a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:baseURLRefs" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="addBaseUrlRef" name="PUT">
            <ns2:doc>Adds a baseUrl to a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:representation element="ns3:baseUrlRef" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:baseUrlRef" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation status="201">
                <ns2:doc>Successful request</ns2:doc>
              </ns2:representation>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="{username}/baseurlrefs/{baseUrlId}">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:param name="baseUrlId" style="template" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getBaseUrlRef" name="GET">
            <ns2:doc>Gets a baseUrlRef for a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:baseURLRef" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="deleteBaseUrlRef" name="DELETE">
            <ns2:doc>Removes a baseUrl from a user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation status="204">
                <ns2:doc>Successful request</ns2:doc>
              </ns2:representation>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="{username}/mossoId">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="updateUserMossoId" name="PUT">
            <ns2:doc>Updates mossoId of an user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="{username}/nastId">
          <ns2:param name="username" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="updateUserNastId" name="PUT">
            <ns2:doc>Updates nastId of an user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:representation element="ns3:user" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="mosso">
        <ns2:doc>A Mosso User.</ns2:doc>
        <ns2:resource path="{mossoId}">
          <ns2:param name="mossoId" style="template" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getUser" name="GET">
            <ns2:doc>Gets a nast user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="nast">
        <ns2:doc>A Nast User.</ns2:doc>
        <ns2:resource path="{nastId}">
          <ns2:param name="nastId" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getUser" name="GET">
            <ns2:doc>Gets a nast user.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:user" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="passwordrules">
        <ns2:doc>Password Complexity Rules</ns2:doc>
        <ns2:method id="getRules" name="GET">
          <ns2:doc>Gets a list of password complexity rules</ns2:doc>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:passwordRules" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="/validation/{password}">
          <ns2:param name="password" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="checkPassword" name="GET">
            <ns2:doc>Validates a password against the password complexity rules</ns2:doc>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:passwordValidation" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="auth">
        <ns2:doc>Backward Compatible Auth Methods</ns2:doc>
        <ns2:method id="getUsernameAuth" name="POST">
          <ns2:doc>Gets an Access Token for Auth with Username and Api Key</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:representation element="ns3:usernameCredentials" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:usernameCredentials" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:cloudAuth" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:userDisabled" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="mosso">
          <ns2:method id="getMossoAuth" name="POST">
            <ns2:doc>Gets an Access Token for Auth with MossoId and Api Key</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:representation element="ns3:mossoCredentials" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:mossoCredentials" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:cloudAuth" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:userDisabled" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
        <ns2:resource path="nast">
          <ns2:method id="getNastAuth" name="POST">
            <ns2:doc>Gets an Access Token for Auth with NastId and Api Key</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
              <ns2:representation element="ns3:nastCredentials" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:nastCredentials" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:cloudAuth" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:userDisabled" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="token">
        <ns2:doc>Management of OAuth 2.0 token used by IDM.</ns2:doc>
        <ns2:method id="getAccessToken" name="POST">
          <ns2:doc>Gets an instance of an access token, a refresh token, and their TTLs.
 Will return the current access token if it has not expired.</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema">
              <ns2:doc>HTTP Authorization header for authenticating the calling client.</ns2:doc>
            </ns2:param>
            <ns2:representation element="ns3:authCredentials" mediaType="application/json" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:authCredentials" mediaType="application/xml" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:auth" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="{tokenString}">
          <ns2:param name="tokenString" style="template" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="validateAccessToken" name="GET">
            <ns2:doc>Validates token and then, if valid, returns the access token and its ttl.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0">
                <ns2:doc>Service could not be reached. See the error message for details.</ns2:doc>
              </ns2:representation>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:auth" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:userDisabled" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="getAccessTokenObj" name="GET">
            <ns2:doc>!!! ONLY OTHER IDM INSTANCES CAN CALL THIS !!!
 For cross-data-center token replication.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation mediaType="application/octet-stream"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="revokeAccessToken" name="DELETE">
            <ns2:doc>Removes the token from IDM.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:unauthorized" status="401" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:userDisabled" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
      <ns2:resource path="baseurls">
        <ns2:doc>A Cloud Auth BaseUrl</ns2:doc>
        <ns2:method id="getBaseUrls" name="GET">
          <ns2:doc>Gets a list of baseUrls.</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:baseURLs" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:method id="addBaseUrl" name="POST">
          <ns2:doc>Adds a BaseUrl.</ns2:doc>
          <ns2:request>
            <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            <ns2:representation mediaType="application/json"/>
            <ns2:representation mediaType="application/xml"/>
          </ns2:request>
          <ns2:response>
            <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation status="201">
              <ns2:doc>Successful request</ns2:doc>
            </ns2:representation>
            <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
          </ns2:response>
        </ns2:method>
        <ns2:resource path="{baseUrlId}">
          <ns2:param name="baseUrlId" style="template" type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <ns2:method id="getBaseUrl" name="GET">
            <ns2:doc>Gets a BaseUrl.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:baseURLs" status="200" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
          <ns2:method id="deleteBaseUrl" name="DELETE">
            <ns2:doc>Deletes a BaseUrl.</ns2:doc>
            <ns2:request>
              <ns2:param name="Authorization" style="header" type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
            </ns2:request>
            <ns2:response>
              <ns2:representation element="ns3:serviceUnavailable" status="503" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation status="204">
                <ns2:doc>Successful request</ns2:doc>
              </ns2:representation>
              <ns2:representation element="ns3:itemNotFound" status="404" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:badRequest" status="400" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:forbidden" status="403" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
              <ns2:representation element="ns3:serverError" status="500" xmlns:ns3="http://docs.rackspacecloud.com/idm/api/v1.0"/>
            </ns2:response>
          </ns2:method>
        </ns2:resource>
      </ns2:resource>
    </ns2:resource>
  </ns2:resources>
</ns2:application>]]></con:content><con:type>http://research.sun.com/wadl/2006/10</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/idmapi.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Idm API Schema Types</xsdxt:title>
      <xsdxt:link rev="index" href="auth.xsd"/>
      <xsdxt:link rev="index" href="client.xsd"/>
      <xsdxt:link rev="index" href="customer.xsd"/>
      <xsdxt:link rev="index" href="endpoint.xsd"/>
      <xsdxt:link rev="index" href="fault.xsd"/>
      <xsdxt:link rev="index" href="password.xsd"/>
      <xsdxt:link rev="index" href="token.xsd"/>
      <xsdxt:link rev="index" href="user.xsd"/>
      <xsdxt:link rev="index" href="version.xsd"/>
      <xsdxt:link rev="index" href="role.xsd"/>
      <xsdxt:link rev="index" href="permission.xsd"/>
      <xsdxt:link rev="index" href="password_recovery.xsd"/>
      <!--JAXB vendor extension to avoid having to use JAXBElement wrapper-->
      <jaxb:globalBindings>
        <xjc:simple/>
      </jaxb:globalBindings>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This is the main index XML Schema document for the
				Rackspace
				Identity Management API.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="auth.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to backwards compatible auth.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="endpoint.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to backwards compatible auth endpoints.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="role.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM roles.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="version.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to API version details.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>User entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Client entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="customer.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Customer entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="token.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Defines credentials used to obtain an OAuth token.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Password entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="fault.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>All fault types.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password_recovery.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>End user password recovery request..</p>
      </xsd:documentation>
    </annotation>
  </include>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/auth.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="endpoint.xsd"/>
  <include schemaLocation="token.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Credentials</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities credentials used to obtained
				a
				token from the authentication service.</p>
    </xsd:documentation>
  </annotation>
  <element name="usernameCredentials" type="idm:UsernameCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Credentials used to obtain an auth token.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="nastCredentials" type="idm:NastCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Nast Credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/nast-credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/nast-credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="mossoCredentials" type="idm:MossoCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Mosso Credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/mosso-credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/mosso-credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Credentials" abstract="true">
    <attribute name="key" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The API key.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UsernameCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="username" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The name of the user authenticated.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="NastCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="nastId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>Nast Id used to identify the user.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="MossoCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="mossoId" type="xsd:int" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>Mosso account used to identify the user.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="CloudAuthData">
    <sequence>
      <element name="token" type="idm:Token">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>An Auth Token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element ref="idm:serviceCatalog">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The service catalog.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <element name="cloudAuth" type="idm:CloudAuthData">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A combination of the token and the service catalog. This
                         is returned when a user authenticates.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/endpoint.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>BaseUrls and Endpoints</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
  </annotation>
  <element name="serviceCatalog" type="idm:ServiceCatalog">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The service catalog contains a list of all regional and
                         global endpoints available to a user. The endpoints are
                         sorted by service type.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/serviceCatalog.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/serviceCatalog.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <complexType name="ServiceCatalog">
    <sequence>
      <element name="service" type="idm:Service" minOccurs="1" maxOccurs="unbounded">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of services.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="Service">
    <sequence>
      <element name="endpoint" type="idm:Endpoint" minOccurs="1" maxOccurs="unbounded">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of endpoints.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="name" type="xsd:ID" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The service name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="Endpoint">
    <attribute name="region" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The airport code of the region where the endpoint
                             lives.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute default="false" name="v1Default" type="xsd:boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, then the endpoint will be selected
                             automatically in V1.0 of the Auth API.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="publicURL" type="xsd:anyURI" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The publically accessible service URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="internalURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A service URL, accessible only within the
                             Rackspace Cloud.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="adminURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A service URL used for administration. This may expose
                             additional functionality not found in the public and
                             internal URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <element name="baseURLs" type="idm:BaseURLList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of base URLs.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLs.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLs.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURL" type="idm:BaseURL">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A base URLs.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURL.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURL.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURLRef" type="idm:BaseURLRef">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A refrence to a base URL.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLRequest.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLRequest.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURLRefs" type="idm:BaseURLRefList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of base URL refrences.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLRefs.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLRefs.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="BaseURL">
    <attribute name="id" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>An ID uniquely identifying the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="userType" type="idm:UserType" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>What type of user information should be appended to this
                             baseURL to form a complete endpoint.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="serviceName" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The base URL's service name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="region" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The URL's region.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="publicURL" type="xsd:anyURI" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The public base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="internalURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The internal version of the public base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="adminURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The admin base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="default" type="xsd:boolean" default="false" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true the baseURL is automatically added to
                             new accounts.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="BaseURLRef">
    <attribute name="id" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>An ID uniquely identifying the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="href" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A hyperlink refrence to the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="v1Default" type="xsd:boolean" use="optional" default="false">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, then the refred to base URL is used in version
                             1.0 of the Auth service.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="BaseURLList">
    <sequence>
      <element name="baseURL" type="idm:BaseURL" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="BaseURLRefList">
    <sequence>
      <element name="baseURLRef" type="idm:BaseURLRef" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <simpleType name="UserType">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authRequest can be made with various user/account
                         names. The UserType signifies what kind of account is
                         being used to log in.</p>
      </xsd:documentation>
    </annotation>
    <restriction base="xsd:string">
      <enumeration value="CLOUD">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Cloud username.  This is the same as the unique user id
                                 in the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="NAST">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Nast account number.  This is the same as a nastId in
                                 the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="MOSSO">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Mosso account number. This is the same as mossoId in
                                 the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/token.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Tokens</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to tokens.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related users.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to clients.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <!--Elements-->
  <element name="auth" type="idm:AuthData">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data returned for a successful authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="authCredentials" type="idm:AuthCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data required for authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="token" type="idm:Token">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication Token.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/token.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/token.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Token">
    <attribute name="id" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The token id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="expires_in" type="xsd:int" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A number of seconds until the token expires.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="AuthData">
    <sequence>
      <element name="access_token" type="idm:Token" minOccurs="1" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>An access token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="refresh_token" type="idm:Token" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A refresh token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A client associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <complexType name="AuthCredentials">
    <attribute name="grant_type" type="idm:AuthGrantType" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The OAuth grant type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_id" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_secret" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client secret.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's username.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="password" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="refresh_token" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The refresh token Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="AuthGrantType">
    <restriction base="string">
      <enumeration value="API_CREDENTIALS">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type api_credentials.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="ASSERTION">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type assertion.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="AUTHORIZATION_CODE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type authorization_code.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="NONE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type none.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="PASSWORD">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type password.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="REFRESH_TOKEN">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type refresh_token.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/user.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <include schemaLocation="client.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Users</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a user.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="userCredentials" type="idm:UserCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userApiKey" type="idm:UserApiKey">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's api key.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userPassword" type="idm:UserPassword">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's password.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="user" type="idm:User">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="users" type="idm:UserList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace users.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/users.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/users.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userSecret" type="idm:UserSecret">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's secret question and answer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_secret.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_secret.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="UserCredentials">
    <sequence>
      <element name="newPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's new password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="currentPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's current password.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="UserSecret">
    <attribute name="secretQuestion" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="secretAnswer" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The answer to the user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="User">
    <sequence>
      <element name="secret" type="idm:UserSecret" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's secret contains a question and
							answer that can be used to confirm the
							user's identity.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="password" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="apiKey" type="idm:UserApiKey" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's api key.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="groups" type="idm:ClientGroupList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of roles the user belongs to.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The unique username of the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customerId of the customer that the user is
						associated with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerInum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customer inum of the customer that the user
						is associated with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="email" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's email address.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="personId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique rackspace personId for the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="firstName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's first name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="middleName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's middle name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="lastName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's last name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="displayName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's display name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="prefLanguage" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's preferred language.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="region" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The airport code of the user's region.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:UserStatus" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's status.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user has been
						soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="country" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's country.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="timeZone" type="xsd:string" use="optional" default="America/Chicago">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's time zone.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="mossoId" type="xsd:int"/>
    <attribute name="nastId" type="xsd:string"/>
    <attribute name="created" type="xsd:dateTime"/>
    <attribute name="updated" type="xsd:dateTime"/>
    <attribute name="maxLoginFailuresExceded" type="xsd:boolean"/>
  </complexType>
  <complexType name="UserList">
    <sequence>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
    <attribute name="totalRecords" type="xsd:int" use="optional"/>
    <attribute name="offset" type="xsd:int" use="optional"/>
    <attribute name="limit" type="xsd:int" use="optional"/>
  </complexType>
  <complexType name="UserApiKey">
    <attribute name="apiKey" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's api key.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserPassword">
    <attribute name="password" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="UserStatus">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The UserStatus indicates whether the user is active
					or inactive</p>
      </xsd:documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Active and can authenticate with
							the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Inactive and cannot authenticate
							with the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/client.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a client.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="client" type="idm:Client">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clients" type="idm:ClientList">
    <annotation>
      <xsd:documentation>
        <p>A list of rackspace clients.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clients.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clients.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientCredentials" type="idm:ClientCredentials">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Client">
    <sequence>
      <element name="credentials" type="idm:ClientCredentials" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            <p>The client's credentials.</p>
          </documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of permissions the client has.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="clientId" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique Id.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="xsd:string" use="required">
      <annotation>
        <documentation>
          <p>The unique Id for the customer the client belongs to.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <documentation>
          <p>The client name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-number.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:ClientStatus" use="optional">
      <annotation>
        <documentation>
          <p>The user's status.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client is
						locked.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client has been
						soft deleted.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="ClientList">
    <sequence>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
    <attribute name="totalRecords" type="xsd:int"/>
    <attribute name="offset" type="xsd:int"/>
    <attribute name="limit" type="xsd:int"/>
  </complexType>
  <complexType name="ClientCredentials">
    <attribute name="clientSecret" type="string" use="required">
      <annotation>
        <documentation>
          <p>A client's secret.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="ClientStatus">
    <annotation>
      <documentation>
        <p>The ClientStatus indicates whether the user is
					active or inactive</p>
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <documentation>
            <p>The client is Active and can authenticate
							with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <documentation>
            <p>The client is Inactive and cannot
							authenticate with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="ClientGroup">
    <attribute name="customerId" type="xsd:string"/>
    <attribute name="clientId" type="xsd:string"/>
    <attribute name="name" type="xsd:string"/>
  </complexType>
  <complexType name="ClientGroupList">
    <sequence>
      <element name="clientGroup" type="idm:ClientGroup" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="clientGroup" type="idm:ClientGroup"/>
  <element name="clientGroups" type="idm:ClientGroupList"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/permission.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to permissions.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="permission" type="idm:Permission">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A permission.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permission.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permission.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="permissions" type="idm:PermissionSet">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of permissions.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permissions.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permissions.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Permission">
    <simpleContent>
      <extension base="xsd:string">
        <attribute name="permissionId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>A id of a permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="customerId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The customerId that owns the clientId.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="clientId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The clientId that owns the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="type" type="xsd:string" use="optional">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The mime type of the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="PermissionList">
    <sequence>
      <element name="permission" type="idm:Permission" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
  </complexType>
  <complexType name="PermissionSet">
    <sequence>
      <element name="granted" type="idm:PermissionList" minOccurs="0" maxOccurs="1"></element>
      <element name="defined" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/role.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to roles.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="role" type="idm:Role">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A role.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/role.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/role.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="roles" type="idm:RoleList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of roles.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/roles.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/roles.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Role">
    <sequence>
      <element name="permissions" type="idm:PermissionList">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The list of permissions associated with the role.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="name" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the role.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="type" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The role type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="RoleList">
    <sequence>
      <element name="role" type="idm:Role" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/version.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>API Version Details</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines a version element which provides
				meta information about the current version of the API.</p>
    </xsd:documentation>
  </annotation>
  <element name="version" type="idm:Version">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>This element provides detailed meta information regarding the
					status of the API version. Included is a pointer to both a
					human readable and a machine processable description of the
					API service. The machine processable description is written
					in the Web Application Description Language (WADL). If a
					discrepancy exists between the two specifications, the WADL is
					authoritative as it contains the most accurate and up-to-date
					description of the API service.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/version.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/version.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Version">
    <attribute type="xsd:string" name="id" use="required" fixed="v1.1">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            A unique ID which identifies the API version. Currently
						this is fixed as
            <strong>v1.0</strong>
            . The first element
						of the path to the API endpoints always contains the
						target version ID.
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="idm:VersionStatus" name="status" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The status of the API version. A stable version will
						always have the value
            <strong>CURRENT</strong>
            . See
            <a href="#type_VersionStatus" title="VersionStatus">VersionStatus</a>
            .
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="docURL" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a human readable API specification in PDF
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="wadl" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a machine readable API specification in WADL
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="VersionStatus">
    <restriction base="xsd:string">
      <enumeration value="BETA">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of BETA indicates that this version is a
							candidate for the next major release and may feature
							functionality not available in the current version.
							Developers are encouraged to test and begin the migration
							processes to a BETA version. Note that a BETA version is
							undergoing testing, it has not been officially released,
							and my not be stable.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="CURRENT">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The API version is stable and has been tested. Developers
							are encouraged to develop against this API version. The
							current released version of the API will always be marked
							as CURRENT.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="DEPRECATED">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of DEPRECATED indicates that a newer version of
							the API is available. Application developers are
							discouraged from using this version and should instead
							develop against the latest current version of the API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="VersionList">
    <sequence>
      <element name="version" type="idm:Version" minOccurs="1" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="versions" type="idm:VersionList"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/customer.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Customers</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a customer.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="customer" type="idm:Customer">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace customer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customers" type="idm:CustomerList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace customers.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customers.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customers.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Customer">
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique customer Id. This is also known as the customer number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique inum associated with the customer.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique iname associated with the customer inum.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer has been soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="CustomerList">
    <sequence>
      <element name="customer" type="idm:Customer" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/password.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Passwords</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a password.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="passwordRule" type="idm:PasswordRule">
    <annotation>
      <xsd:documentation>
        <p>A password rule.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRules" type="idm:PasswordRuleList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rules.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rules.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rules.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidation" type="idm:PasswordValidation">
    <annotation>
      <xsd:documentation>
        <p>A password validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_validation.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_validation.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResult" type="idm:PasswordRuleResult">
    <annotation>
      <xsd:documentation>
        <p>A password rule result.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_result.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_result.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResults" type="idm:PasswordRuleResultList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rule results.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_results.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_results.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="PasswordRule">
    <attribute name="id" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="message" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleList">
    <sequence>
      <element name="passwordRule" type="idm:PasswordRule" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordRuleResult">
    <attribute name="passed" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleId" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleName" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleMessage" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleResultList">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResult" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordValidation">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResultList"></element>
    </sequence>
    <attribute name="validPassword" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed all rules.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/fault.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Faults</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This schema file defines faults that may be raised by the IdM
				API.
				These faults are derived from the
        <a href="#type_IdmFault" title="See definition of              IdmFault">IdmFault</a>
      </p>
      <p>
        Faults are associated with a default HTTP status code that
				corresponds to the particular fault type. For example an
        <a href="#element_itemNotFound" title="see definition of              itemNotFound">&lt;itemNotFound></a>
        element is associated
				with the HTTP status code 404. Some elements,
				the
        <a href="#element_authFault" title="see definition of              idmFault">&lt;idmFault></a>
        element for example, may be
				associated with multiple status codes. It
				is also possible
				for multiple fault elements to be associated with
				the same
				default code. The examples below showcase the default status
				codes for each element type. Note that these default codes are
				not
				part of the formal schema. In practice, however, an
				element type will
				likely be associated with its corresponding
				default status code.
      </p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="idmFault" type="idm:IdmFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A generic Idm Fault.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/idm_fault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/idm_fault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userDisabled" type="idm:UserDisabledFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The user has been disabled and is not permitted to
					authenticate.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_disabled.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_disabled.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="missingUsername" type="idm:UserNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication request requires a username.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/missing_username.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/missing_username.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="badRequest" type="idm:BadRequestFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The request is malformed.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/bad_request.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/bad_request.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="unauthorized" type="idm:UnauthorizedFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authorization failed. Bad API Key? Username?</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unauthorized.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unauthorized.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="itemNotFound" type="idm:ItemNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The item or resource could not be found.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/item_not_found.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/item_not_found.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="forbidden" type="idm:ForbiddenFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authentication succeeded but you lack sufficient privileges.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/forbidden.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/forbidden.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="usernameConflict" type="idm:UsernameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that username already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/username_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/username_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientnameConflict" type="idm:ClientnameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A client with that clientname already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clientname_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clientname_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="permissionIdConflict" type="idm:PermisionIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A permisssion with that Id already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/resourceId_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/resourceId_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="emailConflict" type="idm:EmailConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that email address already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/email_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/email_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customerIdConflict" type="idm:CustomerIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A customer with that customerId already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseUrlIdConflict" type="idm:BaseUrlIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A baseUrl with that id already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseurl_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseurl_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientGroupConflict" type="idm:ClientGroupConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A client group with that name already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clientgroup_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clientgroup_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="serviceUnavailable" type="idm:ServiceUnavailableFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The API is currently unavailable.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unavailable.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unavailable.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidationFault" type="idm:PasswordValidationFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The password failed validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/passwordvalidationfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="stalePasswordFault" type="idm:StalePasswordFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The password failed validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/statlepasswordfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/stalepasswordfault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="methodNotAllowed" type="idm:MethodNotAllowedFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The method is not allowed on the resource.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/methodnotallowedfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/methodnotallowedfault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="serverError" type="idm:ServerErrorFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An erorr occured on the server.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/servererror.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/servererror.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="IdmFault">
    <sequence>
      <element name="message" type="xsd:string">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A human readable message that is appropriate for display
							to the
							end user.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="details" type="xsd:string" minOccurs="0">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The optional &lt;details> element may contain useful
							information for tracking down errors (e.g a stack
							trace). This
							information may or may not be appropriate
							for display to an end
							user.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="code" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The HTTP status code associated with the current fault.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserDisabledFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UserNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="BadRequestFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UnauthorizedFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ItemNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ForbiddenFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UsernameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="EmailConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="CustomerIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="PermisionIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="BaseUrlIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ClientnameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ClientGroupConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ServiceUnavailableFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="PasswordValidationFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="StalePasswordFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="MethodNotAllowedFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ServerErrorFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://10.127.7.164:8080/v1.0/xsd/password_recovery.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Password Recovery</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>Parameters for password recovery email. Allows for
				client-specified named parameters that will be substituted into
				placeholders in email template.</p>
    </xsd:documentation>
  </annotation>
  <complexType name="emailConfiguration">
    <sequence>
      <element name="customParams" type="idm:customParamsList" minOccurs="0" maxOccurs="1"/>
    </sequence>
    <attribute name="callbackUrl" type="anyURI" use="required"/>
    <attribute name="templateUrl" type="anyURI" use="required"/>
    <attribute name="from" type="string" use="required"/>
    <attribute name="replyTo" type="string"/>
    <attribute name="subject" type="string" use="required"/>
  </complexType>
  <complexType name="customParam">
    <annotation>
      <documentation>Client-specified named parameter. The parameter names
				are arbitrary and irrelevant to the IDM system itself,
				other than the
				matching placeholders in email template
				will be substituted with the
				value of the incoming named
				parameters.</documentation>
    </annotation>
    <attribute name="name" type="string"/>
    <attribute name="value" type="string"/>
  </complexType>
  <element name="passwordRecovery" type="idm:emailConfiguration">
    <annotation>
      <xsd:documentation>
        <p>A password recovery object.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_recovery.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_recovery.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <complexType name="customParamsList">
    <sequence>
      <element name="params" type="idm:customParam" minOccurs="0" maxOccurs="25"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:endpoint>${#Project#env-apiUrl2}</con:endpoint></con:endpoints><con:resource name="/" path="/"><con:settings/><con:parameters/><con:resource name="xsd/{fileName}" path="xsd/{fileName}"><con:settings/><con:parameters><con:parameter><con:name>fileName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getXSD" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="xslt/{fileName}" path="xslt/{fileName}"><con:settings/><con:parameters><con:parameter><con:name>fileName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getXSLT" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="customers" path="customers"><con:settings/><con:parameters/><con:resource name="{customerId}" path="{customerId}"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="actions/lock" path="actions/lock"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setCustomerLockStatus" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="clients" path="clients"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="{clientId}" path="{clientId}"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="secret" path="secret"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST - resetClientSecret" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="groups" path="groups"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="{groupName}" path="{groupName}"><con:settings/><con:parameters><con:parameter><con:name>groupName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="members" path="members"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>groupName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - addUserToClientGroup" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - removeUserFromClientGroup" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:method name="DELETE - deleteClientGroup" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getClientGroup" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientGroup</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientGroups" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClientGroup" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientGroup</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientGroup</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="permissions" path="permissions"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="defined" path="defined"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="{permissionId}" path="{permissionId}"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>permissionId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - updateClientPermission" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteClientPermission" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getClientPermission" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientDefinedPermissions" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClientPermission" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="granted" path="granted"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getClientGrantedPermissions" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientPermissions" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClient" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClients" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>offset</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>limit</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clients</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClient" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customerIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="roles" path="roles"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getRoles" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:roles</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="users"><con:settings/><con:parameters><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="key" path="key"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getApiKey" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - resetApiKey" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="lock" path="lock"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setUserLock" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="password" path="password"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="recoverytoken" path="recoverytoken"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST - getPasswordResetToken" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:token</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:severError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="recoveryemail" path="recoveryemail"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST - sendRecoveryEmail" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRecovery</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRecovery</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserPassword" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - resetUserPassword" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - setUserPassword" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>recovery</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="groups" path="groups"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="{groupName}" path="{groupName}"><con:settings/><con:parameters><con:parameter><con:name>groupName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setRole" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteRole" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getGroups" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:roles</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="secret" path="secret"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserSecret" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - setUserSecret" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="softdelete" path="softdelete"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setUserSoftDelete" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="status" path="status"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setUserStatus" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateUser" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addUser" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getUsers" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>offset</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>limit</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:users</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getCustomer" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteCustomer" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addCustomer" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="users"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{username}/servicecatalog" path="{username}/servicecatalog"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getServiceCatalog" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceCatalog</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{username}/baseurlrefs" path="{username}/baseurlrefs"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getBaseUrlRefs" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseURLRefs</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - addBaseUrlRef" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseUrlRef</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseUrlRef</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{username}/baseurlrefs/{baseUrlId}" path="{username}/baseurlrefs/{baseUrlId}"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>baseUrlId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getBaseUrlRef" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseURLRef</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteBaseUrlRef" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{username}/mossoId" path="{username}/mossoId"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - updateUserMossoId" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="{username}/nastId" path="{username}/nastId"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - updateUserNastId" method="PUT"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addFirstUser" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="mosso" path="mosso"><con:settings/><con:parameters/><con:resource name="{mossoId}" path="{mossoId}"><con:settings/><con:parameters><con:parameter><con:name>mossoId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="nast" path="nast"><con:settings/><con:parameters/><con:resource name="{nastId}" path="{nastId}"><con:settings/><con:parameters><con:parameter><con:name>nastId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="passwordrules" path="passwordrules"><con:settings/><con:parameters/><con:resource name="/validation/{password}" path="/validation/{password}"><con:settings/><con:parameters><con:parameter><con:name>password</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - checkPassword" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getRules" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRules</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="auth" path="auth"><con:settings/><con:parameters/><con:resource name="mosso" path="mosso"><con:settings/><con:parameters/><con:method name="POST - getMossoAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:mossoCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:mossoCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:cloudAuth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="nast" path="nast"><con:settings/><con:parameters/><con:method name="POST - getNastAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:nastCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:nastCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:cloudAuth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - getUsernameAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:cloudAuth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="token" path="token"><con:settings/><con:parameters/><con:resource name="{tokenString}" path="{tokenString}"><con:settings/><con:parameters><con:parameter><con:name>tokenString</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - validateAccessToken" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getAccessTokenObj" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/octet-stream</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - revokeAccessToken" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - getAccessToken" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:authCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:authCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="baseurls" path="baseurls"><con:settings/><con:parameters/><con:resource name="{baseUrlId}" path="{baseUrlId}"><con:settings/><con:parameters><con:parameter><con:name>baseUrlId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:int</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getBaseUrl" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseURLs</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteBaseUrl" method="DELETE"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getBaseUrls" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:baseURLs</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addBaseUrl" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getVersionInfo" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:version</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serverError</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="CustomerIDM API-old" type="rest" basePath="" definitionUrl="file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl"><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl</con:url><con:content><![CDATA[<application xsi:schemaLocation="xsd/idmapi.xsd" xmlns="http://wadl.dev.java.net/2009/02" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <grammars>
    <include href="idmapi.xsd"/>
  </grammars>
  <resources base="http://172.17.16.85:8080">
    <resource id="version" path="v1.0">
      <method href="#getVersionInfo"/>
      <resource path="auth" id="auth">
        <method href="#getUsernameAuth"/>
        <resource path="nast" id="nastAuth">
          <method href="#getNastAuth"/>
        </resource>
        <resource path="mosso" id="mossoAuth">
          <method href="#getMossoAuth"/>
        </resource>
      </resource>
      <resource path="baseurls" id="baseurls">
        <method href="#getBaseUrls"/>
        <method href="#addBaseUrl"/>
        <resource path="{baseUrlId}" id="baseUrl">
          <method href="#getBaseUrl"/>
          <method href="#deleteBaseUrl"/>
        </resource>
      </resource>
      <resource path="users" id="users">
        <method href="#addFirstUser"/>
        <resource path="{username}" id="user">
          <param name="username" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByUsername"/>
          <resource path="servicecatalog" id="servicecatalog">
            <method href="#getServiceCatalog"/>
          </resource>
          <resource path="baseurlrefs" id="baseurlrefs">
            <method href="#getBaseUrlRefs"/>
            <method href="#addBaseUrlRef"/>
            <resource path="{baseUrlId}" id="baseUrl">
              <method href="#getBaseUrlRef"/>
              <method href="#deleteBaseUrlRef"/>
            </resource>
          </resource>
        </resource>
      </resource>
      <resource path="nast" id="nastUsers">
        <resource path="{nastId}" id="nastId">
          <param name="nastId" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByNastId"/>
        </resource>
      </resource>
      <resource path="mosso" id="mossoUsers">
        <resource path="{mossoId}" id="mossoId">
          <param name="mossoId" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByMossoId"/>
        </resource>
      </resource>
      <resource path="customers" id="customers">
        <method href="#addCustomer"/>
        <resource path="{customerId}" id="customer">
          <param name="customerId" type="xsd:string" required="true" style="template"/>
          <method href="#getCustomer"/>
          <method href="#deleteCustomer"/>
          <resource path="actions" id="customerActions">
            <resource path="lock" id="lock">
              <method href="#setCustomerLockStatus"/>
            </resource>
          </resource>
          <resource path="clients" id="clients">
            <method href="#getClients"/>
            <method href="#addClient"/>
            <resource path="{clientId}" id="client">
              <param name="clientId" type="xsd:string" required="true" style="template"/>
              <method href="#getClient"/>
              <method href="#deleteClient"/>
              <resource path="secret" id="clientSecret">
                <method href="#resetClientSecret"/>
              </resource>
              <resource path="permissions" id="clientPermissions">
                <method href="#getClientPermissions"/>
                <resource path="granted" id="grantedPermissions">
                  <method href="#getClientGrantedPermissions"/>
                </resource>
                <resource path="defined" id="definedPermissions">
                  <method href="#getClientDefinedPermissions"/>
                  <method href="#addClientPermission"/>
                  <resource path="{permissionId}" id="permission">
                    <method href="#getClientPermission"/>
                    <method href="#deleteClientPermission"/>
                    <method href="#updateClientPermission"/>
                  </resource>
                </resource>
              </resource>
              <resource path="softdelete" id="clientSoftDelete">
                <method href="#setClientSoftDelete"/>
              </resource>
            </resource>
          </resource>
          <resource path="users" id="customerUsers">
            <method href="#getUsers"/>
            <method href="#addUser"/>
            <resource path="{username}" id="customerUser">
              <param name="username" type="xsd:string" required="true" style="template"/>
              <method href="#getUser"/>
              <method href="#deleteUser"/>
              <method href="#updateUser"/>
              <resource path="key" id="userApiKey">
                <method href="#resetApiKey"/>
                <method href="#getUserApiKey"/>
              </resource>
              <resource path="lock" id="userLock">
                <method href="#setUserLock"/>
              </resource>
              <resource path="password" id="userPassword">
                <method href="#getUserPassword"/>
                <method href="#setUserPassword"/>
                <method href="#resetUserPassword"/>
                <resource path="recoveryemail" id="recoveryEmail">
                  <method href="#sendRecoveryEmail"/>
                </resource>
                <resource path="recoverytoken" id="recoveryToken">
                  <method href="#getRecoveryToken"/>
                </resource>
              </resource>
              <resource path="roles" id="userRoles">
                <method href="#getUserRoles"/>
                <resource path="{roleName}" id="userRole">
                  <param name="roleName" type="xsd:string" required="true" style="template"/>
                  <method href="#setUserRole"/>
                  <method href="#deleteUserRole"/>
                </resource>
              </resource>
              <resource path="secret" id="userSecret">
                <method href="#setUserSecret"/>
              </resource>
              <resource path="softdelete" id="userSoftDelete">
                <method href="#setUserSoftDelete"/>
              </resource>
              <resource path="status" id="userStatus">
                <method href="#setUserStatus"/>
              </resource>
            </resource>
          </resource>
        </resource>
      </resource>
      <resource path="passwordrules" id="passwordRules">
        <method href="#getPasswordRules"/>
        <resource path="validation/{password}" id="passwordValidation">
          <param name="password" type="xsd:string" required="true" style="template"/>
          <method href="#validatePassword"/>
        </resource>
      </resource>
      <resource path="token" id="token">
        <method href="#getToken"/>
        <resource path="{tokenId}" id="tokenId">
          <param name="tokenId" type="xsd:string" required="true" style="template"/>
          <method href="#validateToken"/>
          <method href="#revokeToken"/>
          <resource path="permissions" id="permissions">
            <method href="#getPermissions"/>
          </resource>
        </resource>
      </resource>
    </resource>
  </resources>
  <!--General Methods-->
  <method name="GET" id="getVersionInfo">
    <response status="200">
      <representation mediaType="application/xml" element="idm:version"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Nast Methods-->
  <method name="GET" id="getUserByNastId">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--auth methods-->
  <method name="POST" id="getUsernameAuth">
    <request>
      <representation mediaType="application/xml" element="idm:UsernameCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:CloudAuthData"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="getNastAuth">
    <request>
      <representation mediaType="application/xml" element="idm:NastCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:CloudAuthData"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="getMossoAuth">
    <request>
      <representation mediaType="application/xml" element="idm:MossoCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:CloudAuthData"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Mosso Methods-->
  <method name="GET" id="getUserByMossoId">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Customer Methods-->
  <method name="POST" id="addCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:customer">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:customerIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Client Methods-->
  <method name="GET" id="getClients">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:clients"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:client">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:clientnameConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setClientSoftDelete">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientGrantedPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientDefinedPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permission"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:resourceIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="updateClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="resetClientSecret">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:ClientCredentials"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Customer Methods-->
  <method name="PUT" id="setCustomerLockStatus">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--User Methods-->
  <method name="POST" id="addFirstUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:user">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:usernameConflict"/>
      <representation mediaType="application/xml" element="idm:customerIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserByUsername">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUsers">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="offset" style="query" required="false" type="xsd:integer"/>
      <param name="limit" style="query" required="false" type="xsd:integer"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:users"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:user">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:usernameConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserSoftDelete">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="updateUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="resetApiKey">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userApiKey"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserApiKey">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userApiKey"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userPassword"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="recovery" type="xsd:boolean" required="false" style="query"/>
      <representation mediaType="application/xml" element="idm:userCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="resetUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userPassword"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="sendRecoveryEmail">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:passwordRecovery"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="getRecoveryToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserRoles">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:roles"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserRole">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteUserRole">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserSecret">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserSecret">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserStatus">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserLock">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Password Rules methods-->
  <method name="GET" id="getPasswordRules">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:passwordRules"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Validation methods-->
  <method name="GET" id="validatePassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Token methods-->
  <method name="POST" id="getToken">
    <request>
      <representation mediaType="application/xml" element="idm:authCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="validateToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="belongsTo" style="query" required="false" type="xsd:string"/>
      <param name="clientId" style="query" required="false" type="xsd:string"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
      <representation mediaType="application/xml" element="idm:userDisabled"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="revokeToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--servicecatalog, baseUrls, and endpoints-->
  <method name="GET" id="getServiceCatalog">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:ServiceCatalog"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getBaseUrlRefs">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:BaseURLRefList"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="addBaseUrlRef">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:BaseURLRef"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getBaseUrlRef">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:BaseURLRef"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteBaseUrlRef">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getBaseUrls">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:BaseURLList"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addBaseUrl">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:BaseURL"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:usernameConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getBaseUrl">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:BaseURL"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteBaseUrl">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idmapi.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Idm API Schema Types</xsdxt:title>
      <xsdxt:link rev="index" href="auth.xsd"/>
      <xsdxt:link rev="index" href="client.xsd"/>
      <xsdxt:link rev="index" href="customer.xsd"/>
      <xsdxt:link rev="index" href="endpoint.xsd"/>
      <xsdxt:link rev="index" href="fault.xsd"/>
      <xsdxt:link rev="index" href="password.xsd"/>
      <xsdxt:link rev="index" href="token.xsd"/>
      <xsdxt:link rev="index" href="user.xsd"/>
      <xsdxt:link rev="index" href="version.xsd"/>
      <xsdxt:link rev="index" href="role.xsd"/>
      <xsdxt:link rev="index" href="permission.xsd"/>
      <xsdxt:link rev="index" href="password_recovery.xsd"/>
      <!--JAXB vendor extension to avoid having to use JAXBElement wrapper-->
      <jaxb:globalBindings>
        <xjc:simple/>
      </jaxb:globalBindings>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This is the main index XML Schema document for the
				Rackspace
				Identity Management API.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="auth.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to backwards compatible auth.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="endpoint.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to backwards compatible auth endpoints.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="role.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM roles.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="version.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to API version details.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>User entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Client entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="customer.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Customer entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="token.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Defines credentials used to obtain an OAuth token.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Password entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="fault.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>All fault types.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password_recovery.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>End user password recovery request..</p>
      </xsd:documentation>
    </annotation>
  </include>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/auth.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="endpoint.xsd"/>
  <include schemaLocation="token.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Credentials</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities credentials used to obtained
				a
				token from the authentication service.</p>
    </xsd:documentation>
  </annotation>
  <element name="usernameCredentials" type="idm:UsernameCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Credentials used to obtain an auth token.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="nastCredentials" type="idm:NastCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Nast Credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/nast-credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/nast-credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="mossoCredentials" type="idm:MossoCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Mosso Credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/mosso-credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/mosso-credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Credentials" abstract="true">
    <attribute name="key" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The API key.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UsernameCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="username" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The name of the user authenticated.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="NastCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="nastId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>Nast Id used to identify the user.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="MossoCredentials">
    <complexContent>
      <extension base="idm:Credentials">
        <attribute name="mossoId" type="xsd:int" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>Mosso account used to identify the user.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="CloudAuthData">
    <sequence>
      <element name="token" type="idm:Token">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>An Auth Token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element ref="idm:serviceCatalog">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The service catalog.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <element name="cloudAuth" type="idm:CloudAuthData">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A combination of the token and the service catalog. This
                         is returned when a user authenticates.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/endpoint.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>BaseUrls and Endpoints</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
  </annotation>
  <element name="serviceCatalog" type="idm:ServiceCatalog">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The service catalog contains a list of all regional and
                         global endpoints available to a user. The endpoints are
                         sorted by service type.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/serviceCatalog.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/serviceCatalog.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <complexType name="ServiceCatalog">
    <sequence>
      <element name="service" type="idm:Service" minOccurs="1" maxOccurs="unbounded">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of services.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="Service">
    <sequence>
      <element name="endpoint" type="idm:Endpoint" minOccurs="1" maxOccurs="unbounded">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of endpoints.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="name" type="xsd:ID" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The service name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="Endpoint">
    <attribute name="region" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The airport code of the region where the endpoint
                             lives.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute default="false" name="v1Default" type="xsd:boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, then the endpoint will be selected
                             automatically in V1.0 of the Auth API.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="publicURL" type="xsd:anyURI" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The publically accessible service URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="internalURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A service URL, accessible only within the
                             Rackspace Cloud.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="adminURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A service URL used for administration. This may expose
                             additional functionality not found in the public and
                             internal URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <element name="baseURLs" type="idm:BaseURLList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of base URLs.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLs.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLs.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURL" type="idm:BaseURL">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A base URLs.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURL.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURL.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURLRef" type="idm:BaseURLRef">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A refrence to a base URL.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLRequest.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLRequest.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="baseURLRefs" type="idm:BaseURLRefList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of base URL refrences.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/baseURLRefs.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/baseURLRefs.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="BaseURL">
    <attribute name="id" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>An ID uniquely identifying the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="userType" type="idm:UserType" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>What type of user information should be appended to this
                             baseURL to form a complete endpoint.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="serviceName" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The base URL's service name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="region" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The URL's region.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="publicURL" type="xsd:anyURI" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The public base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="internalURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The internal version of the public base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="adminURL" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The admin base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="default" type="xsd:boolean" default="false" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true the baseURL is automatically added to
                             new accounts.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="BaseURLRef">
    <attribute name="id" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>An ID uniquely identifying the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="href" type="xsd:anyURI" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A hyperlink refrence to the base URL.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="v1Default" type="xsd:boolean" use="optional" default="false">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>If true, then the refred to base URL is used in version
                             1.0 of the Auth service.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="BaseURLList">
    <sequence>
      <element name="baseURL" type="idm:BaseURL" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="BaseURLRefList">
    <sequence>
      <element name="baseURLRef" type="idm:BaseURLRef" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <simpleType name="UserType">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authRequest can be made with various user/account
                         names. The UserType signifies what kind of account is
                         being used to log in.</p>
      </xsd:documentation>
    </annotation>
    <restriction base="xsd:string">
      <enumeration value="CLOUD">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Cloud username.  This is the same as the unique user id
                                 in the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="NAST">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Nast account number.  This is the same as a nastId in
                                 the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="MOSSO">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>Mosso account number. This is the same as mossoId in
                                 the UserType.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/token.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Tokens</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to tokens.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related users.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to clients.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <!--Elements-->
  <element name="auth" type="idm:AuthData">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data returned for a successful authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="authCredentials" type="idm:AuthCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data required for authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="token" type="idm:Token">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication Token.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/token.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/token.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Token">
    <attribute name="id" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The token id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="expires_in" type="xsd:int" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A number of seconds until the token expires.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="AuthData">
    <sequence>
      <element name="access_token" type="idm:Token" minOccurs="1" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>An access token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="refresh_token" type="idm:Token" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A refresh token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A client associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <complexType name="AuthCredentials">
    <attribute name="grant_type" type="idm:AuthGrantType" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The OAuth grant type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_id" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_secret" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client secret.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's username.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="password" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="refresh_token" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The refresh token Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="AuthGrantType">
    <restriction base="string">
      <enumeration value="API_CREDENTIALS">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type api_credentials.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="ASSERTION">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type assertion.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="AUTHORIZATION_CODE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type authorization_code.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="NONE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type none.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="PASSWORD">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type password.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="REFRESH_TOKEN">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type refresh_token.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/user.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <include schemaLocation="role.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Users</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a user.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="userCredentials" type="idm:UserCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userApiKey" type="idm:UserApiKey">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's api key.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userPassword" type="idm:UserPassword">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's password.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="user" type="idm:User">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="users" type="idm:UserList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace users.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/users.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/users.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userSecret" type="idm:UserSecret">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's secret question and answer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_secret.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_secret.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="UserCredentials">
    <sequence>
      <element name="newPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's new password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="currentPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's current password.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="UserSecret">
    <attribute name="secretQuestion" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="secretAnswer" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The answer to the user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="User">
    <sequence>
      <element name="secret" type="idm:UserSecret" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's secret contains a question and
							answer that can be used to confirm the
							user's identity.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="password" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="apiKey" type="idm:UserApiKey" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's api key.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="roles" type="idm:RoleList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of roles the user belongs to.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The unique username of the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customerId of the customer that the user is
						associated with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerInum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customer inum of the customer that the user
						is associated with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="email" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's email address.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="personId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique rackspace personId for the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="firstName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's first name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="middleName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's middle name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="lastName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's last name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="displayName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's display name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="prefLanguage" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's preferred language.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="region" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The airport code of the user's region.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:UserStatus" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's status.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user has been
						soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="country" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's country.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="timeZone" type="xsd:string" use="optional" default="America/Chicago">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's time zone.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="mossoId" type="xsd:int"/>
    <attribute name="nastId" type="xsd:string"/>
    <attribute name="created" type="xsd:dateTime"/>
    <attribute name="updated" type="xsd:dateTime"/>
  </complexType>
  <complexType name="UserList">
    <sequence>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
    <attribute name="totalRecords" type="xsd:int" use="optional"/>
    <attribute name="offset" type="xsd:int" use="optional"/>
    <attribute name="limit" type="xsd:int" use="optional"/>
  </complexType>
  <complexType name="UserApiKey">
    <attribute name="apiKey" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's api key.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserPassword">
    <attribute name="password" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="UserStatus">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The UserStatus indicates whether the user is active
					or inactive</p>
      </xsd:documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Active and can authenticate with
							the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Inactive and cannot authenticate
							with the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/role.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to roles.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="role" type="idm:Role">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A role.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/role.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/role.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="roles" type="idm:RoleList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of roles.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/roles.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/roles.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Role">
    <sequence>
      <element name="permissions" type="idm:PermissionList">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The list of permissions associated with the role.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="name" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the role.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="type" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The role type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="RoleList">
    <sequence>
      <element name="role" type="idm:Role" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/permission.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to permissions.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="permission" type="idm:Permission">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A permission.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permission.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permission.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="permissions" type="idm:PermissionSet">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of permissions.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permissions.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permissions.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Permission">
    <simpleContent>
      <extension base="xsd:string">
        <attribute name="permissionId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>A id of a permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="customerId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The customerId that owns the clientId.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="clientId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The clientId that owns the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="type" type="xsd:string" use="optional">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The mime type of the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="PermissionList">
    <sequence>
      <element name="permission" type="idm:Permission" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
  </complexType>
  <complexType name="PermissionSet">
    <sequence>
      <element name="granted" type="idm:PermissionList" minOccurs="0" maxOccurs="1"></element>
      <element name="defined" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/client.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a client.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="client" type="idm:Client">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clients" type="idm:ClientList">
    <annotation>
      <xsd:documentation>
        <p>A list of rackspace clients.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clients.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clients.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientCredentials" type="idm:ClientCredentials">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Client">
    <sequence>
      <element name="credentials" type="idm:ClientCredentials" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            <p>The client's credentials.</p>
          </documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of permissions the client has.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="clientId" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique Id.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="xsd:string" use="required">
      <annotation>
        <documentation>
          <p>The unique Id for the customer the client belongs to.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <documentation>
          <p>The client name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-number.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:ClientStatus" use="optional">
      <annotation>
        <documentation>
          <p>The user's status.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client is
						locked.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client has been
						soft deleted.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="ClientList">
    <sequence>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
    <attribute name="totalRecords" type="xsd:int"/>
    <attribute name="offset" type="xsd:int"/>
    <attribute name="limit" type="xsd:int"/>
  </complexType>
  <complexType name="ClientCredentials">
    <attribute name="clientSecret" type="string" use="required">
      <annotation>
        <documentation>
          <p>A client's secret.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="ClientStatus">
    <annotation>
      <documentation>
        <p>The ClientStatus indicates whether the user is
					active or inactive</p>
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <documentation>
            <p>The client is Active and can authenticate
							with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <documentation>
            <p>The client is Inactive and cannot
							authenticate with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/version.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>API Version Details</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines a version element which provides
				meta information about the current version of the API.</p>
    </xsd:documentation>
  </annotation>
  <element name="version" type="idm:Version">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>This element provides detailed meta information regarding the
					status of the API version. Included is a pointer to both a
					human readable and a machine processable description of the
					API service. The machine processable description is written
					in the Web Application Description Language (WADL). If a
					discrepancy exists between the two specifications, the WADL is
					authoritative as it contains the most accurate and up-to-date
					description of the API service.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/version.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/version.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Version">
    <attribute type="xsd:string" name="id" use="required" fixed="v1.1">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            A unique ID which identifies the API version. Currently
						this is fixed as
            <strong>v1.0</strong>
            . The first element
						of the path to the API endpoints always contains the
						target version ID.
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="idm:VersionStatus" name="status" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The status of the API version. A stable version will
						always have the value
            <strong>CURRENT</strong>
            . See
            <a href="#type_VersionStatus" title="VersionStatus">VersionStatus</a>
            .
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="docURL" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a human readable API specification in PDF
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="wadl" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a machine readable API specification in WADL
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="VersionStatus">
    <restriction base="xsd:string">
      <enumeration value="BETA">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of BETA indicates that this version is a
							candidate for the next major release and may feature
							functionality not available in the current version.
							Developers are encouraged to test and begin the migration
							processes to a BETA version. Note that a BETA version is
							undergoing testing, it has not been officially released,
							and my not be stable.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="CURRENT">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The API version is stable and has been tested. Developers
							are encouraged to develop against this API version. The
							current released version of the API will always be marked
							as CURRENT.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="DEPRECATED">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of DEPRECATED indicates that a newer version of
							the API is available. Application developers are
							discouraged from using this version and should instead
							develop against the latest current version of the API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="VersionList">
    <sequence>
      <element name="version" type="idm:Version" minOccurs="1" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="versions" type="idm:VersionList"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/customer.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Customers</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a customer.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="customer" type="idm:Customer">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace customer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customers" type="idm:CustomerList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace customers.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customers.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customers.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Customer">
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique customer Id. This is also known as the customer number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique inum associated with the customer.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique iname associated with the customer inum.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer has been soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="CustomerList">
    <sequence>
      <element name="customer" type="idm:Customer" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/password.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Passwords</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a password.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="passwordRule" type="idm:PasswordRule">
    <annotation>
      <xsd:documentation>
        <p>A password rule.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRules" type="idm:PasswordRuleList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rules.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rules.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rules.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidation" type="idm:PasswordValidation">
    <annotation>
      <xsd:documentation>
        <p>A password validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_validation.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_validation.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResult" type="idm:PasswordRuleResult">
    <annotation>
      <xsd:documentation>
        <p>A password rule result.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_result.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_result.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResults" type="idm:PasswordRuleResultList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rule results.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_results.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_results.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="PasswordRule">
    <attribute name="id" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="message" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleList">
    <sequence>
      <element name="passwordRule" type="idm:PasswordRule" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordRuleResult">
    <attribute name="passed" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleId" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleName" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleMessage" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleResultList">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResult" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordValidation">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResultList"></element>
    </sequence>
    <attribute name="validPassword" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed all rules.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/fault.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Faults</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This schema file defines faults that may be raised by the IdM
				API.
				These faults are derived from the
        <a href="#type_IdmFault" title="See definition of              IdmFault">IdmFault</a>
      </p>
      <p>
        Faults are associated with a default HTTP status code that
				corresponds to the particular fault type. For example an
        <a href="#element_itemNotFound" title="see definition of              itemNotFound">&lt;itemNotFound></a>
        element is associated
				with the HTTP status code 404. Some elements,
				the
        <a href="#element_authFault" title="see definition of              idmFault">&lt;idmFault></a>
        element for example, may be
				associated with multiple status codes. It
				is also possible
				for multiple fault elements to be associated with
				the same
				default code. The examples below showcase the default status
				codes for each element type. Note that these default codes are
				not
				part of the formal schema. In practice, however, an
				element type will
				likely be associated with its corresponding
				default status code.
      </p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="idmFault" type="idm:IdmFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A generic Idm Fault.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/idm_fault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/idm_fault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userDisabled" type="idm:UserDisabledFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The user has been disabled and is not permitted to
					authenticate.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_disabled.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_disabled.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="missingUsername" type="idm:UserNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication request requires a username.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/missing_username.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/missing_username.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="badRequest" type="idm:BadRequestFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The request is malformed.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/bad_request.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/bad_request.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="unauthorized" type="idm:UnauthorizedFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authorization failed. Bad API Key? Username?</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unauthorized.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unauthorized.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="itemNotFound" type="idm:ItemNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The item or resource could not be found.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/item_not_found.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/item_not_found.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="forbidden" type="idm:ForbiddenFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authentication succeeded but you lack sufficient privileges.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/forbidden.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/forbidden.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="usernameConflict" type="idm:UsernameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that username already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/username_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/username_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientnameConflict" type="idm:ClientnameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A client with that clientname already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clientname_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clientname_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="permissionIdConflict" type="idm:PermisionIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A permisssion with that Id already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/resourceId_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/resourceId_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="emailConflict" type="idm:EmailConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that email address already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/email_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/email_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customerIdConflict" type="idm:CustomerIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A customer with that customerId already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="serviceUnavailable" type="idm:ServiceUnavailableFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The API is currently unavailable.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unavailable.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unavailable.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidationFault" type="idm:PasswordValidationFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The password failed validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/passwordvalidationfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/passwordvalidationfault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="methodNotAllowed" type="idm:MethodNotAllowedFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The method is not allowed on the resource.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/methodnotallowedfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/methodnotallowedfault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="serverError" type="idm:ServerErrorFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An erorr occured on the server.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/servererror.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/servererror.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="IdmFault">
    <sequence>
      <element name="message" type="xsd:string">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A human readable message that is appropriate for display
							to the
							end user.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="details" type="xsd:string" minOccurs="0">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The optional &lt;details> element may contain useful
							information for tracking down errors (e.g a stack
							trace). This
							information may or may not be appropriate
							for display to an end
							user.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="code" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The HTTP status code associated with the current fault.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserDisabledFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UserNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="BadRequestFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UnauthorizedFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ItemNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ForbiddenFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="UsernameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="EmailConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="CustomerIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="PermisionIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ClientnameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="ServiceUnavailableFault">
    <complexContent>
      <extension base="idm:IdmFault"></extension>
    </complexContent>
  </complexType>
  <complexType name="PasswordValidationFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="MethodNotAllowedFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ServerErrorFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/password_recovery.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Password Recovery</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>Parameters for password recovery email. Allows for
				client-specified named parameters that will be substituted into
				placeholders in email template.</p>
    </xsd:documentation>
  </annotation>
  <complexType name="emailConfiguration">
    <sequence>
      <element name="customParams" type="idm:customParamsList" minOccurs="0" maxOccurs="1"/>
    </sequence>
    <attribute name="callbackUrl" type="anyURI" use="required"/>
    <attribute name="templateUrl" type="anyURI" use="required"/>
    <attribute name="from" type="string" use="required"/>
    <attribute name="replyTo" type="string"/>
    <attribute name="subject" type="string" use="required"/>
  </complexType>
  <complexType name="customParam">
    <annotation>
      <documentation>Client-specified named parameter. The parameter names
				are arbitrary and irrelevant to the IDM system itself,
				other than the
				matching placeholders in email template
				will be substituted with the
				value of the incoming named
				parameters.</documentation>
    </annotation>
    <attribute name="name" type="string"/>
    <attribute name="value" type="string"/>
  </complexType>
  <element name="passwordRecovery" type="idm:emailConfiguration">
    <annotation>
      <xsd:documentation>
        <p>A password recovery object.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_recovery.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_recovery.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <complexType name="customParamsList">
    <sequence>
      <element name="params" type="idm:customParam" minOccurs="0" maxOccurs="25"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:endpoint>${#Project#env-apiUrl}</con:endpoint></con:endpoints><con:resource name="v1.0" path="v1.0"><con:settings/><con:parameters/><con:resource name="auth" path="auth"><con:settings/><con:parameters/><con:resource name="nast" path="nast"><con:settings/><con:parameters/><con:method name="POST - getNastAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:NastCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:CloudAuthData</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="mosso" path="mosso"><con:settings/><con:parameters/><con:method name="POST - getMossoAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:MossoCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:CloudAuthData</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - getUsernameAuth" method="POST"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:UsernameCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:CloudAuthData</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="baseurls" path="baseurls"><con:settings/><con:parameters/><con:resource name="{baseUrlId}" path="{baseUrlId}"><con:settings/><con:parameters/><con:method name="GET - getBaseUrl" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>baseUrlId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURL</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DELETE - deleteBaseUrl" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>baseUrlId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getBaseUrls" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURLList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addBaseUrl" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURL</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="users"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="servicecatalog" path="servicecatalog"><con:settings/><con:parameters/><con:method name="GET - getServiceCatalog" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:ServiceCatalog</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="baseurlrefs" path="baseurlrefs"><con:settings/><con:parameters/><con:resource name="{baseUrlId}" path="{baseUrlId}"><con:settings/><con:parameters/><con:method name="GET - getBaseUrlRef" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>baseUrlId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURLRef</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteBaseUrlRef" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>baseUrlId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getBaseUrlRefs" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURLRefList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - addBaseUrlRef" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:BaseURLRef</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserByUsername" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addFirstUser" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customerIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="nast" path="nast"><con:settings/><con:parameters/><con:resource name="{nastId}" path="{nastId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>nastId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserByNastId" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="mosso" path="mosso"><con:settings/><con:parameters/><con:resource name="{mossoId}" path="{mossoId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>mossoId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserByMossoId" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="customers" path="customers"><con:settings/><con:parameters/><con:resource name="{customerId}" path="{customerId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="actions" path="actions"><con:settings/><con:parameters/><con:resource name="lock" path="lock"><con:settings/><con:parameters/><con:method name="PUT - setCustomerLockStatus" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="clients" path="clients"><con:settings/><con:parameters/><con:resource name="{clientId}" path="{clientId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="secret" path="secret"><con:settings/><con:parameters/><con:method name="POST - resetClientSecret" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:ClientCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="permissions" path="permissions"><con:settings/><con:parameters/><con:resource name="granted" path="granted"><con:settings/><con:parameters/><con:method name="GET - getClientGrantedPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="defined" path="defined"><con:settings/><con:parameters/><con:resource name="{permissionId}" path="{permissionId}"><con:settings/><con:parameters/><con:method name="GET - getClientPermission" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteClientPermission" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateClientPermission" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientDefinedPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClientPermission" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resourceIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="softdelete" path="softdelete"><con:settings/><con:parameters/><con:method name="PUT - setClientSoftDelete" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClient" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteClient" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClients" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clients</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClient" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientnameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="users"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="key" path="key"><con:settings/><con:parameters/><con:method name="POST - resetApiKey" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getUserApiKey" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="lock" path="lock"><con:settings/><con:parameters/><con:method name="PUT - setUserLock" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="password" path="password"><con:settings/><con:parameters/><con:resource name="recoveryemail" path="recoveryemail"><con:settings/><con:parameters/><con:method name="POST - sendRecoveryEmail" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRecovery</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="recoverytoken" path="recoverytoken"><con:settings/><con:parameters/><con:method name="POST - getRecoveryToken" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserPassword" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - setUserPassword" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>recovery</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - resetUserPassword" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="roles" path="roles"><con:settings/><con:parameters/><con:resource name="{roleName}" path="{roleName}"><con:settings/><con:parameters><con:parameter required="true"><con:name>roleName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setUserRole" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUserRole" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserRoles" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:roles</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="secret" path="secret"><con:settings/><con:parameters/><con:method name="PUT - setUserSecret" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="softdelete" path="softdelete"><con:settings/><con:parameters/><con:method name="PUT - setUserSoftDelete" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="status" path="status"><con:settings/><con:parameters/><con:method name="PUT - setUserStatus" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateUser" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUsers" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>offset</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>limit</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:users</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addUser" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getCustomer" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteCustomer" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addCustomer" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customerIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="passwordrules" path="passwordrules"><con:settings/><con:parameters/><con:resource name="validation/{password}" path="validation/{password}"><con:settings/><con:parameters><con:parameter required="true"><con:name>password</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - validatePassword" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getPasswordRules" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRules</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="token" path="token"><con:settings/><con:parameters/><con:resource name="{tokenId}" path="{tokenId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>tokenId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="permissions" path="permissions"><con:settings/><con:parameters/><con:method name="GET - getPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - validateToken" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>belongsTo</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - revokeToken" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - getToken" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:authCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getVersionInfo" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:version</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://172.17.16.85:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="TestSuite-sprint13"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup (acquire and revoke existing tokens)" searchProperties="true" id="0990071b-f988-4650-a76d-bddde9d04b0e"><con:settings/><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="${#TestSuite#QAAdminPassword}" refresh_token="" username="${#TestSuite#QAAdminUserName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#CustomeridmClientId}" client_secret="${#TestSuite#CustomeridmClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customeridmDev"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customeridmDev" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#CustomeridmClientId}" client_secret="${#TestSuite#CustomeridmClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="${#TestSuite#QAPassword}" refresh_token="" username="${#TestSuite#QAUserName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#AuthServiceClientId}" client_secret="${#TestSuite#AuthServiceClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>adminToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>adminToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>customeridmToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customeridm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customeridmToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>clientToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>clientToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>userToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>userToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>authServiceToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - auth service</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>authserviceToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customeridmDevToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customeridmDev</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customeridmDevToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - customeridmDev"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - customeridmDev" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmDevToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmDevToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - admin"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - user"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#authserviceToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - client"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#clientToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#clientToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup (acquire new tokens and create user)" searchProperties="true" id="3d1f93f4-d8f7-42ac-9d24-c58f682ff22c"><con:settings/><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="${#TestSuite#QAAdminPassword}" refresh_token="" username="${#TestSuite#QAAdminUserName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#CustomeridmClientId}" client_secret="${#TestSuite#CustomeridmClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customeridmDev"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customeridmDev" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#CustomeridmClientId}" client_secret="${#TestSuite#CustomeridmClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="${#TestSuite#QAPassword}" refresh_token="" username="${#TestSuite#QAUserName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#AuthServiceClientId}" client_secret="${#TestSuite#AuthServiceClientSecret}" grant_type="NONE" password="" refresh_token="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="datagen" name="DataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>111</start><end>9999999</end><step/><pattern>soapuiTestUser-0</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>adminToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>adminToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" disabled="false" entitize="false" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false"><con:name>customeridmToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customeridm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customeridmToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath xsi:nil="true"/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>clientToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>clientToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>userToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>userToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>authServiceToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - auth service</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>authserviceToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUsername1</con:name><con:sourceType>newUsername1</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:sourcePath/><con:targetType>soapuiTestUsername</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false"><con:name>customeridmDevToken</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customeridmDev</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customeridmDevToken</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addUser" resourcePath="/v1.0//customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="Rahman.Syed@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="false" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${DataGen#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="Me" secretQuestion="Who is cool?"/>
   <!--Optional:-->
   <v1:password password="P@ssw0rd"/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-109 setUserSoftDelete" searchProperties="true" id="71fef939-81b7-48fc-86e8-2865877241c2"><con:settings/><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0//customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="" email="" firstName="" iname="" inum="" lastName="" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="true" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin 2"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0//customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="" email="" firstName="" iname="" inum="" lastName="" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin 3" disabled="true"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0//customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin 3" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="" email="" firstName="" iname="" inum="" lastName="" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin 3"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - customeridm" disabled="true"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0//customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="" email="" firstName="" iname="" inum="" lastName="" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-120 sendRecoveryEmail" searchProperties="true" id="aba80021-43c6-4d2c-bc46-db647552f230"><con:settings/><con:testStep type="restrequest" name="POST sendRecoveryEmail - soapuiTestUser"><con:settings/><con:config service="CustomerIDM API" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0//customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - soapuiTestUser" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:passwordRecovery callbackUrl="http://www.rackspace.com" from="no-reply@idm.rackspace.com" replyTo="no-reply@idm.rackspace.com" subject="Forgotten password" templateUrl="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:customParams>
      <!--0 to 25 repetitions:-->
      <v1:params name="" value=""/>
   </v1:customParams>
</v1:passwordRecovery>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - soapuiTestUser"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-121 getPasswordResetToken" searchProperties="true" id="d87ef665-6970-4ebd-a41b-15789a1bab22"><con:settings/><con:testStep type="restrequest" name="POST getPasswordResetToken - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getPasswordResetToken" resourcePath="/v1.0//customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getPasswordResetToken - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#QAUserName}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@username]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@username</path><content>qauser</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#QAUserName}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-122 updateUserMossoId" searchProperties="true" id="887cb4b8-b506-464c-9be8-91f4067e1476"><con:settings/><con:testStep type="restrequest" name="PUT updateUserMossoId - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserMossoId" resourcePath="/v1.0//users/{username}/mossoId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserMossoId - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="222222" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@mossoId]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@mossoId</path><content>222222</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserMossoId - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserMossoId - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserMossoId" resourcePath="/v1.0//users/{username}/mossoId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserMossoId - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="111111" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserMossoId - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@mossoId]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@mossoId</path><content>111111</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserMossoId - admin"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserMossoId" resourcePath="/v1.0//users/{username}/mossoId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserMossoId - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="444444" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserMossoId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserMossoId - user"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserMossoId" resourcePath="/v1.0//users/{username}/mossoId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserMossoId - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="555555" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserMossoId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserMossoId - bad mossoid"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserMossoId" resourcePath="/v1.0//users/{username}/mossoId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserMossoId - bad mossoid" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="hello" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserMossoId - bad mossoid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:badRequest[1]/ns1:message[1]/text()</path><content>Not a number: hello</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-122 updateUserNastId" searchProperties="true" id="0e8ca500-58c0-4c91-9e1a-bce90994e2fe"><con:settings/><con:testStep type="restrequest" name="PUT updateUserNastId - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserNastId" resourcePath="/v1.0//users/{username}/nastId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserNastId - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="NEWnastid1" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="XPath Match" name="Match content of [@nastId]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@nastId</path><content>NEWnastid1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserNastId - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserNastId - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserNastId" resourcePath="/v1.0//users/{username}/nastId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserNastId - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="NEWnastid2" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserNastId - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@nastId]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@nastId</path><content>NEWnastid2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserNastId - admin"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserNastId" resourcePath="/v1.0//users/{username}/nastId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserNastId - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="NEWnastid3" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserNastId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUserNastId - user"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - updateUserNastId" resourcePath="/v1.0//users/{username}/nastId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUserNastId - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="" middleName="" mossoId="" nastId="NEWnastid4" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${#TestSuite#soapuiTestUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="" secretQuestion=""/>
   <!--Optional:-->
   <v1:password password=""/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUserNastId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-135 setUserPassword" searchProperties="true" id="fde6b02a-8f11-4f5e-8e63-4318443e174c"><con:settings/><con:testStep type="restrequest" name="PUT setUserPassword - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setUserPassword" resourcePath="/v1.0//customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:newPassword password="B@sk3tball"/>
   <!--Optional:-->
   <v1:currentPassword password="P@ssw0rd"/>
</v1:userCredentials>]]></con:request><con:assertion type="XPath Match" name="Match content of [@password]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:userCredentials[1]/ns1:newPassword[1]/@password</path><content>B@sk3tball</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-135 resetUserPassword" searchProperties="true" id="822aecc5-86de-4860-8143-9bf77dd6bb55"><con:settings/><con:testStep type="restrequest" name="POST resetUserPassword - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - resetUserPassword" resourcePath="/v1.0//customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [@password]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword/@password)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-136 getUserLockStatus" searchProperties="true" id="52cbdfdb-9b01-476d-aeeb-7d675b032290"><con:settings/><con:testStep type="datagen" name="DataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>111</start><end>9999999</end><step/><pattern>soapuiTestUser-0</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addUser" resourcePath="/v1.0//customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request><![CDATA[<v1:user country="" created="" customerId="${#TestSuite#QACustomerId}" customerInum="" displayName="John Smith" email="johnsmith123@rackspace.com" firstName="John" iname="" inum="" lastName="Smith" locked="false" maxLoginFailuresExceded="false" middleName="" mossoId="" nastId="" personId="" prefLanguage="" region="" softDeleted="false" status="ACTIVE" timeZone="America/Chicago" updated="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">
   <!--Optional:-->
   <v1:secret secretAnswer="Me" secretQuestion="Who is cool?"/>
   <!--Optional:-->
   <v1:password password="P@ssw0rd"/>
   <!--Optional:-->
   <v1:apiKey apiKey=""/>
   <!--Optional:-->
   <v1:groups>
      <!--Zero or more repetitions:-->
      <v1:clientGroup clientId="" customerId="" name=""/>
   </v1:groups>
</v1:user>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 2"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 3"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 3" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 4"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 4" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 5"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 5" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 6"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 6" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getAccessToken - soapuiTestUser 7"><con:settings/><con:config service="CustomerIDM API" methodName="POST - getAccessToken" resourcePath="/v1.0//token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getAccessToken - soapuiTestUser 7" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="${#TestSuite#QAClientId}" client_secret="${#TestSuite#QAClientSecret}" grant_type="PASSWORD" password="wrongpassword" refresh_token="" username="${DataGen#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@maxLoginFailuresExceded</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${DataGen#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${DataGen#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${DataGen#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 addClientGroup" searchProperties="true" id="af006bcf-6fbb-4dd0-a544-73f4ed1d6649"><con:settings/><con:testStep type="restrequest" name="POST addClientGroup - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup1" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - customeridm 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup2" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - customeridm 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroup[1]/@name</path><content>NewClientGroup2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - customeridm 3"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - customeridm 3" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup1" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - customeridm 3"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - admin"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - user"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - bad token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/@code</path><content>401</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - bad customerid as customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - bad customerid as customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="badcustomerid" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - bad customerid as customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - customerid url/request mismatch"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - customerid url/request mismatch" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="badcustomerid" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - customerid url/request mismatch"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:badRequest[1]/ns1:message[1]/text()</path><content>CustomerId in clientGroup does not match CustomerId in url</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - customerid url/request mismatch 2"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - customerid url/request mismatch 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - customerid url/request mismatch 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:badRequest[1]/ns1:message[1]/text()</path><content>CustomerId in clientGroup does not match CustomerId in url</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - bad clientid as customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - bad clientid as customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="badclientid" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - bad clientid as customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - clientid url/request mismatch"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - clientid url/request mismatch" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="badclientid" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - clientid url/request mismatch"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:badRequest[1]/ns1:message[1]/text()</path><content>ClientId in clientGroup does not match ClientId in url</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClientGroup - clientid url/request mismatch 2"><con:settings/><con:config service="CustomerIDM API" methodName="POST - addClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClientGroup - clientid url/request mismatch 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:clientGroup clientId="${#TestSuite#QAClientId}" customerId="${#TestSuite#QACustomerId}" name="NewClientGroup3" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClientGroup - clientid url/request mismatch 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:badRequest[1]/ns1:message[1]/text()</path><content>ClientId in clientGroup does not match ClientId in url</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 getClientGroups" searchProperties="true" id="bd862ad0-382a-457f-8448-2574e5978cd5"><con:settings/><con:testStep type="restrequest" name="GET getClientGroups - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[2]/@name</path><content>NewClientGroup2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - admin"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - user"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[2]/@name</path><content>NewClientGroup2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/@code</path><content>401</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Client with Id QATESTCLIENT not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroups - bad clientid"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroups" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroups - bad clientid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroups - bad clientid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Client with Id badclientid not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 getClientGroup" searchProperties="true" id="48328f08-541f-48c8-90ec-13b262edbcd8"><con:settings/><con:testStep type="restrequest" name="GET getClientGroup - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - admin"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - user"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/ns1:message[1]/text()</path><content>Authentication Failed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - bad groupname"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - bad groupname" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - bad groupname"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>ClientGroup with Name bad groupname, ClientId QATESTCLIENT, and CustomerId RCN-QATestingCustomer not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="bad groupname"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>ClientGroup with Name NewClientGroup1, ClientId QATESTCLIENT, and CustomerId badcustomer not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="badcustomer"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGroup - bad clientid"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGroup - bad clientid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGroup - bad clientid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>ClientGroup with Name NewClientGroup1, ClientId badclientid, and CustomerId RCN-QATestingCustomer not found.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 addUserToClientGroup" searchProperties="true" id="3daaa826-6a20-4576-9854-8006ebc0be8d"><con:settings/><con:testStep type="restrequest" name="PUT addUserToClientGroup - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - customeridm 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - customeridm 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - admin"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - user"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - bad token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/ns1:message[1]/text()</path><content>Authentication Failed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - bad customerid" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - bad clientid"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - bad clientid" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - bad clientid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addUserToClientGroup - bad username"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - addUserToClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addUserToClientGroup - bad username" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addUserToClientGroup - bad username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>User with username badusername not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="username" value="badusername"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 getGroups" searchProperties="true" id="87b0b14d-171f-4dea-aa79-62ea711d6f23"><con:settings/><con:testStep type="restrequest" name="GET getGroups - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - admin"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - user"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@name]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:clientGroups[1]/ns1:clientGroup[1]/@name</path><content>NewClientGroup1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/ns1:message[1]/text()</path><content>Authentication Failed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message] using RegEx"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:itemNotFound[1]/ns1:message[1]/text(), 'User not found: badcustomerid*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="badcustomerid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getGroups - bad username"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getGroups" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getGroups - bad username" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getGroups - bad username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>User not found: RCN-QATestingCustomer - badusername</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="badusername"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 removeUserFromClientGroup" searchProperties="true" id="77dbf1b9-84af-4b18-a380-152ba891a248"><con:settings/><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - customeridm 2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - admin"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - user"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE removeUserFromClientGroup - bad clientid"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - removeUserFromClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}/members/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE removeUserFromClientGroup - bad clientid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE removeUserFromClientGroup - bad clientid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 deleteClientGroup" searchProperties="true" id="1e606dba-1e07-4c8a-b797-ca44eeda5f90"><con:settings/><con:testStep type="restrequest" name="DELETE deleteClientGroup - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup2"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - customeridm 2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - customeridm 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup2"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - admin"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - user"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:unauthorized[1]/ns1:message[1]/text()</path><content>Authentication Failed.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - bad clientid"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - bad clientid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="clientId" value="badclientid"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - bad group"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - bad group" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteClientGroup - bad group"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Client Group with Name RCN-QATestingCustomer, ClientId QATESTCLIENT, and CustomerId badgroup not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="badgroup"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClientGroup - customeridm (cleanup)"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteClientGroup" resourcePath="/v1.0//customers/{customerId}/clients/{clientId}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClientGroup - customeridm (cleanup)" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="NewClientGroup1"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="clientId" value="${#TestSuite#QAClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 setRole" searchProperties="true" id="c58e0ee6-3a6b-4f93-ae21-2dc1554e3315"><con:settings/><con:testStep type="restrequest" name="PUT setRole - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - customeridm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - customeridm 2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - customeridm 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - customeridm (cleanup)"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - customeridm (cleanup)" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - admin"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - customeridm 2 (cleanup)"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - customeridm 2 (cleanup)" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - user"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@code]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:forbidden[1]/@code</path><content>403</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - bad token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - bad customerid" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message] using RegEx"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:itemNotFound[1]/ns1:message[1]/text(), 'User not found: badcustomerid*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - bad username"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - bad username" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - bad username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>User not found: RCN-QATestingCustomer - badusername</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="badusername"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - bad idmgroup"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - bad idmgroup" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setRole - bad idmgroup"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Add User to Group Failed - Group not found: badidmgroup</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="badidmgroup"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-142 deleteRole" searchProperties="true" id="900be766-4c70-4bed-b78b-8b3095e866f7"><con:settings/><con:testStep type="restrequest" name="PUT setRole - customeridm (cleanup)"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - customeridm (cleanup)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - customeridm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - customeridm 2"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - customeridm 2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - customeridm 2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setRole - customeridm 2 (cleanup)"><con:settings/><con:config service="CustomerIDM API" methodName="PUT - setRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setRole - customeridm 2 (cleanup)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - admin"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - user"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - auth service"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - bad token"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - bad token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - bad token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="Authorization" value="OAuth badtoken"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - bad customerid"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - bad customerid" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - bad customerid"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message] using RegEx"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:itemNotFound[1]/ns1:message[1]/text(), 'Remove User From Group Failed - User not found: soapuiTestUser*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="customerId" value="badcustomerid"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - bad idmgroup"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - bad idmgroup" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - bad idmgroup"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Remove User From Group Failed - Group not found: badidmgroup</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="badidmgroup"/>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteRole - bad username"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteRole" resourcePath="/v1.0//customers/{customerId}/users/{username}/groups/{groupName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteRole - bad username" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteRole - bad username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [message]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:itemNotFound[1]/ns1:message[1]/text()</path><content>Remove User From Group Failed - User not found: badusername</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="badusername"/>
  <con:entry key="groupName" value="${#TestSuite#QACustomerIdmGroup}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-123 validateToken" searchProperties="true" id="4b23cace-0239-4710-a798-024d80afbf2b" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET validateAccessToken - customeridm dev token in QA"><con:settings/><con:config service="CustomerIDM API" methodName="GET - validateAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateAccessToken - customeridm dev token in QA" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateAccessToken - customeridm dev token in QA"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmDevToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateAccessToken - customeridm QA token in dev"><con:settings/><con:config service="CustomerIDM API" methodName="GET - validateAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateAccessToken - customeridm QA token in dev" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateAccessToken - customeridm QA token in dev"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@expires_in]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth/ns1:access_token/@expires_in)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmDevToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-123 getUser" searchProperties="true" id="6ef9d2a8-fa34-43ac-a095-def673a09ac2" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET getUser - customeridm dev token in QA"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - customeridm dev token in QA" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - customeridm dev token in QA"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@username]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@username</path><content>qauser</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#QAUserName}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmdevToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - customeridm QA token in dev"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - customeridm QA token in dev" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - customeridm QA token in dev"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@username]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@username</path><content>qauser</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#QAUserName}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cleanup" searchProperties="true" id="f0c0f0c6-ca82-4cc5-88ad-bac7001c3a29"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - deleteUser" resourcePath="/v1.0//customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#soapuiTestUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#QACustomerId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - customeridm"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - customeridm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - customeridmDev"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - customeridmDev" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl2}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customeridmDevToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#customeridmDevToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - admin"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#adminToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#adminToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - user"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#userToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#userToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - auth service"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - auth service" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authserviceToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#authserviceToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeAccessToken - client"><con:settings/><con:config service="CustomerIDM API" methodName="DELETE - revokeAccessToken" resourcePath="/v1.0//token/{tokenString}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeAccessToken - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#clientToken}"/>
  <con:entry key="tokenString" value="${#TestSuite#clientToken}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>adminToken</con:name><con:value>QA-b26c22fc50684e3f921d5c506910191a</con:value></con:property><con:property><con:name>userToken</con:name><con:value>QA-1c612950af7f41f190948922f79d0f2a</con:value></con:property><con:property><con:name>clientToken</con:name><con:value>QA-a0d03ac7899548d69795bd293f03c54d</con:value></con:property><con:property><con:name>authserviceToken</con:name><con:value>QA-070cbc24f5e549f0ae8f63af83a1fe80</con:value></con:property><con:property><con:name>customeridmToken</con:name><con:value>QA-c4616693d6f94b28a6d7ae9393f88ceb</con:value></con:property><con:property><con:name>customeridmDevToken</con:name><con:value>DEV-fd9714fb8f5248f4b4ce0880ec592a4a</con:value></con:property><con:property><con:name>AuthServiceClientId</con:name><con:value>bde1268ebabeeabb70a0e702a4626977c331d5c4</con:value></con:property><con:property><con:name>AuthServiceClientSecret</con:name><con:value>password</con:value></con:property><con:property><con:name>CustomeridmClientId</con:name><con:value>18e7a7032733486cd32f472d7bd58f709ac0d221</con:value></con:property><con:property><con:name>CustomeridmClientSecret</con:name><con:value>password</con:value></con:property><con:property><con:name>QACustomerId</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>QAClientId</con:name><con:value>QATESTCLIENT</con:value></con:property><con:property><con:name>QAClientSecret</con:name><con:value>password</con:value></con:property><con:property><con:name>QAAdminUserName</con:name><con:value>qaadmin</con:value></con:property><con:property><con:name>QAAdminPassword</con:name><con:value>password</con:value></con:property><con:property><con:name>QAUserName</con:name><con:value>qauser</con:value></con:property><con:property><con:name>QAPassword</con:name><con:value>password</con:value></con:property><con:property><con:name>QAUserName2</con:name><con:value>qatester1</con:value></con:property><con:property><con:name>QAPassword2</con:name><con:value>P@ssw0rd</con:value></con:property><con:property><con:name>QACustomerIdmGroup</con:name><con:value>Idm Admin</con:value></con:property><con:property><con:name>soapuiTestUsername</con:name><con:value>soapuiTestUser-1495371</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - sprint12"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="0cedcce6-c830-4205-92e8-2127c2cc5a84"><con:settings/><con:testStep type="datagen" name="dataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername1}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername2}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername3}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newClientName1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - auth service"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - auth service" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="bde1268ebabeeabb70a0e702a4626977c331d5c4" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername1</con:name><con:sourceType>newUsername1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername2</con:name><con:sourceType>newUsername2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername3</con:name><con:sourceType>newUsername3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail1</con:name><con:sourceType>newUserEmail1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail2</con:name><con:sourceType>newUserEmail2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUserEmail3</con:name><con:sourceType>newUserEmail3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>authService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - auth service</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>authService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false" ignoreEmpty="false" useXQuery="false" transferChildNodes="false"><con:name>newClientName1</con:name><con:sourceType>newClientName1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newClientName1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-15 passwordMeetsComplexityRules" searchProperties="true" id="e9cffab4-c252-40aa-827b-da3e598c719d"><con:settings/><con:testStep type="restrequest" name="POST addUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password=""/>&lt;/v1:user></con:request><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - uppercase"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:user[1]/ns1:password[1]/@password, '.*[A-Z].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - lowercase"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:user[1]/ns1:password[1]/@password, '.*[a-z].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - number"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:user[1]/ns1:password[1]/@password, '.*[0-9].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - symbol"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:user[1]/ns1:password[1]/@password, '.*[!@#$%^+=?:].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - uppercase"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:userPassword[1]/@password, '.*[A-Z].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - lowercase"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:userPassword[1]/@password, '.*[a-z].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - number"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:userPassword[1]/@password, '.*[0-9].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@password] using RegEx - symbol"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
matches( //ns1:userPassword[1]/@password, '.*[!@#$%^+=?:].*' )</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-20 authWithUsername" searchProperties="true" id="2f7059bb-5b5b-457e-a9b4-45a9197e1fab"><con:settings/><con:testStep type="restrequest" name="POST getUsernameAuth - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - authService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_asdf1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - bad username"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - bad username" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="bad-username-asdf1234"
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - bad username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getUsernameAuth - bad apiKey"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getUsernameAuth" resourcePath="/v1.0/auth" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getUsernameAuth - bad apiKey" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;usernameCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
username="qauser"
key="bad-api-key-asdf1234" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getUsernameAuth - bad apiKey"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-20 authWithNastId" searchProperties="true" id="051711b2-f9a1-4f4d-bb56-d8496665c6b2"><con:settings/><con:testStep type="restrequest" name="POST getNastAuth - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - authService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
nastId="nastid-qauser" 
key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="nastid-qauser" key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="nastid-qauser" key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="nastid-qauser" key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="nastid-qauser" key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="nastid-qauser" key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_xxx_asdf1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - bad nastId"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - bad nastId" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" nastId="bad-nastid-xxxasdsf1234" key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - bad nastId"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getNastAuth - bad apiKey"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getNastAuth" resourcePath="/v1.0/auth/nast" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getNastAuth - bad apiKey" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;nastCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
nastId="nastid-qauser" 
key="bad-api-key-asdf1234" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getNastAuth - bad apiKey"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 addBaseUrl" searchProperties="true" id="520ade3f-7d5f-4b7c-9136-e9c0924627f6"><con:settings/><con:testStep type="datagen" name="DataGen - new baseurls"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern/><random>true</random><persist>false</persist></con:configuration><con:name>newBaseUrlId1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern/><random>true</random><persist>false</persist></con:configuration><con:name>newBaseUrlId2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern/><random>true</random><persist>false</persist></con:configuration><con:name>newBaseUrlId3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newBaseUrlId1</con:name><con:sourceType>newBaseUrlId1</con:sourceType><con:sourceStep>DataGen - new baseurls</con:sourceStep><con:targetType>newBaseUrl1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newBaseUrlId2</con:name><con:sourceType>newBaseUrlId2</con:sourceType><con:sourceStep>DataGen - new baseurls</con:sourceStep><con:targetType>newBaseUrl2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newBaseUrlId3</con:name><con:sourceType>newBaseUrlId3</con:sourceType><con:sourceStep>DataGen - new baseurls</con:sourceStep><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - authService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl1}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl1}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl2}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl2}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl3}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl3}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl3}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl3}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl3}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl3}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - conflicted"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - conflicted" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl1}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl1}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - conflicted"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - unauthorized token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURL xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl3}"
userType="NAST"
serviceName="soapUiService-${#TestSuite#newBaseUrl3}"
region="DFW"
publicURL="https://storage.clouddrive.com/v1"
internalURL="https://storage-snet.clouddrive.com/v1"
adminURL="https://storage-snet.clouddrive.com/v1"
default="true"
/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_asdf_1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addBaseUrl - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addBaseUrl" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addBaseUrl - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addBaseUrl - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-20 authWithMossoId" searchProperties="true" id="9bfb5379-6c84-4f10-a0fc-c13789bf4429"><con:settings/><con:testStep type="restrequest" name="POST getMossoAuth - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - authService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="XPath Match" name="Check for existance of [cloudAuth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:cloudAuth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_xxx_asdf1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - bad mossoId"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - bad mossoId" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="00000000000" 
key="qauser-000-001" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - bad mossoId"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getMossoAuth - bad apiKey"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getMossoAuth" resourcePath="/v1.0/auth/mosso" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getMossoAuth - bad apiKey" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;mossoCredentials xmlns="http://docs.rackspacecloud.com/idm/api/v1.0" 
mossoId="999112358" 
key="bad-api-key-asfa1234" /></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getMossoAuth - bad apiKey"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-22 getUserByUsername" searchProperties="true" id="f28d007f-3ba4-4294-b325-c296c019b593"><con:settings/><con:testStep type="restrequest" name="GET getUserByUsername - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-23 getUserByNastId" searchProperties="true" id="8216fd0f-fdee-45da-a0b2-2f66e3c0bd2e"><con:settings/><con:testStep type="restrequest" name="GET getUserByNastId - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="bad_nast_id_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-24 getUserByMossoId" searchProperties="true" id="072e8417-9892-47be-81cc-f913d75650f8"><con:settings/><con:testStep type="restrequest" name="GET getUserByMossoId - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="bad_mosso_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-3 validateUserEmail" searchProperties="true" id="3ddccb5e-3c31-453b-b2b3-a203c75eacf4"><con:settings/><con:testStep type="restrequest" name="PUT updateUser - bademail1"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - bademail1" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="bademail" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - bademail1"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - bademail2"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - bademail2" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="bademail@blahcom" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - bademail1"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - empty email"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - empty email" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - empty email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@email]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user/@email)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - bademail1"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - bademail1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="bademailval" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password=""/>&lt;/v1:user></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - bademail1"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - bademail2"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - bademail2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="bademail@blah" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password=""/>&lt;/v1:user></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - bademail2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - empty email"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - empty email" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password=""/>&lt;/v1:user></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - empty email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-36 getUserHasTimestamps" searchProperties="true" id="f799e495-e436-4889-9b26-c1ba3785b099"><con:settings/><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [@created]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user/@created)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [@updated]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user/@updated)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-4 resetClientSecret" searchProperties="true" id="8a41b649-9ed1-4865-a360-4081387109e6"><con:settings/><con:testStep type="restrequest" name="POST addClient - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>clientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST addClient - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:client[1]/@clientId</con:sourcePath><con:targetType>newClientId1</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [@clientSecret]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clientCredentials/@clientSecret)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clientCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clientCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetClientSecret - client not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetClientSecret" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetClientSecret - client not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetClientSecret - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-5 sendRecoveryEmailHasValidFromAddress" searchProperties="true" id="4b6b8a95-db4d-4540-934d-cdbc0b7c4f78"><con:settings/><con:testStep type="restrequest" name="POST sendRecoveryEmail - bad from email"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - bad from email" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="bademail" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - bad from email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - bad from email2"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - bad from email2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="bademail@blahcom" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - bad from email2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - missing from email"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - missing from email" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - missing from email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - bad replyto email"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - bad replyto email" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="bademail" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - bad replyto email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - bad replyto email2"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - bad replyto email2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="bademail@blahcom" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - bad replyto email2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - missing replyto email"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - missing replyto email" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="" subject="Recover Password" templateUrl="http://example.com/emailTemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - missing replyto email"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-16 shouldNotAllowLast10Passwords" searchProperties="true" id="c542ac40-689b-43ad-af33-8289cf59da12"><con:settings/><con:testStep type="restrequest" name="POST addUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="P@ssw0rd1"/>&lt;/v1:user></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password2"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password2" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd2"/>&lt;v1:currentPassword password="P@ssw0rd1"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Copy of Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password2"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Copy of Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password3"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password3" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd3"/>&lt;v1:currentPassword password="P@ssw0rd2"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password3"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password4"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password4" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd4"/>&lt;v1:currentPassword password="P@ssw0rd3"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password4"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password5"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password5" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd5"/>&lt;v1:currentPassword password="P@ssw0rd4"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password5"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password6"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password6" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd6"/>&lt;v1:currentPassword password="P@ssw0rd5"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password6"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password7"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password7" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd7"/>&lt;v1:currentPassword password="P@ssw0rd6"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password7"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password8"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password8" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd8"/>&lt;v1:currentPassword password="P@ssw0rd7"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password8"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password9"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password9" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd9"/>&lt;v1:currentPassword password="P@ssw0rd8"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password9"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - password10"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - password10" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd10"/>&lt;v1:currentPassword password="P@ssw0rd9"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - password10"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userCredentials]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userCredentials)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - conflicted"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" methodName="PUT - setUserPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - conflicted" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="P@ssw0rd9"/>&lt;v1:currentPassword password="P@ssw0rd10"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - conflicted"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 getBaseUrls" searchProperties="true" id="71ad6a12-2030-4d87-85a7-73739ac28ce9"><con:settings/><con:testStep type="restrequest" name="GET getBaseUrls - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLs]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#authService_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrls - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLs]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrls - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrls - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrls - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrls - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrls" resourcePath="/v1.0/baseurls" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrls - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrls - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_asdfxxx" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 getBaseUrl" searchProperties="true" id="b1f2e660-556d-4063-8ca1-92df52468201"><con:settings/><con:testStep type="restrequest" name="GET getBaseUrl - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURL]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURL)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURL]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURL)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrl - not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrl - not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrl - not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="bad_baseUrlId-asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 addUserEndpoint" searchProperties="true" id="414d9fd5-d925-47da-86c6-61c439ff0948"><con:settings/><con:testStep type="restrequest" name="PUT addBaseUrlRef - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - authService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl1}"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="${#TestSuite#newBaseUrl2}"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="111111"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="111111"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="111111"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - unauthorized token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="111111"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;baseURLRef xmlns="http://docs.rackspacecloud.com/idm/api/v1.0"
id="111111"
href="https://storage-snet.clouddrive.com/v1"
v1Default="true"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdfasdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT addBaseUrlRef - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - addBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT addBaseUrlRef - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT addBaseUrlRef - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 getUserEndpoints" searchProperties="true" id="952364f3-22f2-418f-a726-2522d0063bf7"><con:settings/><con:testStep type="restrequest" name="GET getBaseUrlRefs - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLRefs]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLRefs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLRefs]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLRefs)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRefs - not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRefs" resourcePath="/v1.0/users/{username}/baseurlrefs" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRefs - not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRefs - not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asfd1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 getUserServiceCatalog" searchProperties="true" id="dcf96b2e-c726-4dd5-b65a-e15c6bbb371d"><con:settings/><con:testStep type="restrequest" name="GET getServiceCatalog - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [serviceCatalog]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:serviceCatalog)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#existingUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [serviceCatalog]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:serviceCatalog)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#existingUsername}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf12345"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getServiceCatalog - not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getServiceCatalog" resourcePath="/v1.0/users/{username}/servicecatalog" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getServiceCatalog - not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getServiceCatalog - not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 getEndpoint" searchProperties="true" id="0025f7af-4756-47e4-a104-13b1e474935a"><con:settings/><con:testStep type="restrequest" name="GET getBaseUrlRef - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLRef]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLRef)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [baseURLRef]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:baseURLRef)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="111111"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="111111"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="111111"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="baseUrlId" value="111111"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getBaseUrlRef - not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getBaseUrlRef - not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getBaseUrlRef - not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 deleteEndpoint" searchProperties="true" id="fd063cde-16d7-425d-ac55-164da9fc8a9d"><con:settings/><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrlRef - not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrlRef" resourcePath="/v1.0/users/{username}/baseurlrefs/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrlRef - not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrlRef - not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IDM-27 deleteBaseUrl" searchProperties="true" id="f5a08fdd-1aba-480a-8866-1bf03475ae6c"><con:settings/><con:testStep type="restrequest" name="DELETE deleteBaseUrl - authService"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - authService" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - authService"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#authService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrl - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrl - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrl - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrl - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteBaseUrl - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteBaseUrl" resourcePath="/v1.0/baseurls/{baseUrlId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteBaseUrl - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteBaseUrl - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="baseUrlId" value="${#TestSuite#newBaseUrl3}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cleanUp" searchProperties="true" id="23ee5713-d815-481c-9c09-f2945e6c59e2"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser - newUsername1"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - newUsername2"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>validPassword</con:name><con:value>P@ssw0rd</con:value></con:property><con:property><con:name>user_token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">QA-b056ed5f35844ffcaa298d27cf88cc1d</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>soapUiTestClient-2248073135</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>newUsername3</con:name><con:value>soapUiTestUser-4468666</con:value></con:property><con:property><con:name>newUsername2</con:name><con:value>soapUiTestUser-4988997</con:value></con:property><con:property><con:name>newUsername1</con:name><con:value>soapUiTestUser-3242135</con:value></con:property><con:property><con:name>newUserEmail3</con:name><con:value>754085760</con:value></con:property><con:property><con:name>newUserEmail2</con:name><con:value>soapUiTestUser-4988997@example.com</con:value></con:property><con:property><con:name>newUserEmail1</con:name><con:value>soapUiTestUser-3242135@example.com</con:value></con:property><con:property><con:name>newClientName1</con:name><con:value>soapUiTestClient-3319272689</con:value></con:property><con:property><con:name>newClientId1</con:name><con:value>340d4014c3b597723d0b33d15233d27318987967</con:value></con:property><con:property><con:name>newBaseUrl3</con:name><con:value>3526992148</con:value></con:property><con:property><con:name>newBaseUrl2</con:name><con:value>152790876</con:value></con:property><con:property><con:name>newBaseUrl1</con:name><con:value>433477219</con:value></con:property><con:property><con:name>invalidPassword</con:name><con:value>asdf</con:value></con:property><con:property><con:name>existingUsername</con:name><con:value>qauser</con:value></con:property><con:property><con:name>existingNastId</con:name><con:value>nastid-qauser</con:value></con:property><con:property><con:name>existingMossoId</con:name><con:value>999112358</con:value></con:property><con:property><con:name>existingCustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-83d71b7a7d434d23ba98f0c6c739e1ca</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-8431188e70d640279e29877d63f53924</con:value></con:property><con:property><con:name>authService_token</con:name><con:value>QA-231c1b79522d4c489c0d947e78ddaebc</con:value></con:property><con:property><con:name>admin_token</con:name><con:value>QA-470cf0abbe5f4790809028fde40e1ee1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - General"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getVersion" searchProperties="true" id="efecb13d-d55d-4aed-855c-899f72826a3a"><con:settings/><con:testStep type="restrequest" name="GET getVersionInfo"><con:settings/><con:config service="CustomerIDM API" methodName="GET - getVersionInfo" resourcePath="/v1.0//" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getVersionInfo" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [version]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:version)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - Passwords"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="1ba8b7eb-4d82-4b9a-8202-9d86b3511700"><con:settings/><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="testuser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getPasswordRules" searchProperties="true" id="23ad8fc1-19d9-4d65-b3ef-2540742ca122"><con:settings/><con:testStep type="restrequest" name="GET passwordRules - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - customerIdm" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - customer client"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - admin"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - user"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - invalid token"><con:settings/><con:config service="CustomerIDM API-old" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf_1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validatePassword" searchProperties="true" id="565660b6-fe4d-46f3-8651-c96b811b576e"><con:settings/><con:testStep type="restrequest" name="GET validatePassword - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - invalid password"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - invalid password" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - invalid password"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="password" value="${#TestSuite#invalid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>QA-470cf0abbe5f4790809028fde40e1ee1</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>QA-891a412cad7243fab80bbf054fefc1b0</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-8431188e70d640279e29877d63f53924</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-83d71b7a7d434d23ba98f0c6c739e1ca</con:value></con:property><con:property><con:name>invalid_password</con:name><con:value>asdf</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>user_token</con:name><con:value>QA-8a9fac0232244a819b55ce546e79f082</con:value></con:property><con:property><con:name>valid_password</con:name><con:value>P@ssw0rd!</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - customers"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="e301763e-4acd-4f39-8757-b464217de84a"><con:settings/><con:testStep type="datagen" name="dataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername2}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername3}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>addNewCustomerNumber</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum</con:name><con:sourceType>customerNumber</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newCustomerNumber</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername</con:name><con:sourceType>newUsername</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUserEmail</con:name><con:sourceType>newUserEmail</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum2</con:name><con:sourceType>customerNumber2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newCustomerNumber2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername2</con:name><con:sourceType>newUsername2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail2</con:name><con:sourceType>newUserEmail2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum3</con:name><con:sourceType>customerNumber3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newCustomerNumber3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername3</con:name><con:sourceType>newUsername3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>newUserEmail3</con:name><con:sourceType>newUserEmail3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>addNewCustomerNumber</con:name><con:sourceType>addNewCustomerNumber</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>addNewCustomerNumber</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addCustomer" searchProperties="true" id="410ba529-6f02-4421-8399-799e469e3172"><con:settings/><con:testStep type="restrequest" name="POST addCustomer - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - conflicted"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - conflicted" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - conflicted"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customerIdConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customerIdConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_asdf1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="lockCustomer" searchProperties="true" id="d90db683-8b3f-4c46-aa6e-7b5110736171"><con:settings/><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#existingCustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getCustomer" searchProperties="true" id="8fd46560-830d-40aa-915f-9bf84bd5a189"><con:settings/><con:testStep type="restrequest" name="GET getCustomer - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unlockCustomer" searchProperties="true" id="f40b84ef-8135-41b4-bb01-ac3767d9180a"><con:settings/><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addFirstUser" searchProperties="true" id="ebb36132-1db7-4e5a-8df2-29b1569ad94e"><con:settings/><con:testStep type="restrequest" name="POST addFirstUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - conflicted customer"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - conflicted customer" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - conflicted customer"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customerIdConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customerIdConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - conflicted username"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - conflicted username" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber2}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - conflicted username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [usernameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:usernameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber2}" email="${#TestSuite#newUserEmail2}" firstName="${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - newUsername1"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - newUsername2"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteCustomer" searchProperties="true" id="f9e6a357-989a-4c60-9cfc-87ff496dea3c"><con:settings/><con:testStep type="restrequest" name="DELETE deleteCustomer - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asfd1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cleanUp" searchProperties="true" id="95b80b2a-80b1-4a57-8307-05f653a4d5a0"><con:settings/><con:testStep type="restrequest" name="DELETE deleteCustomer"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer2"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer3"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer3" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>QA-20d0e1d42a3a4b5bb8669835caddc1d6</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>QA-891a412cad7243fab80bbf054fefc1b0</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-5601b2fc8b6042f4b293d559fcab97fb</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-a8383da347564e559009a1ca9ebdacd0</con:value></con:property><con:property><con:name>invalid_password</con:name><con:value>asdf</con:value></con:property><con:property><con:name>newCustomerNumber</con:name><con:value>soapUiTestCustomer-9981794</con:value></con:property><con:property><con:name>newCustomerNumber2</con:name><con:value>soapUiTestCustomer-5896914</con:value></con:property><con:property><con:name>newCustomerNumber3</con:name><con:value>soapUiTestCustomer-3032607</con:value></con:property><con:property><con:name>newUserEmail</con:name><con:value>soapUiTestUser-5308455@example.com</con:value></con:property><con:property><con:name>newUserEmail2</con:name><con:value>soapUiTestUser-8772478@example.com</con:value></con:property><con:property><con:name>newUserEmail3</con:name><con:value>soapUiTestUser-9620661@example.com</con:value></con:property><con:property><con:name>newUsername</con:name><con:value>soapUiTestUser-5308455</con:value></con:property><con:property><con:name>newUsername2</con:name><con:value>soapUiTestUser-8772478</con:value></con:property><con:property><con:name>newUsername3</con:name><con:value>soapUiTestUser-9620661</con:value></con:property><con:property><con:name>QACustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>QA-b45a3c9c055a4cc2acef47e8f4594d7f</con:value></con:property><con:property><con:name>user_token</con:name><con:value>QA-033c9c280b78416cb3276b1c0f3174ff</con:value></con:property><con:property><con:name>valid_password</con:name><con:value>P@ssw0rd</con:value></con:property><con:property><con:name>addNewCustomerNumber</con:name><con:value>soapUiTestCustomer-9732123</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - clients"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="82b025bc-5f29-4d5a-84f5-77e3c0f12aa3"><con:settings/><con:testStep type="datagen" name="DataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newClientName</con:name><con:sourceType>clientName1</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:sourcePath/><con:targetType>newClientName</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newClientName2</con:name><con:sourceType>clientName2</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:targetType>newClientName2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false" entitize="false"><con:name>newClientName3</con:name><con:sourceType>clientName3</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:targetType>newClientName3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClients" searchProperties="true" id="a30a5598-be7d-4c32-9245-bd6afdfb1388"><con:settings/><con:testStep type="restrequest" name="GET getClients - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clients]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clients)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clients]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clients)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingClientId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_num_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addClient" searchProperties="true" id="7c6ef45d-7c32-4a86-8afb-17915cf170e6"><con:settings/><con:testStep type="restrequest" name="POST addClient - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>clientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST addClient - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:client[1]/@clientId</con:sourcePath><con:targetType>newClientId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - clientId conflict"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - clientId conflict" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - clientId conflict"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clientnameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clientnameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="" customerId="${#TestSuite#existingCustomerNumber}" name="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="bad_customer_number_asdf1234" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>clientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST addClient - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:client[1]/@clientId</con:sourcePath><con:targetType>newClientId2</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId3}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClient" searchProperties="true" id="f0b8ee67-3bc9-41ad-b9a7-04da8299a821"><con:settings/><con:testStep type="restrequest" name="GET getClient - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientPermissions" searchProperties="true" id="b61d7d95-8aba-42ab-88db-1b3420e40095"><con:settings/><con:testStep type="restrequest" name="GET getClientPermissions - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - client not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="IDM"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientGrantedPermissions" searchProperties="true" id="ed1eecec-6205-4ab2-83fe-a13d77db959b"><con:settings/><con:testStep type="restrequest" name="GET getClientGrantedPermissions - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - client not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientDefinedPermissions" searchProperties="true" id="9496d9f9-58f7-46a6-8d67-f644a4b829eb"><con:settings/><con:testStep type="restrequest" name="GET getClientDefinedPermissions - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - client not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cleanup" searchProperties="true" id="ce5a3cc2-a2ff-428e-aa98-1b8ffe6fd862"><con:settings/><con:testStep type="restrequest" name="DELETE deleteClient"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClient" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClient2"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClient2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>QA-c7d99072748644b09c8e851496606401</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>QA-891a412cad7243fab80bbf054fefc1b0</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-8431188e70d640279e29877d63f53924</con:value></con:property><con:property><con:name>customerIdm_clientId</con:name><con:value>18e7a7032733486cd32f472d7bd58f709ac0d221</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-83d71b7a7d434d23ba98f0c6c739e1ca</con:value></con:property><con:property><con:name>existingClientId</con:name><con:value>QATESTCLIENT</con:value></con:property><con:property><con:name>existingCustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>newClientId</con:name><con:value>8ee69f4bc3866add123a8929db5cdd24e4d51d5f</con:value></con:property><con:property><con:name>newClientId2</con:name><con:value>0f9355b5f8426cccb0d86ebd8bd53053c8f9bb59</con:value></con:property><con:property><con:name>newClientId3</con:name><con:value>testClientId3-1038382</con:value></con:property><con:property><con:name>newClientName</con:name><con:value>soapUiTestClient-226572</con:value></con:property><con:property><con:name>newClientName2</con:name><con:value>soapUiTestClient-6137706</con:value></con:property><con:property><con:name>newClientName3</con:name><con:value>soapUiTestClient-9866557</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>QA-b45a3c9c055a4cc2acef47e8f4594d7f</con:value></con:property><con:property><con:name>user_token</con:name><con:value>QA-00ec474b28a846fb90cdf1260577136e</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - users"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="2501f88e-179b-45a6-a05e-039b4fc62133"><con:settings/><con:testStep type="datagen" name="dataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername1}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername2}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername3}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername1</con:name><con:sourceType>newUsername1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername2</con:name><con:sourceType>newUsername2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername3</con:name><con:sourceType>newUsername3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail1</con:name><con:sourceType>newUserEmail1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail2</con:name><con:sourceType>newUserEmail2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUserEmail3</con:name><con:sourceType>newUserEmail3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUsers" searchProperties="true" id="e35d7340-7f87-4583-b305-4156e60778c8"><con:settings/><con:testStep type="restrequest" name="GET getUsers - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addUser" searchProperties="true" id="13ff5d6e-de16-462c-8a52-6acb040bc817"><con:settings/><con:testStep type="restrequest" name="POST addUser - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - invalid password"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - invalid password" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#invalidPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - invalid password"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidationFault]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidationFault)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - username conflict"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - username conflict" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - username conflict"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [usernameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:usernameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - different client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - different client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - different client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - different client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail3}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customer not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail3}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customerId_asdf_1232"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUser" searchProperties="true" id="035f8bca-0b09-4c22-be4f-8b80b8c43185"><con:settings/><con:testStep type="restrequest" name="GET getUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - authorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByUsername" searchProperties="true" id="5a27849d-e031-4f39-a2fe-e6f6895da1e0"><con:settings/><con:testStep type="restrequest" name="GET getUserByUsername - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByNastId" searchProperties="true" id="4b1e245a-6db7-44bb-b5cd-7e000086ef41"><con:settings/><con:testStep type="restrequest" name="GET getUserByNastId - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="bad_nast_id_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByMossoId" searchProperties="true" id="32c7c09c-3e2e-416e-8c45-7f1fb6081793"><con:settings/><con:testStep type="restrequest" name="GET getUserByMossoId - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="bad_mosso_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="updateUser" searchProperties="true" id="ee192cf1-0a3b-46bb-b4f2-13b5d2cfa7e1"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - customerIdm" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - unauthorized client" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - different customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - different customer client" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - admin" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - user" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - user not found" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - invalid token" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resetUserApiKey" searchProperties="true" id="89f7ef5c-c50c-4236-aacb-312f94a051f8"><con:settings/><con:testStep type="restrequest" name="POST resetUserApiKey - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - other customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserApiKey" searchProperties="true" id="216aaa00-634e-442d-a807-c3fa541304f8"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>QA-4fc6c18fa6c4487f9ab1a134d0b01512</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${#TestSuite#validPassword}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user (self)"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user (self)" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asfd1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUserSecret" searchProperties="true" id="ddbead75-bd30-4433-a7c6-943c2afe109e"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>QA-c7afa6109a774390bd52e5f9403f1380</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - newUsername1"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - newUsername1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${#TestSuite#validPassword}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - newUsername1</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - user (self)"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - user (self)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userSecret]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userSecret)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="" secretQuestion="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="lockUser" searchProperties="true" id="ba110e3f-da51-4c2b-9d7a-d9184fbc02b8"><con:settings/><con:testStep type="restrequest" name="PUT setUserLock - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user locked="true" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="bad_username_adsf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_adsf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unlockUser" searchProperties="true" id="b9804450-633a-49a2-af45-26b5d348064e"><con:settings/><con:testStep type="restrequest" name="PUT setUserLock - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserPassword" searchProperties="true" id="603bb611-254b-42f9-86a1-553828b9bbe3"><con:settings/><con:testStep type="restrequest" name="GET getUserPassword - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - other customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - other customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUserPassword" searchProperties="true" id="905e2556-f6b2-434c-94a9-899c0da92b86"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>QA-c7afa6109a774390bd52e5f9403f1380</con:value></con:property><con:property><con:name>old_password</con:name><con:value>P@ssw130601938rd</con:value></con:property><con:property><con:name>new_password</con:name><con:value>P@ssw478799004rd1</con:value></con:property><con:property><con:name>new_pass2</con:name><con:value>P@ssw740363565rd2</con:value></con:property><con:property><con:name>new_pass3</con:name><con:value>P@ssw891081205rd3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="datagen" name="DataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern>P@ssw0rd1</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newPass</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern>P@ssw0rd2</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newPass2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>999999999</end><step/><pattern>P@ssw0rd3</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newPass3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer - passwords"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>old_password</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUserPassword</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:userPassword[1]/@password</con:sourcePath><con:targetType>old_password</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>new_password</con:name><con:sourceType>newPass</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:sourcePath/><con:targetType>new_password</con:targetType><con:targetStep>Properties</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>new_pass2</con:name><con:sourceType>newPass2</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:targetType>new_pass2</con:targetType><con:targetStep>Properties</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>new_pass3</con:name><con:sourceType>newPass3</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:sourcePath/><con:targetType>new_pass3</con:targetType><con:targetStep>Properties</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${Properties#new_password}"/>&lt;v1:currentPassword password="${Properties#old_password}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${Properties#new_pass2}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - newUsername1"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - newUsername1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${Properties#new_password}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer - token"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - newUsername1</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - user (self)"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - user (self)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${Properties#new_pass3}"/>&lt;v1:currentPassword password="${Properties#new_password}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resetUserPassword" searchProperties="true" id="0e9c7cb0-d528-40ed-b28f-c3ffa85343da"><con:settings/><con:testStep type="restrequest" name="POST resetUserPassword - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getPasswordRecoveryToken" searchProperties="true" id="56efd463-ecd5-4d68-8164-d26387b64c9b"><con:settings/><con:testStep type="restrequest" name="POST getRecoveryToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [token]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [token]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asfd1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="sendPasswordRecoveryEmail" searchProperties="true" id="2ba469ef-c8c5-4f5a-a4c9-05b4d7f16822"><con:settings/><con:testStep type="restrequest" name="POST sendRecoveryEmail - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="disableUser" searchProperties="true" id="523099b4-850f-403e-91e1-1c8363641ab4"><con:settings/><con:testStep type="restrequest" name="PUT setUserStatus - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>INACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>INACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="enableUser" searchProperties="true" id="dc06fe61-6f8b-4a1f-a880-4a78cebba5c4"><con:settings/><con:testStep type="restrequest" name="PUT setUserStatus - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>ACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>ACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="softDeleteUser" searchProperties="true" id="e6580c9d-0ece-4ccd-a435-13877e882331"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - other customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="undeleteSoftDeletedUser" searchProperties="true" id="7ca9e453-80d1-4b63-8aa6-59913d76e4bf"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - other customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteUser" searchProperties="true" id="67b8ab34-bd68-4ab9-b3ba-2ae7f6a640dd"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - customerIdm" mediaType="application/xml" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - unauthorized client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - different customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - different customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf12324"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cleanUp" searchProperties="true" id="9965a4f8-6ccd-42ce-a32b-554675e02183"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser2"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser3"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser3" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>QA-c7d99072748644b09c8e851496606401</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>QA-891a412cad7243fab80bbf054fefc1b0</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-8431188e70d640279e29877d63f53924</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-83d71b7a7d434d23ba98f0c6c739e1ca</con:value></con:property><con:property><con:name>existingCustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>existingMossoId</con:name><con:value>999112358</con:value></con:property><con:property><con:name>existingNastId</con:name><con:value>nastid-qauser</con:value></con:property><con:property><con:name>invalidPassword</con:name><con:value>asdf</con:value></con:property><con:property><con:name>newUserEmail1</con:name><con:value>soapUiTestUser-1857665@example.com</con:value></con:property><con:property><con:name>newUserEmail2</con:name><con:value>soapUiTestUser-4795592@example.com</con:value></con:property><con:property><con:name>newUserEmail3</con:name><con:value>soapUiTestUser-176024@example.com</con:value></con:property><con:property><con:name>newUsername1</con:name><con:value>soapUiTestUser-1857665</con:value></con:property><con:property><con:name>newUsername2</con:name><con:value>soapUiTestUser-4795592</con:value></con:property><con:property><con:name>newUsername3</con:name><con:value>soapUiTestUser-176024</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>QA-b45a3c9c055a4cc2acef47e8f4594d7f</con:value></con:property><con:property><con:name>user_token</con:name><con:value>QA-00ec474b28a846fb90cdf1260577136e</con:value></con:property><con:property><con:name>validPassword</con:name><con:value>P@ssw130601938rd</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - tokens"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getToken" searchProperties="true" id="11da00c3-fcf6-44c3-b264-bbf98c740ddb"><con:settings/><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - billingApp"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad client credentials"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad client credentials" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="bad_password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad client credentials"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad user credentials"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad user credentials" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="bad_password" username="mkovacs" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad user credentials"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="bad_client_id_asdf1234" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user not found"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="password" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad request"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="" client_secret="" grant_type="PASSWORD" password="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:refresh_token[1]/@id</con:sourcePath><con:targetType>refresh_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - refreshToken"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - refreshToken" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="REFRESH_TOKEN" refresh_token="${#TestSuite#refresh_token}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - refreshToken"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validateToken" searchProperties="true" id="6bf84be1-fc90-4426-950b-9f59c0226932"><con:settings/><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="password" username="mkovacs" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#billingApp_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - other customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - other customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#client_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#admin_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="bad_token_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - unauthorized token"><con:settings/><con:config service="CustomerIDM API-old" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#billingApp_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="revokeToken" searchProperties="true" id="b5da4279-d839-46b8-8d15-f6dacae75445"><con:settings/><con:testStep type="restrequest" name="DELETE revokeToken - rackspace client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - customer client"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - admin"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#admin_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - user"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - customerIdm"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - invalid token"><con:settings/><con:config service="CustomerIDM API-old" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="bad_token_asdf_1243"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>QA-aa40ddf4b3af4280b5f2a4c2fb2dfe9d</con:value></con:property><con:property><con:name>billingApp_clientId</con:name><con:value>GHIJKL</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>QA-41c0a5eff180482da6d99f200539a5f5</con:value></con:property><con:property><con:name>client_token</con:name><con:value>QA-f65d01e7673b4769a088c21a7b410561</con:value></con:property><con:property><con:name>customerIdm_clientId</con:name><con:value>IDM</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>QA-0cd18fbcc87b4034a7ddaebb342318a0</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>4b78297c2633449ba83de1f9429dda58</con:value></con:property><con:property><con:name>user_token</con:name><con:value>QA-a9767c2f97484387b5654992b817470c</con:value></con:property><con:property><con:name>admin_token2</con:name></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>env-apiUrl</con:name><con:value>http://10.127.7.164:8080</con:value></con:property><con:property><con:name>env-apiUrl2</con:name><con:value>http://10.127.7.166:8080</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>