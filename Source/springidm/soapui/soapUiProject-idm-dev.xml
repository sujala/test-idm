<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="idm-api-dev-1.13.2011" resourceRoot="" soapui-version="3.6.1" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value="172.17.16.83:8080"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value="${#Project#env-apiUrl}"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="idm-api-dev" type="rest" basePath="" definitionUrl="file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl"><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idm-api_1_1.wadl</con:url><con:content><![CDATA[<application xsi:schemaLocation="xsd/idmapi.xsd" xmlns="http://wadl.dev.java.net/2009/02" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <grammars>
    <include href="idmapi.xsd"/>
  </grammars>
  <resources base="http://10.127.7.164:8080">
    <resource id="version" path="v1.0">
      <method href="#getVersionInfo"/>
      <resource path="users" id="users">
        <method href="#addFirstUser"/>
        <resource path="{username}" id="user">
          <param name="username" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByUsername"/>
        </resource>
      </resource>
      <resource path="nast" id="nastUsers">
        <resource path="{nastId}" id="nastId">
          <param name="nastId" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByNastId"/>
        </resource>
      </resource>
      <resource path="mosso" id="mossoUsers">
        <resource path="{mossoId}" id="mossoId">
          <param name="mossoId" type="xsd:string" required="true" style="template"/>
          <method href="#getUserByMossoId"/>
        </resource>
      </resource>
      <resource path="customers" id="customers">
        <method href="#addCustomer"/>
        <resource path="{customerId}" id="customer">
          <param name="customerId" type="xsd:string" required="true" style="template"/>
          <method href="#getCustomer"/>
          <method href="#deleteCustomer"/>
          <resource path="actions" id="customerActions">
            <resource path="lock" id="lock">
              <method href="#setCustomerLockStatus"/>
            </resource>
          </resource>
          <resource path="clients" id="clients">
            <method href="#getClients"/>
            <method href="#addClient"/>
            <resource path="{clientId}" id="client">
              <param name="clientId" type="xsd:string" required="true" style="template"/>
              <method href="#getClient"/>
              <method href="#deleteClient"/>
              <resource path="permissions" id="clientPermissions">
                <method href="#getClientPermissions"/>
                <resource path="granted" id="grantedPermissions">
                  <method href="#getClientGrantedPermissions"/>
                </resource>
                <resource path="defined" id="definedPermissions">
                  <method href="#getClientDefinedPermissions"/>
                  <method href="#addClientPermission"/>
                  <resource path="{permissionId}" id="permission">
                    <method href="#getClientPermission"/>
                    <method href="#deleteClientPermission"/>
                    <method href="#updateClientPermission"/>
                  </resource>
                </resource>
              </resource>
              <resource path="softdelete" id="clientSoftDelete">
                <method href="#setClientSoftDelete"/>
              </resource>
            </resource>
          </resource>
          <resource path="users" id="customerUsers">
            <method href="#getUsers"/>
            <method href="#addUser"/>
            <resource path="{username}" id="customerUser">
              <param name="username" type="xsd:string" required="true" style="template"/>
              <method href="#getUser"/>
              <method href="#deleteUser"/>
              <method href="#updateUser"/>
              <resource path="key" id="userApiKey">
                <method href="#resetApiKey"/>
                <method href="#getUserApiKey"/>
              </resource>
              <resource path="lock" id="userLock">
                <method href="#setUserLock"/>
              </resource>
              <resource path="password" id="userPassword">
                <method href="#getUserPassword"/>
                <method href="#setUserPassword"/>
                <method href="#resetUserPassword"/>
                <resource path="recoveryemail" id="recoveryEmail">
                  <method href="#sendRecoveryEmail"/>
                </resource>
                <resource path="recoverytoken" id="recoveryToken">
                  <method href="#getRecoveryToken"/>
                </resource>
              </resource>
              <resource path="roles" id="userRoles">
                <method href="#getUserRoles"/>
                <resource path="{roleName}" id="userRole">
                  <param name="roleName" type="xsd:string" required="true" style="template"/>
                  <method href="#setUserRole"/>
                  <method href="#deleteUserRole"/>
                </resource>
              </resource>
              <resource path="secret" id="userSecret">
                <method href="#setUserSecret"/>
              </resource>
              <resource path="softdelete" id="userSoftDelete">
                <method href="#setUserSoftDelete"/>
              </resource>
              <resource path="status" id="userStatus">
                <method href="#setUserStatus"/>
              </resource>
            </resource>
          </resource>
        </resource>
      </resource>
      <resource path="passwordrules" id="passwordRules">
        <method href="#getPasswordRules"/>
        <resource path="validation/{password}" id="passwordValidation">
          <param name="password" type="xsd:string" required="true" style="template"/>
          <method href="#validatePassword"/>
        </resource>
      </resource>
      <resource path="token" id="token">
        <method href="#getToken"/>
        <resource path="{tokenId}" id="tokenId">
          <param name="tokenId" type="xsd:string" required="true" style="template"/>
          <method href="#validateToken"/>
          <method href="#revokeToken"/>
          <resource path="permissions" id="permissions">
            <method href="#getPermissions"/>
          </resource>
        </resource>
      </resource>
    </resource>
  </resources>
  <!--General Methods-->
  <method name="GET" id="getVersionInfo">
    <response status="200">
      <representation mediaType="application/xml" element="idm:version"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Nast Methods-->
  <method name="GET" id="getUserByNastId">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Mosso Methods-->
  <method name="GET" id="getUserByMossoId">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Customer Methods-->
  <method name="POST" id="addCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:customer">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:customerIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteCustomer">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Client Methods-->
  <method name="GET" id="getClients">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:clients"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:client">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:clientnameConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteClient">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setClientSoftDelete">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:client"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientGrantedPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientDefinedPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permission"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:resourceIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="updateClientPermission">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:resource"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Customer Methods-->
  <method name="PUT" id="setCustomerLockStatus">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml" element="idm:customer"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--User Methods-->
  <method name="POST" id="addFirstUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:user">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:usernameConflict"/>
      <representation mediaType="application/xml" element="idm:customerIdConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserByUsername">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUsers">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="offset" style="query" required="false" type="xsd:integer"/>
      <param name="limit" style="query" required="false" type="xsd:integer"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:users"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="addUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="201">
      <representation mediaType="application/xml" element="idm:user">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
      <representation mediaType="application/json">
        <param name="Location" type="xsd:anyURI" style="header"/>
      </representation>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="409">
      <representation mediaType="application/xml" element="idm:usernameConflict"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserSoftDelete">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="updateUser">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 409 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="resetApiKey">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userApiKey"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserApiKey">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userApiKey"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userPassword"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="recovery" type="xsd:boolean" required="false" style="query"/>
      <representation mediaType="application/xml" element="idm:userCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="resetUserPassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userPassword"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="sendRecoveryEmail">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:passwordRecovery"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="POST" id="getRecoveryToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserRoles">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:roles"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserRole">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="deleteUserRole">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getUserSecret">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserSecret">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:userSecret"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserStatus">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="PUT" id="setUserLock">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:user"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Password Rules methods-->
  <method name="GET" id="getPasswordRules">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:passwordRules"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Validation methods-->
  <method name="GET" id="validatePassword">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:passwordValidation"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <!--Token methods-->
  <method name="POST" id="getToken">
    <request>
      <representation mediaType="application/xml" element="idm:authCredentials"/>
      <representation mediaType="application/json"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="validateToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
      <param name="belongsTo" style="query" required="false" type="xsd:string"/>
      <param name="clientId" style="query" required="false" type="xsd:string"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:auth"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
      <representation mediaType="application/xml" element="idm:userDisabled"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="DELETE" id="revokeToken">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="204"/>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
  <method name="GET" id="getPermissions">
    <request>
      <param name="Authorization" style="header" required="true"/>
    </request>
    <response status="200">
      <representation mediaType="application/xml" element="idm:permissions"/>
      <representation mediaType="application/json"/>
    </response>
    <response status="400">
      <representation mediaType="application/xml" element="idm:badRequest"/>
    </response>
    <response status="401">
      <representation mediaType="application/xml" element="idm:unauthorized"/>
    </response>
    <response status="403">
      <representation mediaType="application/xml" element="idm:forbidden"/>
    </response>
    <response status="404">
      <representation mediaType="application/xml" element="idm:itemNotFound"/>
    </response>
    <response status="500">
      <representation mediaType="application/xml" element="idm:idmFault"/>
    </response>
    <response status="503">
      <representation mediaType="application/xml" element="idm:serviceUnavailable"/>
    </response>
    <response status="400 401 403 404 500 503">
      <representation mediaType="application/json"/>
    </response>
  </method>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/idmapi.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Idm API Schema Types</xsdxt:title>
      <xsdxt:link rev="index" href="client.xsd"/>
      <xsdxt:link rev="index" href="customer.xsd"/>
      <xsdxt:link rev="index" href="fault.xsd"/>
      <xsdxt:link rev="index" href="link.xsd"/>
      <xsdxt:link rev="index" href="password.xsd"/>
      <xsdxt:link rev="index" href="token.xsd"/>
      <xsdxt:link rev="index" href="user.xsd"/>
      <xsdxt:link rev="index" href="version.xsd"/>
      <xsdxt:link rev="index" href="role.xsd"/>
      <xsdxt:link rev="index" href="permission.xsd"/>
      <xsdxt:link rev="index" href="password_recovery.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This is the main index XML Schema document for the
				Rackspace
				Identity Management API.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="link.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to atom links.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="role.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to IdM roles.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="version.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to API version details.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>User entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Client entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="customer.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Customer entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="token.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Defines credentials used to obtain an OAuth token.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Password entities.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="fault.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>All fault types.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="password_recovery.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>End user password recovery request..</p>
      </xsd:documentation>
    </annotation>
  </include>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/link.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Links</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to atom links.</p>
    </xsd:documentation>
  </annotation>
  <complexType name="Link">
    <attribute name="rel" type="xsd:string" use="required"/>
    <attribute name="href" type="xsd:string" use="required"/>
  </complexType>
  <element name="link" type="idm:Link"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/permission.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to permissions.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="permission" type="idm:Permission">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A permission.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permission.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permission.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="permissions" type="idm:PermissionSet">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of permissions.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/permissions.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/permissions.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Permission">
    <simpleContent>
      <extension base="xsd:string">
        <attribute name="permissionId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>A id of a permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="customerId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The customerId that owns the clientId.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="clientId" type="xsd:string" use="required">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The clientId that owns the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
        <attribute name="type" type="xsd:string" use="optional">
          <annotation>
            <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
              <p>The mime type of the permission.</p>
            </xsd:documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>
  <complexType name="PermissionList">
    <sequence>
      <element name="permission" type="idm:Permission" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PermissionSet">
    <sequence>
      <element name="granted" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
      <element name="defined" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/role.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to roles.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="role" type="idm:Role">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A role.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/role.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/role.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="roles" type="idm:RoleList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of roles.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/roles.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/roles.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Role">
    <sequence>
      <element name="permissions" type="idm:PermissionList">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The list of permissions associated with the role.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="name" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the role.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="type" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The role type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="RoleList">
    <sequence>
      <element name="role" type="idm:Role" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/version.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>API Version Details</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines a version element which provides
				meta information about the current version of the API.</p>
    </xsd:documentation>
  </annotation>
  <element name="version" type="idm:Version">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>This element provides detailed meta information regarding the
					status of the API version. Included is a pointer to both a
					human readable and a machine processable description of the
					API service. The machine processable description is written
					in the Web Application Description Language (WADL). If a
					discrepancy exists between the two specifications, the WADL is
					authoritative as it contains the most accurate and up-to-date
					description of the API service.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/version.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/version.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Version">
    <attribute type="xsd:string" name="id" use="required" fixed="v1.1">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            A unique ID which identifies the API version. Currently
						this is fixed as
            <strong>v1.0</strong>
            . The first element
						of the path to the API endpoints always contains the
						target version ID.
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="idm:VersionStatus" name="status" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>
            The status of the API version. A stable version will
						always have the value
            <strong>CURRENT</strong>
            . See
            <a href="#type_VersionStatus" title="VersionStatus">VersionStatus</a>
            .
          </p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="docURL" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a human readable API specification in PDF
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute type="xsd:anyURI" name="wadl" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A URL to a machine readable API specification in WADL
						format. This URL will always point to the latest version
						of the specification applicable to the requested
						implementation.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="VersionStatus">
    <restriction base="xsd:string">
      <enumeration value="BETA">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of BETA indicates that this version is a
							candidate for the next major release and may feature
							functionality not available in the current version.
							Developers are encouraged to test and begin the migration
							processes to a BETA version. Note that a BETA version is
							undergoing testing, it has not been officially released,
							and my not be stable.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="CURRENT">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The API version is stable and has been tested. Developers
							are encouraged to develop against this API version. The
							current released version of the API will always be marked
							as CURRENT.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="DEPRECATED">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A status of DEPRECATED indicates that a newer version of
							the API is available. Application developers are
							discouraged from using this version and should instead
							develop against the latest current version of the API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="VersionList">
    <sequence>
      <element name="version" type="idm:Version" minOccurs="1" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <element name="versions" type="idm:VersionList"/>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/user.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">
  <include schemaLocation="role.xsd"/>
  <include schemaLocation="link.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Users</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a user.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="userCredentials" type="idm:UserCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userApiKey" type="idm:UserApiKey">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's api key.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userPassword" type="idm:UserPassword">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's password.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_api_key.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_api_key.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="user" type="idm:User">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="users" type="idm:UserList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace users.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/users.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/users.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userSecret" type="idm:UserSecret">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace user's secret question and answer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_secret.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_secret.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="UserCredentials">
    <sequence>
      <element name="newPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's new password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="currentPassword" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's current password.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="UserSecret">
    <attribute name="secretQuestion" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="secretAnswer" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The answer to the user's secret question.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="User">
    <sequence>
      <element name="secret" type="idm:UserSecret" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user's secret contains a question and
							answer that can be
							used to confirm the
							user's identity.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="password" type="idm:UserPassword" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's password.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="apiKey" type="idm:UserApiKey" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A user's api key.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="roles" type="idm:RoleList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of roles the user belongs to.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The unique username of the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customerId of the customer that the user is
						associated with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="customerInum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The customer inum of the customer that the user
						is associated
						with.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="email" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's email address.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="personId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique rackspace personId for the user.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="firstName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's first name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="middleName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's middle name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="lastName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's last name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="displayName" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's display name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="prefLanguage" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's preferred language.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's unique i-name.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="region" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The airport code of the user's region.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:UserStatus" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's status.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates if the user has been
						soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="country" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's country.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="timeZone" type="xsd:string" use="optional" default="America/Chicago">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's time zone.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserList">
    <sequence>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="unbounded"/>
      <element name="link" type="idm:Link" minOccurs="0" maxOccurs="3"/>
    </sequence>
    <attribute name="totalRecords" type="xsd:int" use="optional"/>
    <attribute name="offset" type="xsd:int" use="optional"/>
    <attribute name="limit" type="xsd:int" use="optional"/>
  </complexType>
  <complexType name="UserApiKey">
    <attribute name="apiKey" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's api key.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserPassword">
    <attribute name="password" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="UserStatus">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The UserStatus indicates whether the user is active
					or inactive</p>
      </xsd:documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Active and can authenticate with
							the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user is Inactive and cannot authenticate
							with the Idm API.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/client.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <include schemaLocation="permission.xsd"/>
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Clients</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a client.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="client" type="idm:Client">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clients" type="idm:ClientList">
    <annotation>
      <xsd:documentation>
        <p>A list of rackspace clients.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clients.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clients.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientCredentials" type="idm:ClientCredentials">
    <annotation>
      <xsd:documentation>
        <p>A rackspace client's credentials.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/client_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/client_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Client">
    <sequence>
      <element name="credentials" type="idm:ClientCredentials" minOccurs="0" maxOccurs="1">
        <annotation>
          <documentation>
            <p>The client's credentials.</p>
          </documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A list of permissions the client has.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="clientId" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique Id.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="customerId" type="xsd:string" use="required">
      <annotation>
        <documentation>
          <p>The unique Id for the customer the client belongs to.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <documentation>
          <p>The client name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-number.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="string" use="optional">
      <annotation>
        <documentation>
          <p>The client's unique i-name.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="idm:ClientStatus" use="optional">
      <annotation>
        <documentation>
          <p>The user's status.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client is
						locked.</p>
        </documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <documentation>
          <p>A boolean which indicates if the client has been
						soft deleted.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="ClientList">
    <sequence>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="ClientCredentials">
    <attribute name="clientSecret" type="string" use="required">
      <annotation>
        <documentation>
          <p>A client's secret.</p>
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="ClientStatus">
    <annotation>
      <documentation>
        <p>The ClientStatus indicates whether the user is
					active or inactive</p>
      </documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACTIVE">
        <annotation>
          <documentation>
            <p>The client is Active and can authenticate
							with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
      <enumeration value="INACTIVE">
        <annotation>
          <documentation>
            <p>The client is Inactive and cannot
							authenticate with the Idm API.</p>
          </documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/customer.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Customers</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a customer.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="customer" type="idm:Customer">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A rackspace customer.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customers" type="idm:CustomerList">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of rackspace customers.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customers.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customers.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Customer">
    <attribute name="customerId" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique customer Id. This is also known as the customer number.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="inum" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique inum associated with the customer.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="iname" type="xsd:string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique iname associated with the customer inum.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="locked" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer is locked.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="softDeleted" type="boolean" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean indicating if the customer has been soft deleted.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="CustomerList">
    <sequence>
      <element name="customer" type="idm:Customer" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/token.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Tokens</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to tokens.</p>
    </xsd:documentation>
  </annotation>
  <include schemaLocation="user.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related users.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="client.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to clients.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <include schemaLocation="permission.xsd">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Entities related to permissions.</p>
      </xsd:documentation>
    </annotation>
  </include>
  <!--Elements-->
  <element name="auth" type="idm:AuthData">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data returned for a successful authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="authCredentials" type="idm:AuthCredentials">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The data required for authentication.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/auth_credentials.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/auth_credentials.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="token" type="idm:Token">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication Token.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/token.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/token.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="Token">
    <attribute name="id" type="xsd:string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The token id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="expires_in" type="xsd:int" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A number of seconds until the token expires.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="AuthData">
    <sequence>
      <element name="access_token" type="idm:Token" minOccurs="1" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>An access token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="refresh_token" type="idm:Token" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A refresh token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="user" type="idm:User" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The user associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="client" type="idm:Client" minOccurs="0" maxOccurs="1">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A client associated with the token.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="permissions" type="idm:PermissionList" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <complexType name="AuthCredentials">
    <attribute name="grant_type" type="idm:AuthGrantType" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The OAuth grant type.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_id" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="client_secret" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The client secret.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="username" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's username.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="password" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The user's password.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="refresh_token" type="string" use="optional">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The refresh token Id.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <!--Simple Types-->
  <simpleType name="AuthGrantType">
    <restriction base="string">
      <enumeration value="API_CREDENTIALS">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type api_credentials.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="ASSERTION">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type assertion.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="AUTHORIZATION_CODE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type authorization_code.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="NONE">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type none.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="PASSWORD">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type password.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
      <enumeration value="REFRESH_TOKEN">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The OAuth grant type refresh_token.</p>
          </xsd:documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/password.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Passwords</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>This schema file defines entities related to a password.</p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="passwordRule" type="idm:PasswordRule">
    <annotation>
      <xsd:documentation>
        <p>A password rule.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRules" type="idm:PasswordRuleList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rules.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rules.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rules.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidation" type="idm:PasswordValidation">
    <annotation>
      <xsd:documentation>
        <p>A password validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_validation.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_validation.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResult" type="idm:PasswordRuleResult">
    <annotation>
      <xsd:documentation>
        <p>A password rule result.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_result.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_result.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordRuleResults" type="idm:PasswordRuleResultList">
    <annotation>
      <xsd:documentation>
        <p>A list of password rule results.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_rule_results.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_rule_results.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="PasswordRule">
    <attribute name="id" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="message" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleList">
    <sequence>
      <element name="passwordRule" type="idm:PasswordRule" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordRuleResult">
    <attribute name="passed" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleId" type="int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A unique Id for the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleName" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the password rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
    <attribute name="ruleMessage" type="string" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A human readable description of the rule.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="PasswordRuleResultList">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResult" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <complexType name="PasswordValidation">
    <sequence>
      <element name="passwordRuleResults" type="idm:PasswordRuleResultList"/>
    </sequence>
    <attribute name="validPassword" type="boolean" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>A boolean which indicates whether the password passed all rules.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/fault.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Faults</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>
        This schema file defines faults that may be raised by the IdM
				API.
				These faults are derived from the
        <a href="#type_IdmFault" title="See definition of              IdmFault">IdmFault</a>
      </p>
      <p>
        Faults are associated with a default HTTP status code that
				corresponds to the particular fault type. For example an
        <a href="#element_itemNotFound" title="see definition of              itemNotFound">&lt;itemNotFound></a>
        element is associated
				with the HTTP status code 404. Some elements,
				the
        <a href="#element_authFault" title="see definition of              idmFault">&lt;idmFault></a>
        element for example, may be
				associated with multiple status codes. It
				is also possible
				for multiple fault elements to be associated with
				the same
				default code. The examples below showcase the default status
				codes for each element type. Note that these default codes are
				not
				part of the formal schema. In practice, however, an
				element type will
				likely be associated with its corresponding
				default status code.
      </p>
    </xsd:documentation>
  </annotation>
  <!--Elements-->
  <element name="idmFault" type="idm:IdmFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A generic Idm Fault.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/idm_fault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/idm_fault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="userDisabled" type="idm:UserDisabledFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The user has been disabled and is not permitted to
					authenticate.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/user_disabled.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/user_disabled.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="missingUsername" type="idm:UserNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>An authentication request requires a username.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/missing_username.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/missing_username.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="badRequest" type="idm:BadRequestFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The request is malformed.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/bad_request.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/bad_request.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="unauthorized" type="idm:UnauthorizedFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authorization failed. Bad API Key? Username?</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unauthorized.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unauthorized.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="itemNotFound" type="idm:ItemNotFoundFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The item or resource could not be found.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/item_not_found.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/item_not_found.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="forbidden" type="idm:ForbiddenFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>Authentication succeeded but you lack sufficient privileges.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/forbidden.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/forbidden.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="usernameConflict" type="idm:UsernameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that username already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/username_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/username_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="clientnameConflict" type="idm:ClientnameConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A client with that clientname already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/clientname_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/clientname_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="resourceIdConflict" type="idm:ResourceIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A resource with that resourceId already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/resourceId_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/resourceId_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="emailConflict" type="idm:EmailConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A user with that email address already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/email_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/email_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="customerIdConflict" type="idm:CustomerIdConflictFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>A customer with that customerId already exists.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/customer_conflict.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/customer_conflict.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="serviceUnavailable" type="idm:ServiceUnavailableFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The API is currently unavailable.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/unavailable.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/unavailable.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <element name="passwordValidationFault" type="idm:PasswordValidationFault">
    <annotation>
      <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
        <p>The password failed validation.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/passwordvalidationfault.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/passwordvalidationfault.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <!--Complex Types-->
  <complexType name="IdmFault">
    <sequence>
      <element name="message" type="xsd:string">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>A human readable message that is appropriate for display
							to the
							end user.</p>
          </xsd:documentation>
        </annotation>
      </element>
      <element name="details" type="xsd:string" minOccurs="0">
        <annotation>
          <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
            <p>The optional &lt;details> element may contain useful
							information for tracking down errors (e.g a stack
							trace). This
							information may or may not be appropriate
							for display to an end
							user.</p>
          </xsd:documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="code" type="xsd:int" use="required">
      <annotation>
        <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
          <p>The HTTP status code associated with the current fault.</p>
        </xsd:documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="UserDisabledFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="UserNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="BadRequestFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="UnauthorizedFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ItemNotFoundFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ForbiddenFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="UsernameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="EmailConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="CustomerIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ResourceIdConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ClientnameConflictFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="ServiceUnavailableFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
  <complexType name="PasswordValidationFault">
    <complexContent>
      <extension base="idm:IdmFault"/>
    </complexContent>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/huey.ly/Desktop/idm%20stuff/qa%20stuff/wadl%20stuff/password_recovery.xsd</con:url><con:content><![CDATA[<?xml-stylesheet type="text/xsl" href="../xslt/schema.xslt"?>
<!--(C) 2010 Rackspace Hosting, All Rights Reserved-->
<schema elementFormDefault="qualified" attributeFormDefault="unqualified" jaxb:version="2.1" jaxb:extensionBindingPrefixes="xjc" targetNamespace="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:idm="http://docs.rackspacecloud.com/idm/api/v1.0" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc">
  <annotation>
    <xsd:appinfo xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <xsdxt:title>Password Recovery</xsdxt:title>
      <xsdxt:link rel="index" href="idmapi.xsd"/>
    </xsd:appinfo>
    <xsd:documentation xml:lang="EN" xmlns="http://www.w3.org/1999/xhtml">
      <p>Parameters for password recovery email. Allows for
				client-specified named parameters that will be substituted into
				placeholders in email template.</p>
    </xsd:documentation>
  </annotation>
  <complexType name="emailConfiguration">
    <sequence>
      <element name="customParams" type="idm:customParamsList" minOccurs="0" maxOccurs="1"/>
    </sequence>
    <attribute name="callbackUrl" type="anyURI" use="required"/>
    <attribute name="templateUrl" type="anyURI" use="required"/>
    <attribute name="from" type="string" use="required"/>
    <attribute name="replyTo" type="string"/>
    <attribute name="subject" type="string" use="required"/>
  </complexType>
  <complexType name="customParam">
    <annotation>
      <documentation>Client-specified named parameter. The parameter names
				are arbitrary and irrelevant to the IDM system itself,
				other than the
				matching placeholders in email template
				will be substituted with the
				value of the incoming named
				parameters.</documentation>
    </annotation>
    <attribute name="name" type="string"/>
    <attribute name="value" type="string"/>
  </complexType>
  <element name="passwordRecovery" type="idm:emailConfiguration">
    <annotation>
      <xsd:documentation>
        <p>A password recovery object.</p>
      </xsd:documentation>
      <xsd:appinfo>
        <xsdxt:samples>
          <xsdxt:sample>
            <xsdxt:code type="application/xml" href="../samples/password_recovery.xml"/>
          </xsdxt:sample>
          <xsdxt:sample>
            <xsdxt:code type="application/json" href="../samples/password_recovery.json"/>
          </xsdxt:sample>
        </xsdxt:samples>
      </xsd:appinfo>
    </annotation>
  </element>
  <complexType name="customParamsList">
    <sequence>
      <element name="params" type="idm:customParam" minOccurs="0" maxOccurs="25"/>
    </sequence>
  </complexType>
</schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:endpoint>${#Project#env-apiUrl}</con:endpoint></con:endpoints><con:resource name="v1.0" path="v1.0"><con:settings/><con:parameters/><con:resource name="users" path="users"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserByUsername" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addFirstUser" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customerIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="nast" path="nast"><con:settings/><con:parameters/><con:resource name="{nastId}" path="{nastId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>nastId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserByNastId" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="mosso" path="mosso"><con:settings/><con:parameters/><con:resource name="{mossoId}" path="{mossoId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>mossoId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - getUserByMossoId" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="customers" path="customers"><con:settings/><con:parameters/><con:resource name="{customerId}" path="{customerId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>customerId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="actions" path="actions"><con:settings/><con:parameters/><con:resource name="lock" path="lock"><con:settings/><con:parameters/><con:method name="PUT - setCustomerLockStatus" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="clients" path="clients"><con:settings/><con:parameters/><con:resource name="{clientId}" path="{clientId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="permissions" path="permissions"><con:settings/><con:parameters/><con:resource name="granted" path="granted"><con:settings/><con:parameters/><con:method name="GET - getClientGrantedPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="defined" path="defined"><con:settings/><con:parameters/><con:resource name="{permissionId}" path="{permissionId}"><con:settings/><con:parameters/><con:method name="GET - getClientPermission" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permission</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteClientPermission" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateClientPermission" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientDefinedPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClientPermission" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resource</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:resourceIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClientPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="softdelete" path="softdelete"><con:settings/><con:parameters/><con:method name="PUT - setClientSoftDelete" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClient" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteClient" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getClients" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clients</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addClient" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:client</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:clientnameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="users"><con:settings/><con:parameters/><con:resource name="{username}" path="{username}"><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="key" path="key"><con:settings/><con:parameters/><con:method name="POST - resetApiKey" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="GET - getUserApiKey" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userApiKey</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="lock" path="lock"><con:settings/><con:parameters/><con:method name="PUT - setUserLock" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="password" path="password"><con:settings/><con:parameters/><con:resource name="recoveryemail" path="recoveryemail"><con:settings/><con:parameters/><con:method name="POST - sendRecoveryEmail" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRecovery</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="recoverytoken" path="recoverytoken"><con:settings/><con:parameters/><con:method name="POST - getRecoveryToken" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserPassword" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - setUserPassword" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>recovery</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:boolean</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - resetUserPassword" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userPassword</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="roles" path="roles"><con:settings/><con:parameters/><con:resource name="{roleName}" path="{roleName}"><con:settings/><con:parameters><con:parameter required="true"><con:name>roleName</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT - setUserRole" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUserRole" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUserRoles" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:roles</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="secret" path="secret"><con:settings/><con:parameters/><con:method name="PUT - setUserSecret" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userSecret</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="softdelete" path="softdelete"><con:settings/><con:parameters/><con:method name="PUT - setUserSoftDelete" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="status" path="status"><con:settings/><con:parameters/><con:method name="PUT - setUserStatus" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUser" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteUser" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="PUT - updateUser" method="PUT"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getUsers" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>offset</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>limit</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:users</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="POST - addUser" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:user</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:usernameConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getCustomer" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - deleteCustomer" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - addCustomer" method="POST"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customer</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>409</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:customerIdConflict</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 409 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="passwordrules" path="passwordrules"><con:settings/><con:parameters/><con:resource name="validation/{password}" path="validation/{password}"><con:settings/><con:parameters><con:parameter required="true"><con:name>password</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET - validatePassword" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordValidation</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getPasswordRules" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:passwordRules</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="token" path="token"><con:settings/><con:parameters/><con:resource name="{tokenId}" path="{tokenId}"><con:settings/><con:parameters><con:parameter required="true"><con:name>tokenId</con:name><con:value xsi:nil="true"/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:resource name="permissions" path="permissions"><con:settings/><con:parameters/><con:method name="GET - getPermissions" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:permissions</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - validateToken" method="GET"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>belongsTo</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter><con:parameter><con:name>clientId</con:name><con:value xsi:nil="true"/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:userDisabled</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method><con:method name="DELETE - revokeToken" method="DELETE"><con:settings/><con:parameters><con:parameter required="true"><con:name>Authorization</con:name><con:value xsi:nil="true"/><con:style>HEADER</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:itemNotFound</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="POST - getToken" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:authCredentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:auth</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:badRequest</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:unauthorized</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:forbidden</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>400 401 403 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:method name="GET - getVersionInfo" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:version</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:idmFault</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>503</con:status><con:params/><con:element xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">v1:serviceUnavailable</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1"><con:settings/><con:endpoint>http://10.127.7.164:8080</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="TestSuite - General"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getVersion" searchProperties="true" id="db97d174-b41c-425c-aff4-05ce23d6e142"><con:settings/><con:testStep type="restrequest" name="GET getVersionInfo"><con:settings/><con:config service="idm-api-dev" methodName="GET - getVersionInfo" resourcePath="/v1.0" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getVersionInfo" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="XPath Match" name="Check for existance of [version]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:version)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - Passwords"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="098d736c-583a-4a92-b983-e7a3da6caa69"><con:settings/><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="testuser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getPasswordRules" searchProperties="true" id="8b2a1967-872a-4701-977c-44f69960a05f"><con:settings/><con:testStep type="restrequest" name="GET passwordRules - customerIdm"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - customerIdm" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - rackspace client"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - customer client"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - admin"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - user"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existence of [passwordRules]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordRules)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET passwordRules - invalid token"><con:settings/><con:config service="idm-api-dev" resourcePath="/v1.0/passwordrules" methodName="GET - getPasswordRules" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET passwordRules - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET passwordRules - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf_1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validatePassword" searchProperties="true" id="4214779f-6e07-4b76-9bdc-2862b37182ed"><con:settings/><con:testStep type="restrequest" name="GET validatePassword - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - invalid password"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - invalid password" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - invalid password"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidation]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidation)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="password" value="${#TestSuite#invalid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validatePassword - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - validatePassword" resourcePath="/v1.0/passwordrules/validation/{password}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validatePassword - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validatePassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="password" value="${#TestSuite#valid_password}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>DFW-8bd17210ba764beb95409c3a81c54a2c</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>DFW-d79632b0b0ff44b9809377a665ebfae8</con:value></con:property><con:property><con:name>client_token</con:name><con:value>DFW-ab80399065884d9fa52a4c3ed75d5157</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>DFW-bf868d7869b34fa7a2af1b471b690ce1</con:value></con:property><con:property><con:name>invalid_password</con:name><con:value>asdf</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>user_token</con:name><con:value>DFW-2f3febca5d324fb4b32a39d4799118b5</con:value></con:property><con:property><con:name>valid_password</con:name><con:value>P@ssw0rd!</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - customers"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="9ddbae27-b416-4053-9f84-bfbacdc31637"><con:settings/><con:testStep type="datagen" name="dataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername2}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>customerNumber3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername3}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestCustomer-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>addNewCustomerNumber</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum</con:name><con:sourceType>customerNumber</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newCustomerNumber</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername</con:name><con:sourceType>newUsername</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUserEmail</con:name><con:sourceType>newUserEmail</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum2</con:name><con:sourceType>customerNumber2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newCustomerNumber2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername2</con:name><con:sourceType>newUsername2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail2</con:name><con:sourceType>newUserEmail2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newCustomerNum3</con:name><con:sourceType>customerNumber3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newCustomerNumber3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername3</con:name><con:sourceType>newUsername3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" transferChildNodes="false"><con:name>newUserEmail3</con:name><con:sourceType>newUserEmail3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>addNewCustomerNumber</con:name><con:sourceType>addNewCustomerNumber</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>addNewCustomerNumber</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addCustomer" searchProperties="true" id="0d508a01-c758-42fb-8cf1-2ec2792dd61e"><con:settings/><con:testStep type="restrequest" name="POST addCustomer - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#client_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#admin_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#newCustomerNumber2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#user_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - bad request"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - conflicted"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - conflicted" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - conflicted"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customerIdConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customerIdConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addCustomer - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - addCustomer" resourcePath="/v1.0/customers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addCustomer - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#addNewCustomerNumber}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="OAuth bad_token_asdf1234" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getCustomer" searchProperties="true" id="281a8d91-6800-4d68-8f43-c01f38e952eb"><con:settings/><con:testStep type="restrequest" name="GET getCustomer - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customer]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customer)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getCustomer - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getCustomer - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="lockCustomer" searchProperties="true" id="79198f14-b8d6-445f-bdc1-ecf09231bce5"><con:settings/><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - bad request"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#existingCustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="true" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unlockCustomer" searchProperties="true" id="b3eede4b-521c-40b7-b0d7-c5ddd8e7a15c"><con:settings/><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:customer[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setCustomerLockStatus - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setCustomerLockStatus" resourcePath="/v1.0/customers/{customerId}/actions/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setCustomerLockStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:customer customerId="${#TestSuite#QACustomerNumber}" locked="false" softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion - Status"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setCustomerLockStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#QACustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getCustomerRoles" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addFirstUser" searchProperties="true" id="b5c7f69c-e58f-45f8-a8b4-cdac2bd2aa1c"><con:settings/><con:testStep type="restrequest" name="POST addFirstUser - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - conflicted customer"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - conflicted customer" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - conflicted customer"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [customerIdConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:customerIdConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - conflicted username"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - conflicted username" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber2}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - conflicted username"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [usernameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:usernameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - authorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber2}" email="${#TestSuite#newUserEmail2}" firstName="${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber3}" email="${#TestSuite#newUserEmail3}" firstName="${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addFirstUser - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - addFirstUser" resourcePath="/v1.0/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addFirstUser - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#newCustomerNumber}" email="${#TestSuite#newUserEmail}" firstName="${#TestSuite#newUsername}" username="${#TestSuite#newUsername}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer." secretQuestion="secret question?"/>&lt;v1:password password="${#TestSuite#valid_password}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addFirstUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - newUsername1"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername1" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - newUsername2"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - newUsername2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteCustomer" searchProperties="true" id="109bef21-9f4e-4192-beda-626a1b948e27"><con:settings/><con:testStep type="restrequest" name="DELETE deleteCustomer - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - customer client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - admin"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - user"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteCustomer - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#addNewCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asfd1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cleanUp" searchProperties="true" id="5509881b-ec44-4025-8fd6-d3a8e4ffb107"><con:settings/><con:testStep type="restrequest" name="DELETE deleteCustomer"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer2"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteCustomer3"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteCustomer" resourcePath="/v1.0/customers/{customerId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteCustomer3" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#newCustomerNumber3}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>DFW-8bd17210ba764beb95409c3a81c54a2c</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>DFW-d79632b0b0ff44b9809377a665ebfae8</con:value></con:property><con:property><con:name>client_token</con:name><con:value>DFW-ab80399065884d9fa52a4c3ed75d5157</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>DFW-bf868d7869b34fa7a2af1b471b690ce1</con:value></con:property><con:property><con:name>invalid_password</con:name><con:value>asdf</con:value></con:property><con:property><con:name>newCustomerNumber</con:name><con:value>soapUiTestCustomer-3380279</con:value></con:property><con:property><con:name>newCustomerNumber2</con:name><con:value>soapUiTestCustomer-2082483</con:value></con:property><con:property><con:name>newCustomerNumber3</con:name><con:value>soapUiTestCustomer-1577356</con:value></con:property><con:property><con:name>newUserEmail</con:name><con:value>soapUiTestUser-5383120@example.com</con:value></con:property><con:property><con:name>newUserEmail2</con:name><con:value>soapUiTestUser-4674065@example.com</con:value></con:property><con:property><con:name>newUserEmail3</con:name><con:value>soapUiTestUser-6492371@example.com</con:value></con:property><con:property><con:name>newUsername</con:name><con:value>soapUiTestUser-5383120</con:value></con:property><con:property><con:name>newUsername2</con:name><con:value>soapUiTestUser-4674065</con:value></con:property><con:property><con:name>newUsername3</con:name><con:value>soapUiTestUser-6492371</con:value></con:property><con:property><con:name>QACustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>DFW-c8f1db53cde94df5938fb4379fa47e4c</con:value></con:property><con:property><con:name>user_token</con:name><con:value>DFW-919992e9c7ae48299932db40703aa974</con:value></con:property><con:property><con:name>valid_password</con:name><con:value>P@ssw0rd</con:value></con:property><con:property><con:name>addNewCustomerNumber</con:name><con:value>soapUiTestCustomer-5850608</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - clients"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="74434979-6e00-4712-9049-a2212220a173"><con:settings/><con:testStep type="datagen" name="DataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestClient-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>clientName3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newClientName</con:name><con:sourceType>clientName1</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:sourcePath/><con:targetType>newClientName</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newClientName2</con:name><con:sourceType>clientName2</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:targetType>newClientName2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferChildNodes="false" transferToAll="false" useXQuery="false" entitize="false"><con:name>newClientName3</con:name><con:sourceType>clientName3</con:sourceType><con:sourceStep>DataGen</con:sourceStep><con:targetType>newClientName3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClients" searchProperties="true" id="98277d46-9b77-47ea-ad09-96792a170d2a"><con:settings/><con:testStep type="restrequest" name="GET getClients - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clients]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clients)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clients]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clients)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingClientId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - customer not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customer_num_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClients - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClients" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClients - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClients - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addClient" searchProperties="true" id="a54d8818-3cdc-4fb8-b7ea-5aa4ed2860db"><con:settings/><con:testStep type="restrequest" name="POST addClient - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>clientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST addClient - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:client[1]/@clientId</con:sourcePath><con:targetType>newClientId</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - clientId conflict"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - clientId conflict" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - clientId conflict"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [clientnameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:clientnameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - bad request"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="" customerId="${#TestSuite#existingCustomerNumber}" name="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="bad_customer_number_asdf1234" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="bad_customer_number_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId2}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer 2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>clientId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST addClient - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:client[1]/@clientId</con:sourcePath><con:targetType>newClientId2</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId3}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addClient - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - addClient" resourcePath="/v1.0/customers/{customerId}/clients" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addClient - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:client clientId="${#TestSuite#newClientId}" customerId="${#TestSuite#existingCustomerNumber}" name="${#TestSuite#newClientName}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addClient - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClient" searchProperties="true" id="8474fa84-56b3-40a1-9dc8-c255cdacf60c"><con:settings/><con:testStep type="restrequest" name="GET getClient - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [client]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:client)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClient - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClient - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClient - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientPermissions" searchProperties="true" id="f5343a74-d94c-4c6c-829e-8dc43940a20b"><con:settings/><con:testStep type="restrequest" name="GET getClientPermissions - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - client not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermissions - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="IDM"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientGrantedPermissions" searchProperties="true" id="c28a3118-7c2b-4db6-bfd0-8d59dd8e4503"><con:settings/><con:testStep type="restrequest" name="GET getClientGrantedPermissions - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - client not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientGrantedPermissions - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientGrantedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/granted" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientGrantedPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientGrantedPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientDefinedPermissions" searchProperties="true" id="3fd4d4a5-a473-45ee-85fb-d0e2c01cddfa"><con:settings/><con:testStep type="restrequest" name="GET getClientDefinedPermissions - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [permissions]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:permissions)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - client not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientDefinedPermissions - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientDefinedPermissions" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientDefinedPermissions - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientDefinedPermissions - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="clientId" value="${#TestSuite#existingClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addClientPermission" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getClientPermission" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET getClientPermission - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermission" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined/{permissionId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermission - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermission - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="permissionId" value="AddCustomer"/>
  <con:entry key="clientId" value="${#TestSuite#customerIdm_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermission - client not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermission" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined/{permissionId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermission - client not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermission - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="permissionId" value="AddCustomer"/>
  <con:entry key="clientId" value="bad_client_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermission - permission not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermission" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined/{permissionId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermission - permission not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermission - permission not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="permissionId" value="bad_permission_id_asdf1234"/>
  <con:entry key="clientId" value="${#TestSuite#customerIdm_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getClientPermission - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getClientPermission" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}/permissions/defined/{permissionId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getClientPermission - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getClientPermission - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="permissionId" value="AddCustomer"/>
  <con:entry key="clientId" value="${#TestSuite#customerIdm_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateClientPermission" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteClientPermission" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resetClientSecret" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setClientSoftDelete" searchProperties="true" disabled="true"><con:settings/><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cleanup" searchProperties="true" id="fb5c1e1e-712a-4661-a8ee-d3e576a9e9e6"><con:settings/><con:testStep type="restrequest" name="DELETE deleteClient"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClient" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteClient2"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteClient" resourcePath="/v1.0/customers/{customerId}/clients/{clientId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteClient2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="clientId" value="${#TestSuite#newClientId2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>DFW-8bd17210ba764beb95409c3a81c54a2c</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>DFW-d79632b0b0ff44b9809377a665ebfae8</con:value></con:property><con:property><con:name>client_token</con:name><con:value>DFW-ab80399065884d9fa52a4c3ed75d5157</con:value></con:property><con:property><con:name>customerIdm_clientId</con:name><con:value>18e7a7032733486cd32f472d7bd58f709ac0d221</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>DFW-bf868d7869b34fa7a2af1b471b690ce1</con:value></con:property><con:property><con:name>existingClientId</con:name><con:value>QATESTCLIENT</con:value></con:property><con:property><con:name>existingCustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>newClientId</con:name><con:value>ea370c18cde4aea82631f67782a343df1c7ea6b7</con:value></con:property><con:property><con:name>newClientId2</con:name><con:value>c9560578f79162c6748dfc95055913095d49dc39</con:value></con:property><con:property><con:name>newClientId3</con:name><con:value>testClientId3-1038382</con:value></con:property><con:property><con:name>newClientName</con:name><con:value>soapUiTestClient-8220815</con:value></con:property><con:property><con:name>newClientName2</con:name><con:value>soapUiTestClient-4405562</con:value></con:property><con:property><con:name>newClientName3</con:name><con:value>soapUiTestClient-7503151</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>DFW-c8f1db53cde94df5938fb4379fa47e4c</con:value></con:property><con:property><con:name>user_token</con:name><con:value>DFW-919992e9c7ae48299932db40703aa974</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - users"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUp" searchProperties="true" id="83180f4a-c48d-4423-8ce9-d0ec748f4087"><con:settings/><con:testStep type="datagen" name="dataGen"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Number"><con:configuration><start>1111</start><end>9999999</end><step/><pattern>soapUiTestUser-</pattern><random>true</random><persist>false</persist></con:configuration><con:name>newUsername3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername1}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail1</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername2}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail2</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property><con:property type="Template"><con:configuration><template>${dataGen#newUsername3}@example.com</template><entitize>false</entitize></con:configuration><con:name>newUserEmail3</con:name><con:mode>STEP</con:mode><con:shared>false</con:shared></con:property></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - signupService"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - signupService" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="MNOPQR" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false"><con:name>signupService_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - signupService</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>signupService_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername1</con:name><con:sourceType>newUsername1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername2</con:name><con:sourceType>newUsername2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUsername2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUsername3</con:name><con:sourceType>newUsername3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUsername3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail1</con:name><con:sourceType>newUserEmail1</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail1</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>newUserEmail2</con:name><con:sourceType>newUserEmail2</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:targetType>newUserEmail2</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>newUserEmail3</con:name><con:sourceType>newUserEmail3</con:sourceType><con:sourceStep>dataGen</con:sourceStep><con:sourcePath/><con:targetType>newUserEmail3</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUsers" searchProperties="true" id="6e0d12bc-f087-40d2-b7ab-26d8cbb4524f"><con:settings/><con:testStep type="restrequest" name="GET getUsers - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [users]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:users)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUsers - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUsers" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUsers - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUsers - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addUser" searchProperties="true" id="df24db85-6d39-46e0-883d-b47d5c865193"><con:settings/><con:testStep type="restrequest" name="POST addUser - bad request"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - invalid password"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - invalid password" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#invalidPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - invalid password"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [passwordValidationFault]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:passwordValidationFault)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 201 Created")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - username conflict"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - username conflict" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - username conflict"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 409 Conflict")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [usernameConflict]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:usernameConflict)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#signupService_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - different client"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - different client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - different client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail2}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername2}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - different client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" email="${#TestSuite#newUserEmail3}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - customer not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - customer not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail3}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername3}" username="${#TestSuite#newUsername3}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - customer not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="customerId" value="bad_customerId_asdf_1232"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST addUser - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - addUser" resourcePath="/v1.0/customers/{customerId}/users" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST addUser - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" email="${#TestSuite#newUserEmail1}" firstName="SoapUi" middleName="Test" personId="rpn-${#TestSuite#newUsername1}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:secret secretAnswer="secret answer" secretQuestion="Secret question?"/>&lt;v1:password password="${#TestSuite#validPassword}"/>&lt;/v1:user></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST addUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUser" searchProperties="true" id="fb364aa0-5f19-4ef5-bafe-2f114a8aa6e3"><con:settings/><con:testStep type="restrequest" name="GET getUser - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - authorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - authorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - authorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByUsername" searchProperties="true" id="f699e427-8451-4451-b910-0b22dadc3b99"><con:settings/><con:testStep type="restrequest" name="GET getUserByUsername - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get getUserByUsername" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByUsername - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByUsername" resourcePath="/v1.0/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByUsername - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByUsername - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByNastId" searchProperties="true" id="924468f2-d98b-4b5c-8da4-ad54d2f4e7c9"><con:settings/><con:testStep type="restrequest" name="GET getUserByNastId - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="bad_nast_id_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByNastId - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByNastId" resourcePath="/v1.0/nast/{nastId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByNastId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByNastId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="nastId" value="${#TestSuite#existingNastId}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserByMossoId" searchProperties="true" id="f832a66b-37d0-4f2f-9fc9-678756358f14"><con:settings/><con:testStep type="restrequest" name="GET getUserByMossoId - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="mossoId" value="bad_mosso_id_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserByMossoId - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserByMossoId" resourcePath="/v1.0/mosso/{mossoId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserByMossoId - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserByMossoId - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="mossoId" value="${#TestSuite#existingMossoId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="updateUser" searchProperties="true" id="51e20179-8019-470a-a05a-7b31200ae47b"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - customerIdm" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - unauthorized client" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - different customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - different customer client" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - admin" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [user]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:user)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - user" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - user not found"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - user not found" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT updateUser - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - updateUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT updateUser - invalid token" mediaType="application/xml" accept="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="soapUiTest Updated" email="${Properties#email}" firstName="soapUi_updated" inum="${Properties#inum}" lastName="Test" middleName="none" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT updateUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resetUserApiKey" searchProperties="true" id="5a1fa7b4-68fd-47bd-97fb-28f21e640157"><con:settings/><con:testStep type="restrequest" name="POST resetUserApiKey - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - other customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - user not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserApiKey - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserApiKey - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserApiKey - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserApiKey" searchProperties="true" id="90975616-ee66-4060-b918-163ebf70b70d"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>DFW-cc3cc26232ef46a58d11ee0339a31ee7</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${#TestSuite#validPassword}" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user (self)"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user (self)" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userApiKey]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userApiKey)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asfd1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserApiKey - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserApiKey" resourcePath="/v1.0/customers/{customerId}/users/{username}/key" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserApiKey - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserApiKey - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUserSecret" searchProperties="true" id="f2a58e9f-35df-4181-8660-e5dbf17dedb3"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>DFW-3255a6c8b3204129b6b340a15ec7d24e</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - newUsername1"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - newUsername1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${#TestSuite#validPassword}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - newUsername1</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - user (self)"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - user (self)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userSecret]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userSecret)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - bad request"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="" secretQuestion="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSecret - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSecret" resourcePath="/v1.0/customers/{customerId}/users/{username}/secret" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSecret - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userSecret secretAnswer="updated secret answer" secretQuestion="Updated secret question?" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSecret - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="lockUser" searchProperties="true" id="180334a2-c999-4f0e-94db-264fe2537bd6"><con:settings/><con:testStep type="restrequest" name="PUT setUserLock - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user locked="true" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@locked</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - bad request"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user not found"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="bad_username_adsf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_adsf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="true" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="unlockUser" searchProperties="true" id="922e2974-838b-48b4-9d07-334a9618baaa"><con:settings/><con:testStep type="restrequest" name="PUT setUserLock - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@locked]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@locked</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserLock - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserLock" resourcePath="/v1.0/customers/{customerId}/users/{username}/lock" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserLock - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" locked="false" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserLock - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserPassword" searchProperties="true" id="42fd4337-f0d3-46d0-a436-a7c1ea5ff955"><con:settings/><con:testStep type="restrequest" name="GET getUserPassword - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - other customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - other customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserPassword - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserPassword - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUserPassword" searchProperties="true" id="1915ff80-71ac-434a-93d4-2371118ca0ae"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>user_token</con:name><con:value>DFW-3255a6c8b3204129b6b340a15ec7d24e</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - newUsername1"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - newUsername1" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="${#TestSuite#validPassword}" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - newUsername1</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - user (self)"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - user (self)" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - user (self)"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${Properties#user_token}"/>
  <con:entry key="recovery" value="false"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserPassword - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserPassword - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:userCredentials xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0">&lt;v1:newPassword password="${#TestSuite#validPassword}"/>&lt;v1:currentPassword password="${#TestSuite#validPassword}"/>&lt;/v1:userCredentials></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="resetUserPassword" searchProperties="true" id="e41b0cbf-bb42-445d-ad83-c31455209d86"><con:settings/><con:testStep type="restrequest" name="POST resetUserPassword - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [userPassword]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:userPassword)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - user not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST resetUserPassword - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - resetUserPassword" resourcePath="/v1.0/customers/{customerId}/users/{username}/password" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST resetUserPassword - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST resetUserPassword - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getPasswordRecoveryToken" searchProperties="true" id="31b3b042-3646-4023-af98-475f65d440a0"><con:settings/><con:testStep type="restrequest" name="POST getRecoveryToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [token]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [token]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:token)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - user not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asfd1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getRecoveryToken - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - getRecoveryToken" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoverytoken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getRecoveryToken - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getRecoveryToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="sendPasswordRecoveryEmail" searchProperties="true" id="d2c4a8bc-5535-440d-b352-a43eda9a5df5"><con:settings/><con:testStep type="restrequest" name="POST sendRecoveryEmail - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - customer client"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - user not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST sendRecoveryEmail - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="POST - sendRecoveryEmail" resourcePath="/v1.0/customers/{customerId}/users/{username}/password/recoveryemail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST sendRecoveryEmail - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:passwordRecovery callbackUrl="http://example.com" from="no-reply@example.com" replyTo="no-reply@example.com" subject="Recover Password" templateUrl="http://example.com/emailtemplate" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST sendRecoveryEmail - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="setUserRole" searchProperties="true" id="b069fcbf-307c-47d8-8fb9-9ed97cd96778"><con:settings/><con:testStep type="restrequest" name="PUT setUserRole - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - user not found"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserRole - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getUserRoles" searchProperties="true" id="41a791a8-6224-4075-9a17-6d92e17f4a3f"><con:settings/><con:testStep type="restrequest" name="GET getUserRoles - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [roles]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:roles)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [roles]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:roles)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [roles]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:roles)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - user not found"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET getUserRoles - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUserRoles" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUserRoles - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET getUserRoles - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteUserRole" searchProperties="true" id="5d3d6c9b-675c-4356-a0fe-eb5a108c3a10"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUserRole - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUserRole - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUserRole - customer client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserRole - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserRole - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUserRole - admin"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUserRole - user"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUserRole - user not found"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUserRole" resourcePath="/v1.0/customers/{customerId}/users/{username}/roles/{roleName}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUserRole - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUserRole - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="roleName" value="Idm Admin"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="disableUser" searchProperties="true" id="de8b768b-026f-4ed6-8b91-3403624b7f13"><con:settings/><con:testStep type="restrequest" name="PUT setUserStatus - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>INACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>INACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - bad request"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user not found"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="enableUser" searchProperties="true" id="f3d2a2f3-903c-42ed-b360-68a20be47c89"><con:settings/><con:testStep type="restrequest" name="PUT setUserStatus - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>ACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - rackspace client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@status]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@status</path><content>ACTIVE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="INACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserStatus - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserStatus" resourcePath="/v1.0/customers/{customerId}/users/{username}/status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserStatus - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserStatus - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="softDeleteUser" searchProperties="true" id="43491680-0f93-4936-aebd-068c29885e03"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - other customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - invalid token" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="true" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="undeleteSoftDeletedUser" searchProperties="true" id="546d7811-f272-4828-89ef-1a62487faef7"><con:settings/><con:testStep type="properties" name="Properties"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>timezone</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>inum</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>personId</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>country</con:name><con:value/></con:property><con:property><con:name>prefLang</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>email</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>customerInum</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="GET getUser"><con:settings/><con:config service="idm-api-dev" methodName="GET - getUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET getUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>timeZone</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@timeZone</con:sourcePath><con:targetType>timezone</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>inum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@inum</con:sourcePath><con:targetType>inum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>prefLanguage</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@prefLanguage</con:sourcePath><con:targetType>prefLang</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>personId</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@personId</con:sourcePath><con:targetType>personId</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>email</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@email</con:sourcePath><con:targetType>email</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerInum</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>GET getUser</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@customerInum</con:sourcePath><con:targetType>customerInum</con:targetType><con:targetStep>Properties</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - unauthorized client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user softDeleted="false" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - other customer client"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - other customer client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#rackspace_customer_number}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername1}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - admin"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@softDeleted]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:user[1]/@softDeleted</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PUT setUserSoftDelete - user"><con:settings/><con:config service="idm-api-dev" methodName="PUT - setUserSoftDelete" resourcePath="/v1.0/customers/{customerId}/users/{username}/softdelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT setUserSoftDelete - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:user customerId="${#TestSuite#existingCustomerNumber}" customerInum="${Properties#customerInum}" displayName="SoapUi Test" email="${Properties#email}" firstName="SoapUi" inum="${Properties#inum}" lastName="Test" locked="false" personId="${Properties#personId}" prefLanguage="${Properties#prefLang}" softDeleted="false" status="ACTIVE" username="${#TestSuite#newUsername2}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["PUT setUserSoftDelete - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="deleteUser" searchProperties="true" id="1efe0dae-b48a-4040-b40f-dc984b684b1c"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - unauthorized client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - unauthorized client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - unauthorized client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - different customer client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - different customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - different customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - admin"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - user"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 403 Forbidden")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [forbidden]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:forbidden)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - user not found"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - user not found" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="bad_username_asdf12324"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE deleteUser - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="customerId" value="${#TestSuite#rackspace_customer_number}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="cleanUp" searchProperties="true" id="627797cc-6c2d-49cb-8bd5-7fce2addf208"><con:settings/><con:testStep type="restrequest" name="DELETE deleteUser"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername1}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser2"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser2" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername2}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE deleteUser3"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - deleteUser" resourcePath="/v1.0/customers/{customerId}/users/{username}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE deleteUser3" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="username" value="${#TestSuite#newUsername3}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="customerId" value="${#TestSuite#existingCustomerNumber}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>DFW-8bd17210ba764beb95409c3a81c54a2c</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>DFW-d79632b0b0ff44b9809377a665ebfae8</con:value></con:property><con:property><con:name>client_token</con:name><con:value>DFW-ab80399065884d9fa52a4c3ed75d5157</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>DFW-bf868d7869b34fa7a2af1b471b690ce1</con:value></con:property><con:property><con:name>existingCustomerNumber</con:name><con:value>RCN-QATestingCustomer</con:value></con:property><con:property><con:name>existingMossoId</con:name><con:value>999112358</con:value></con:property><con:property><con:name>existingNastId</con:name><con:value>nastid-qauser</con:value></con:property><con:property><con:name>invalidPassword</con:name><con:value>asdf</con:value></con:property><con:property><con:name>newUserEmail1</con:name><con:value>soapUiTestUser-1387137@example.com</con:value></con:property><con:property><con:name>newUserEmail2</con:name><con:value>soapUiTestUser-8460534@example.com</con:value></con:property><con:property><con:name>newUserEmail3</con:name><con:value>soapUiTestUser-1817401@example.com</con:value></con:property><con:property><con:name>newUsername1</con:name><con:value>soapUiTestUser-1387137</con:value></con:property><con:property><con:name>newUsername2</con:name><con:value>soapUiTestUser-8460534</con:value></con:property><con:property><con:name>newUsername3</con:name><con:value>soapUiTestUser-1817401</con:value></con:property><con:property><con:name>rackspace_customer_number</con:name><con:value>RACKSPACE</con:value></con:property><con:property><con:name>signupService_token</con:name><con:value>DFW-c8f1db53cde94df5938fb4379fa47e4c</con:value></con:property><con:property><con:name>user_token</con:name><con:value>DFW-919992e9c7ae48299932db40703aa974</con:value></con:property><con:property><con:name>validPassword</con:name><con:value>P@ssw0rd</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite - tokens"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="getToken" searchProperties="true" id="26819e97-cd8b-4991-b918-dce9d9df1939"><con:settings/><con:testStep type="restrequest" name="POST getToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - customerIdm" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - billingApp"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - billingApp" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="GHIJKL" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - billingApp"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qaadmin" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - admin"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="QATESTCLIENT" client_secret="password" grant_type="PASSWORD" password="password" username="qauser" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad client credentials"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad client credentials" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="18e7a7032733486cd32f472d7bd58f709ac0d221" client_secret="bad_password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad client credentials"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad user credentials"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad user credentials" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="bad_password" username="mkovacs" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad user credentials"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - client not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - client not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="bad_client_id_asdf1234" client_secret="password" grant_type="NONE" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - client not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - user not found"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - user not found" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="password" username="bad_username_asdf1234" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - user not found"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - bad request"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - bad request" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="" client_secret="" grant_type="PASSWORD" password="" username="" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - bad request"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 400 Bad Request")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [badRequest]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:badRequest)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>customerIdm_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - customerIdm</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>customerIdm_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>billingApp_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - billingApp</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>billingApp_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>client_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - client</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>client_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" ignoreEmpty="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>user_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - user</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>user_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>refresh_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:refresh_token[1]/@id</con:sourcePath><con:targetType>refresh_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="POST getToken - refreshToken"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - refreshToken" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="REFRESH_TOKEN" refresh_token="${#TestSuite#refresh_token}" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["POST getToken - refreshToken"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="validateToken" searchProperties="true" id="6f10e373-a8e9-43aa-b9ea-1a949c5a8a3f"><con:settings/><con:testStep type="restrequest" name="POST getToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="POST - getToken" resourcePath="/v1.0/token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST getToken - admin" mediaType="application/xml" postQueryString="false" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request>&lt;v1:authCredentials client_id="ABCDEF" client_secret="password" grant_type="PASSWORD" password="password" username="mkovacs" xmlns:v1="http://docs.rackspacecloud.com/idm/api/v1.0"/></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>admin_token</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>POST getToken - admin</con:sourceStep><con:sourcePath>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
//ns1:auth[1]/ns1:access_token[1]/@id</con:sourcePath><con:targetType>admin_token</con:targetType><con:targetStep>#TestSuite#</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#billingApp_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - other customer client"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - other customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - other customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#client_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#admin_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - user"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [auth]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:auth)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#user_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 404 Not Found")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [itemNotFound]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:itemNotFound)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="bad_token_asdf1234"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="clientId" value="${#TestSuite#clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET validateToken - unauthorized token"><con:settings/><con:config service="idm-api-dev" methodName="GET - validateToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET validateToken - unauthorized token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["GET validateToken - unauthorized token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth bad_token_asdf1234"/>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="clientId" value="${#TestSuite#billingApp_clientId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="revokeToken" searchProperties="true" id="0b305d5f-9dfd-4703-be49-66464aa664f6"><con:settings/><con:testStep type="restrequest" name="DELETE revokeToken - rackspace client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - rackspace client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#billingApp_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#billingApp_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - customer client"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - customer client" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - customer client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#client_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#client_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - admin"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - admin" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - rackspace client"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="${#TestSuite#admin_token}"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#admin_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - user"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - user" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - user"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#user_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#user_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - customerIdm"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - customerIdm" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - customerIdm"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 204 No Content")</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
  <con:entry key="tokenId" value="${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE revokeToken - invalid token"><con:settings/><con:config service="idm-api-dev" methodName="DELETE - revokeToken" resourcePath="/v1.0/token/{tokenId}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE revokeToken - invalid token" mediaType="application/xml" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#env-apiUrl}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>def response = context.testCase.testSteps["DELETE revokeToken - invalid token"].testRequest.response
def status = response.responseHeaders["#status#"]

assert status.contains("HTTP/1.1 401 Unauthorized")</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="Check for existance of [unauthorized]"><con:configuration><path>declare namespace ns1='http://docs.rackspacecloud.com/idm/api/v1.0';
exists( //ns1:unauthorized)</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="tokenId" value="bad_token_asdf_1243"/>
  <con:entry key="Authorization" value="OAuth ${#TestSuite#customerIdm_token}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>admin_token</con:name><con:value>DFW-f6c1c29fcfd14d4eb26d4436e3800105</con:value></con:property><con:property><con:name>billingApp_clientId</con:name><con:value>GHIJKL</con:value></con:property><con:property><con:name>billingApp_token</con:name><con:value>DFW-d79632b0b0ff44b9809377a665ebfae8</con:value></con:property><con:property><con:name>client_token</con:name><con:value>DFW-ab80399065884d9fa52a4c3ed75d5157</con:value></con:property><con:property><con:name>customerIdm_clientId</con:name><con:value>IDM</con:value></con:property><con:property><con:name>customerIdm_token</con:name><con:value>DFW-bf868d7869b34fa7a2af1b471b690ce1</con:value></con:property><con:property><con:name>refresh_token</con:name><con:value>532d0a5d66694f3887eef4e290f30db0</con:value></con:property><con:property><con:name>user_token</con:name><con:value>DFW-919992e9c7ae48299932db40703aa974</con:value></con:property><con:property><con:name>admin_token2</con:name></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>env-apiUrl</con:name><con:value>http://172.17.16.83:8080</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>