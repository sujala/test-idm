apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'nexus'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.2'
    }
}

group = 'com.rackspace'
featureVersion = '2.6.0'
buildVersion = System.currentTimeMillis()
gitRevision = "git rev-parse HEAD".execute().text.trim()

version = "$featureVersion-$buildVersion"

description = """idm"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

def generatedSrc = 'build/generated-src/jaxb/'

configurations {
    appRevision
    wadl.extendsFrom compile
}

repositories {
    mavenCentral()
    mavenRepo url: "$nexusHost/nexus/content/repositories/releases"
    mavenRepo url: "$nexusHost/nexus/content/repositories/thirdparty/"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/releases"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/thirdparty/"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/snapshots"
    mavenRepo url: "http://download.java.net/maven/2/"
    mavenRepo url: "http://repo1.maven.org/maven2"
    mavenRepo url: "http://repository.jboss.org/maven2"
    mavenRepo url: "https://repository.jboss.org/nexus/content/repositories/public"
    mavenRepo url: "http://download.java.net/maven/1"
    mavenRepo url: "http://repo1.maven.org/maven2/"
    mavenRepo url: "http://www.eviware.com/repository/maven2"
}

dependencies {
    wadl "com.lunatech.jax-doclets:doclets:0.8.1"
    wadl "com.sun.jersey:jersey-bundle:1.6"
    wadl "asm:asm:3.3.1"

    compile project('identity')
    runtime project('identity')
    testCompile group: 'org.spockframework', name: 'spock-core', version:'0.7-groovy-1.8'
    testCompile group: 'org.spockframework', name: 'spock-spring', version:'0.7-groovy-1.8'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version:'1.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version:'1.5'
    testCompile group: 'junit', name: 'junit-dep', version:'4.11'
    testCompile group: 'org.easymock', name: 'easymock', version:'3.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.6'
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:1.6'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.not-yet-commons-ssl:0.3.11_1'
    compile 'com.rackspace:keystone:2014.2-1403292294236'
}

def resourceDirs = [
    'VAGRANT'
]

task copyConfig(type: Copy) {
    from 'src/main/config'
    into 'build/config'
    ant.property(name: 'version', value: featureVersion)
    ant.property(name: 'buildVersion', value: buildVersion)
    ant.property(name: 'gitRevision', value: gitRevision)
    filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
}

task copyBaseConfig << {
    resourceDirs.each { destDir ->
        copy {
            from ('src/main/config/base.idm.properties', 'src/main/config/log4j.xml')
            into "build/config/$destDir"
            ant.property(name: 'version', value: featureVersion)
            ant.property(name: 'buildVersion', value: buildVersion)
            ant.property(name: 'gitRevision', value: gitRevision)
            filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
        }
    }
}

task copyGeneratedSrc(type: Copy) {
    from 'identity/build/generated-src'
    into "$buildDir/generated-src"
}

task zipConfig(type: Zip) {
    classifier = 'config'
    resourceDirs.each { destdir ->
        into ("$destdir") {
            from "build/config/$destdir"
        }
    }
}

task zipLdap(type: Zip) {
    classifier = 'ldap'
    from "ldap"
}

idea {
    module {
        sourceDirs += file(generatedSrc)
        excludeDirs.clear()
        excludeDirs = []
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
    // set heap size for the test JVM(s)
    minHeapSize = "256m"
    maxHeapSize = "768m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=1024m'
    systemProperties['idm.properties.location']  = System.getProperty('idm.properties.location', 'build/config/VAGRANT')
    systemProperties['jersey.test.port']  = System.getProperty('jersey.test.port', '9998')

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    // show standard out and standard error of the test JVM(s) on the console. Useful for debugging tests that fail via gradle build only
    //testLogging.showStandardStreams = true
}

jettyRun {
    httpPort = 8083

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=1024m'
}

jettyRunWar {
    httpPort = 8083
}


artifacts {
    archives zipConfig
    archives zipLdap
}

nexus {
    sign = false
    repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
    snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
}

def getWarArtifacts(){
    def result = []
    def directory = fileTree(war.destinationDir) {
        include '**/*.war'
    }
    directory.each {File file ->
       result.add(file)
    }
    return result
}

task appRevision() << {
    File location = getWarArtifacts().get(0)
    println(location.name.replace("idm-","").replace(".war",""))
}

task wadl << {
    ant.taskdef(name: 'wadl', classname: 'com.sun.jersey.api.wadl.WadlGeneratorTask', classpath: configurations.wadl.asPath )
    ant.wadl(destFile: sourceSets.main.output.classesDir.toString()+'/application.wadl',
        classpath: sourceSets.main.output.classesDir,
        baseUri: 'http://localhost:8083'
    )
}

copyBaseConfig.dependsOn copyConfig
test.dependsOn copyBaseConfig
zipConfig.dependsOn copyBaseConfig
copyBaseConfig.dependsOn copyGeneratedSrc
war.dependsOn zipConfig
war.dependsOn zipLdap
jettyRun.dependsOn copyBaseConfig

task echo << {
    println "source main sets=$sourceSets.main.java.srcDirs"
    println "source test sets=$sourceSets.test.java.srcDirs"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "$buildDir/jacocoHtml"
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://identity-ci.corp.rackspace.com:9000"
        property "sonar.jdbc.url", "jdbc:mysql://identity-ci.corp.rackspace.com/sonarqube"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonarqube"
        property "sonar.jdbc.password", "sonarqube"
        property "sonar.exclusions", "**/generated-src/jaxb/**,**/domain/entity/*.java"
    }
}

sourceSets {
    main {
        java {
            exclude '**/**'
        }
    }
}
