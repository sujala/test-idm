apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'nexus'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.2'
    }
}

group = 'com.rackspace'
featureVersion = '2.13.0'
buildVersion = System.currentTimeMillis()
gitRevision = "git rev-parse HEAD".execute().text.trim()

version = "$featureVersion-$buildVersion"

description = """idm"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

def srcJava = 'src/main/java'
def srcTestLombok = 'src/test/lombok'
def srcDelomboked = 'build/src-delomboked'
def srcTestDelomboked = 'build/test/src-delomboked'
def generatedSrc = 'build/generated-src/jaxb/'

configurations {
    appRevision
    ajc
    aspects
    ajInpath
    delombokJava
    delombokTestJava
    jaxb
    wadl.extendsFrom compile
}

repositories {
    mavenCentral()
    mavenRepo url: "$nexusHost/nexus/content/repositories/releases"
    mavenRepo url: "$nexusHost/nexus/content/repositories/thirdparty/"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/releases"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/thirdparty/"
    mavenRepo url: "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/snapshots"
    mavenRepo url: "http://download.java.net/maven/2/"
    mavenRepo url: "http://repo1.maven.org/maven2"
    mavenRepo url: "http://repository.jboss.org/maven2"
    mavenRepo url: "https://repository.jboss.org/nexus/content/repositories/public"
    mavenRepo url: "http://download.java.net/maven/1"
    mavenRepo url: "http://repo1.maven.org/maven2/"
    mavenRepo url: "http://www.eviware.com/repository/maven2"
}

def resourceDirs = [
        'VAGRANT'
]

dependencies {
    wadl "com.lunatech.jax-doclets:doclets:0.8.1"
    wadl "com.sun.jersey:jersey-bundle:1.6"
    wadl "asm:asm:3.3.1"

    jaxb group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
    jaxb group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.6.4'
    jaxb group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-annotate', version: '0.6.4'

    ajc 'org.aspectj:aspectjtools:1.7.1'
    compile 'org.aspectj:aspectjrt:1.7.1'
    compile 'org.opensaml:opensaml:2.5.3'

    compile group: 'joda-time', name: 'joda-time', version:'1.6'
    compile group: 'net.sf.dozer', name: 'dozer', version:'5.3.2'
    compile group: 'org.projectlombok', name: 'lombok', version:'1.14.2'
    compile group: 'org.apache.cxf', name: 'cxf-api', version:'2.5.2'
    compile group: 'com.rsa', name: 'authapi', version:'1.0'
    compile group: 'com.rsa', name: 'cryptoj', version:'1.0'
    compile group: 'commons-io', name: 'commons-io', version:'2.1'
    compile group: 'org.springframework', name: 'spring-core', version:'4.0.1.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version:'4.0.1.RELEASE'
    compile group: 'org.springframework', name: 'spring-test', version:'4.0.1.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'4.0.1.RELEASE'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version:'1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'4.0.1.RELEASE'
    compile group: 'org.aspectj', name: 'aspectjrt', version:'1.7.1'
    compile group: 'org.aspectj', name: 'aspectjweaver', version:'1.7.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.5.10'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.5.10'
    compile(group: 'log4j', name: 'log4j', version:'1.2.15') {
        exclude(module: 'mail', group: 'javax.mail')
        exclude(module: 'jms', group: 'javax.jms')
        exclude(module: 'jmxtools', group: 'com.sun.jdmk')
        exclude(module: 'jmxri', group: 'com.sun.jmx')
    }
    compile group: 'log4j', name: 'apache-log4j-extras', version:'1.1'
    compile group: 'org.tuckey', name: 'urlrewritefilter', version:'3.1.0'
    compile group: 'org.apache.commons', name: 'commons-email', version:'1.2'
    compile group: 'javax.servlet', name: 'jstl', version:'1.2'
    compile group: 'com.unboundid', name: 'unboundid-ldapsdk', version:'2.3.6'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.4'
    compile group: 'commons-configuration', name: 'commons-configuration', version:'1.9'
    compile group: 'commons-collections', name: 'commons-collections', version:'3.2.1'
    compile group: 'org.apache.commons', name: 'commons-collections4', version:'4.0'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.4'
    compile group: 'cglib', name: 'cglib', version:'2.2'
    compile group: 'com.sun.jersey', name: 'jersey-client', version:'1.1.5'
    compile group: 'com.sun.jersey', name: 'jersey-server', version:'1.1.5'
    compile group: 'com.sun.jersey', name: 'jersey-json', version:'1.1.5'
    compile(group: 'com.sun.jersey.contribs', name: 'jersey-spring', version:'1.1.5') {
        exclude(module: 'spring', group: 'org.springframework')
        exclude(module: 'spring-core', group: 'org.springframework')
        exclude(module: 'spring-context', group: 'org.springframework')
        exclude(module: 'spring-beans', group: 'org.springframework')
        exclude(module: 'spring-web', group: 'org.springframework')
    }
    compile(group: 'org.hibernate', name: 'hibernate-validator', version:'4.0.2.GA') {
        exclude(module: 'stax-api', group: 'javax.xml.stream')
    }
    compile group: 'javax.validation', name: 'validation-api', version:'1.0.0.GA'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version:'1.46'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.2.1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.2.1'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.18'
    compile(group: 'commons-logging', name: 'commons-logging', version:'1.1') {
        exclude(module: 'log4j', group: 'log4j')
        exclude(module: 'logkit', group: 'logkit')
        exclude(module: 'avalon-framework', group: 'avalon-framework')
        exclude(module: 'servlet-api', group: 'javax.servlet')
    }
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-common', version:'3.0'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version:'3.0'
    compile group: 'org.tinyradius', name: 'tinyradius', version:'1.0'
    compile group: 'org.mortbay.jetty', name: 'jetty', version:'7.0.0pre0'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.2.2'
    runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.5.10'

    compile group: 'org.projectlombok', name: 'lombok', version:'0.11.4'
    compile group: 'javax.servlet', name: 'servlet-api', version:'2.5'
    compile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.1'

    compile group: 'org.jasypt', name: 'jasypt', version:'1.9.0'
    compile group: 'org.jasypt', name: 'jasypt-spring3', version:'1.9.0'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.2.2'
    compile 'org.eclipse.persistence:eclipselink:2.5.0'

    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '5.9'
    compile group: 'org.keyczar', name: 'keyczar', version: '0.71g'
    compile group: 'org.msgpack', name: 'msgpack', version: '0.6.11'

    testCompile group: 'org.spockframework', name: 'spock-core', version:'0.7-groovy-1.8'
    testCompile group: 'org.spockframework', name: 'spock-spring', version:'0.7-groovy-1.8'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version:'1.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version:'1.5'
    testCompile group: 'junit', name: 'junit-dep', version:'4.11'
    testCompile group: 'org.easymock', name: 'easymock', version:'3.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.6'
    testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly:1.6'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.not-yet-commons-ssl:0.3.11_1'

    compile 'com.rackspace.identity:multifactor-sdk:1.0.0-1407178553210-SNAPSHOT'
}

task copyConfig(type: Copy) {
    from 'src/main/config'
    into 'build/config'
    ant.property(name: 'version', value: featureVersion)
    ant.property(name: 'buildVersion', value: buildVersion)
    ant.property(name: 'gitRevision', value: gitRevision)
    filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
}

task copyBaseConfig << {
    resourceDirs.each { destDir ->
        copy {
            from ('src/main/config/base.idm.properties', 'src/main/config/log4j.xml')
            into "build/config/$destDir"
            ant.property(name: 'version', value: featureVersion)
            ant.property(name: 'buildVersion', value: buildVersion)
            ant.property(name: 'gitRevision', value: gitRevision)
            filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
        }
    }
}

task copyGeneratedSrc(type: Copy) {
    from 'identity/build/generated-src'
    into "$buildDir/generated-src"
}

task zipConfig(type: Zip) {
    classifier = 'config'
    resourceDirs.each { destdir ->
        into ("$destdir") {
            from "build/config/$destdir"
        }
    }
}

task zipResources(type: Zip) {
    classifier = 'resources'
    from "src/main/resources"
}

task zipLdap(type: Zip) {
    classifier = 'ldap'
    from "ldap"
}

task zipEdirLdif(type: Zip) {
    classifier = 'edir-ldif'
    from "edir/ldif"
}

task zipEdirConfig(type: Zip) {
    classifier = 'edir-config'
    from "edir/config"
}

idea {
    module {
        sourceDirs += file(generatedSrc)
        excludeDirs.clear()
        excludeDirs = []
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
    // set heap size for the test JVM(s)
    minHeapSize = "256m"
    maxHeapSize = "768m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=1024m'
    systemProperties['idm.properties.location']  = System.getProperty('idm.properties.location', 'build/config/VAGRANT')
    systemProperties['jersey.test.port']  = System.getProperty('jersey.test.port', '9998')

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    // show standard out and standard error of the test JVM(s) on the console. Useful for debugging tests that fail via gradle build only
    //testLogging.showStandardStreams = true
}

jettyRun {
    httpPort = 8083

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=1024m'
}

jettyRunWar {
    httpPort = 8083
}


artifacts {
    archives zipConfig
    archives zipLdap
    archives zipEdirLdif
    archives zipEdirConfig
    archives zipResources
    archives jar
}

nexus {
    sign = false
    repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
    snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
            snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
            addFilter('jar') {artifact, file ->
                artifact.name == 'identity' && artifact.type == 'jar'
            }
            addFilter('war') {artifact, file ->
                artifact.name == 'idm'
            }
            pom('jar').artifactId = 'identity'
            pom('war').artifactId = 'idm'
        }
    }
}

def getWarArtifacts(){
    def result = []
    def directory = fileTree(war.destinationDir) {
        include '**/*.war'
    }
    directory.each {File file ->
       result.add(file)
    }
    return result
}

task appRevision() << {
    File location = getWarArtifacts().get(0)
    println(location.name.replace("idm-","").replace(".war",""))
}

task wadl << {
    ant.taskdef(name: 'wadl', classname: 'com.sun.jersey.api.wadl.WadlGeneratorTask', classpath: configurations.wadl.asPath )
    ant.wadl(destFile: sourceSets.main.output.classesDir.toString()+'/application.wadl',
        classpath: sourceSets.main.output.classesDir,
        baseUri: 'http://localhost:8083'
    )
}

nexus {
    sign = false
    repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
    snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
}

task jaxb() {
    doLast {
        file(generatedSrc).mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.jaxb.asPath)

        ant.xjc(destdir: generatedSrc, extension: true) {
            schema(dir: 'src/main/resources/xsd')
        }

        def cloudv11dir = 'src/main/resources/cloudv11'
        ant.xjc(destdir: generatedSrc, extension: true, binding: "$cloudv11dir/cloudv11.xjb") {
            schema(dir: cloudv11dir, excludes: '*.xjb')
            arg(value: '-nv')
            arg(value: '-Xannotate')
        }

        def cloudv20dir = 'src/main/resources/cloudv20'
        ant.xjc(destdir: generatedSrc, extension: true, binding: "$cloudv20dir/v20.xjb") {
            schema(dir: cloudv20dir, excludes: '*.xjb')
            arg(value: '-nv')
            arg(value: '-Xannotate')
        }
    }
}

def delombok(srcDir, targetDir) {
    FileCollection collection = files(configurations.compile)
    FileCollection sumTree = collection + fileTree(dir: 'bin')
    ant.taskdef(name: 'replacer', classname: 'lombok.delombok.ant.DelombokTask', classpath: configurations.compile.asPath)
    ant.replacer(from:srcDir, to:targetDir, classpath: sumTree.asPath)
}

task delombokJava {
    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    doLast {
        delombok(srcJava, srcDelomboked)
    }
}

task delombokTestJava {
    inputs.files file(srcTestLombok)
    outputs.dir file(srcTestDelomboked)

    doLast {
        delombok(srcTestLombok, srcTestDelomboked)
    }
}

def aspectjWeave(srcDirs, destDir) {
    ant.taskdef(
            resource: 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties',
            classpath: configurations.ajc.asPath)
    ant.iajc(
            source: sourceCompatibility,
            target: targetCompatibility,
            destDir: destDir.absolutePath,
            fork: 'true',
            aspectPath: configurations.aspects.asPath,
            inpath: configurations.ajInpath.asPath,
            sourceRootCopyFilter: '**/*.java,**/*.aj',
            classpath: configurations.compile.asPath) {

        sourceroots {
            srcDirs.each { dir ->
                if (dir.exists()) {
                    pathelement(location: dir.absolutePath)
                }
            }
        }
    }
}

compileJava() {
    actions = []
    dependsOn configurations.ajc.getTaskDependencyFromProjectDependency(true, 'compileJava')

    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir

    doLast {
        aspectjWeave(sourceSets.main.java.srcDirs, sourceSets.main.output.classesDir)
    }
}

copyBaseConfig.dependsOn copyConfig
test.dependsOn copyBaseConfig
zipConfig.dependsOn copyBaseConfig
copyBaseConfig.dependsOn copyGeneratedSrc
war.dependsOn zipConfig
war.dependsOn zipLdap
war.dependsOn zipEdirLdif
war.dependsOn zipEdirConfig
jettyRun.dependsOn copyBaseConfig

delombokJava.dependsOn jaxb
compileJava.dependsOn delombokJava
compileTestGroovy.dependsOn delombokTestJava

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
    from configurations.compile
}

jar {
    dependsOn copyToLib
    baseName = 'identity'
    enabled = true
}

war {
    dependsOn jar
    classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
    into('WEB-INF/classes') {
        from sourceSets.main.resources
    }
}

task echo << {
    println "source main sets=$sourceSets.main.java.srcDirs"
    println "source test sets=$sourceSets.test.java.srcDirs"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "$buildDir/jacocoHtml"
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://identity-ci.corp.rackspace.com:9000"
        property "sonar.jdbc.url", "jdbc:mysql://identity-ci.corp.rackspace.com/sonarqube"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonarqube"
        property "sonar.jdbc.password", "sonarqube"
        property "sonar.exclusions", "**/generated-src/jaxb/**,**/domain/entity/*.java"
    }
}

sourceSets {
    main {
        java {
            srcDirs = [srcDelomboked, generatedSrc]
        }
    }
}
