apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'nexus'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

buildscript {
    repositories {
        maven { url "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/central" }
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.3'
    }
}

def featureVersion = '3.9.0'
def buildVersion = System.currentTimeMillis()
def gitRevision = "git rev-parse HEAD".execute().text.trim()

project.group = 'com.rackspace'
project.version = "$featureVersion" + "-" + "$buildVersion"

project.description = """idm"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

def srcJava = 'src/main/java'
def generatedSrc = 'build/generated-src/jaxb/'

configurations {
    appRevision
    ajc
    aspects
    ajInpath
    jaxb
    wadl.extendsFrom compile
}

repositories {
    mavenCentral()
    maven { url "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/releases" }
    maven { url "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/snapshots" }
    maven { url "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/thirdparty/" }
    maven { url "http://d-build1.iad2.corp.rackspace.com:8100/nexus/content/repositories/central" }
}

def resourceDirs = [
        'VAGRANT'
]

dependencies {
    wadl "com.lunatech.jax-doclets:doclets:0.8.1"
    wadl "com.sun.jersey:jersey-bundle:1.6"
    wadl "asm:asm:3.3.1"

    jaxb group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
    jaxb group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.6.4'
    jaxb group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-annotate', version: '0.6.4'

    compile ('org.opensaml:opensaml:2.5.3') {
        exclude(module: 'velocity', group: 'velocity')
        exclude(group: 'org.bouncycastle', module: 'bcprov-jdk15')
    }

    compile 'commons-dbcp:commons-dbcp:1.4'
    compile 'mysql:mysql-connector-java:5.1.34'
    compile 'org.mariadb.jdbc:mariadb-java-client:1.2.0'

    compile group: 'joda-time', name: 'joda-time', version:'1.6'
    compile group: 'net.sf.dozer', name: 'dozer', version:'5.3.2'
    compile group: 'org.projectlombok', name: 'lombok', version:'1.14.2'
    compile group: 'org.codehaus.woodstox', name: 'woodstox-core-asl', version:'4.1.1'
    compile group: 'com.rsa', name: 'authapi', version:'1.0'
    compile group: 'com.rsa', name: 'cryptoj', version:'1.0'
    compile group: 'commons-io', name: 'commons-io', version:'2.1'

    def springVersion = '4.1.7.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version:springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version:springVersion
    compile group: 'org.springframework', name: 'spring-test', version:springVersion
    compile group: 'org.springframework', name: 'spring-beans', version:springVersion
    compile group: 'org.springframework', name: 'spring-aop', version:springVersion
    compile group: 'org.springframework', name: 'spring-jdbc', version:springVersion
    compile group: 'org.springframework', name: 'spring-aspects', version:springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version:springVersion
    compile group: 'org.springframework', name: 'spring-orm', version:springVersion
    compile (group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.8.1.RELEASE') {
        exclude(module: 'slf4j-api', group: 'org.slf4j')
        exclude(module: 'jcl-over-slf4j', group: 'org.slf4j')
    }
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version:'4.3.10.Final'

    compile (group: 'com.googlecode.json-simple', name: 'json-simple', version:'1.1') {
        exclude(module: 'junit', group: 'junit')
    }
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.5.10'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.5.10'
    compile(group: 'log4j', name: 'log4j', version:'1.2.15') {
        exclude(module: 'mail', group: 'javax.mail')
        exclude(module: 'jms', group: 'javax.jms')
        exclude(module: 'jmxtools', group: 'com.sun.jdmk')
        exclude(module: 'jmxri', group: 'com.sun.jmx')
    }
    compile group: 'log4j', name: 'apache-log4j-extras', version:'1.1'
    compile group: 'org.tuckey', name: 'urlrewritefilter', version:'3.1.0'
    compile group: 'org.apache.commons', name: 'commons-email', version:'1.2'
    compile group: 'javax.mail', name: 'mail', version:'1.4.7'
    compile group: 'org.apache.velocity', name: 'velocity', version:'1.7'
    compile (group: 'org.apache.velocity', name: 'velocity-tools', version:'2.0') {
//        removing dependencies not required by IDM app since we don't use these features
        exclude(group: 'commons-chain', module: 'commons-chain')
        exclude(group: 'commons-validator', module: 'commons-validator')
        exclude(group: 'dom4j', module: 'dom4j')
        exclude(group: 'oro', module: 'oro')
        exclude(group: 'sslext', module: 'sslext')
        exclude(group: 'org.apache.struts', module: 'struts-core')
        exclude(group: 'org.apache.struts', module: 'struts-taglib')
        exclude(group: 'org.apache.struts', module: 'struts-tiles')
    }
    compile group: 'com.unboundid', name: 'unboundid-ldapsdk', version:'3.1.1'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
    compile group: 'commons-configuration', name: 'commons-configuration', version:'1.9'
    compile group: 'commons-collections', name: 'commons-collections', version:'3.2.1'
    compile group: 'org.apache.commons', name: 'commons-collections4', version:'4.0'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.4'
    compile group: 'cglib', name: 'cglib-nodep', version:'2.2'
    compile group: 'com.sun.jersey', name: 'jersey-client', version:'1.1.5'
    compile group: 'com.sun.jersey', name: 'jersey-server', version:'1.1.5'
    compile group: 'com.sun.jersey', name: 'jersey-json', version:'1.1.5'
    compile(group: 'com.sun.jersey.contribs', name: 'jersey-spring', version:'1.1.5') {
        exclude(module: 'spring', group: 'org.springframework')
        exclude(module: 'spring-core', group: 'org.springframework')
        exclude(module: 'spring-context', group: 'org.springframework')
        exclude(module: 'spring-beans', group: 'org.springframework')
        exclude(module: 'spring-web', group: 'org.springframework')
    }
    compile(group: 'org.hibernate', name: 'hibernate-validator', version:'4.0.2.GA') {
        exclude(module: 'stax-api', group: 'javax.xml.stream')
    }
    compile group: 'javax.validation', name: 'validation-api', version:'1.0.0.GA'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version:'1.46'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.2'
    compile group: 'org.freemarker', name: 'freemarker', version:'2.3.18'
    compile(group: 'commons-logging', name: 'commons-logging', version:'1.2') {
        exclude(module: 'log4j', group: 'log4j')
        exclude(module: 'logkit', group: 'logkit')
        exclude(module: 'avalon-framework', group: 'avalon-framework')
        exclude(module: 'servlet-api', group: 'javax.servlet')
    }
    compile group: 'org.tinyradius', name: 'tinyradius', version:'1.0'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.2.2'
    runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.5.10'

    compile group: 'org.projectlombok', name: 'lombok', version:'0.11.4'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'

    compile group: 'org.jasypt', name: 'jasypt', version:'1.9.0'
    compile group: 'org.jasypt', name: 'jasypt-spring3', version:'1.9.0'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.2.2'
    compile 'org.eclipse.persistence:eclipselink:2.5.0'

    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '7.4.2'
    compile group: 'org.keyczar', name: 'keyczar', version: '0.71g'
    compile group: 'org.msgpack', name: 'msgpack', version: '0.6.11'

    testCompile(group: 'org.mock-server', name: 'mockserver-netty', version: '3.10.4') {
        exclude(group: 'org.slf4j')
        exclude(group: 'junit')
    }
    testCompile(group: 'org.spockframework', name: 'spock-spring', version:'0.7-groovy-1.8') {
        exclude(group: 'junit')
        exclude(group: 'org.hamcrest')
    }
    testCompile(group: 'org.powermock', name: 'powermock-module-junit4', version:'1.5') {
        exclude(group: 'junit')
    }
    testCompile(group: 'org.powermock', name: 'powermock-api-mockito', version:'1.5') {
        exclude(group: 'junit')
        exclude(group: 'org.mockito')
    }
    testCompile(group: 'junit', name: 'junit-dep', version:'4.11') {
        exclude(group: 'org.hamcrest')
    }
    testCompile group: 'org.easymock', name: 'easymock', version:'3.0'
    testCompile(group: 'org.mockito', name: 'mockito-core', version:'1.9.5') {
        exclude(group: 'org.hamcrest')
    }
    testCompile (group: 'com.sun.jersey.jersey-test-framework', name:'jersey-test-framework-core', version:'1.6') {
        exclude(module: 'jersey-client', group: 'com.sun.jersey')
        exclude(module: 'jersey-server', group: 'com.sun.jersey')
        exclude(group: 'junit')
    }
    testCompile (group: 'com.sun.jersey.jersey-test-framework', name:'jersey-test-framework-grizzly', version:'1.6') {
        exclude(module: 'jersey-client', group: 'com.sun.jersey')
        exclude(module: 'jersey-server', group: 'com.sun.jersey')
        exclude(group: 'junit')
    }
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.not-yet-commons-ssl:0.3.11_1'
    testCompile 'com.h2database:h2:1.4.187'
    testCompile(group: 'org.mortbay.jetty', name: 'jetty', version:'7.0.0pre0') {
        exclude(module: 'servlet-api-3.0', group: 'org.mortbay.jetty')
    }

    compile (group: 'com.rackspace.identity', name: 'multifactor-sdk', version: '1.0.0-1407178553210-SNAPSHOT') {
        exclude(module: 'jersey-client', group: 'com.sun.jersey')
        exclude(group: 'org.springframework')
        exclude(group: 'javax.servlet')
        exclude(module: 'libphonenumber')
    }

    compile group: 'com.google.zxing', name: 'javase', version: '3.1.0'
    testCompile 'com.warrenstrange:googleauth:0.4.3'

    testCompile(group: 'org.subethamail', name: 'subethasmtp', version:'3.1.7') {
        exclude(module: 'mail', group: 'javax.mail')
        exclude(module: 'activation', group: 'javax.activation')
        exclude(module: 'avalon-framework', group: 'org.slf4j')
        exclude(module: 'slf4j-api', group: 'org.slf4j')
    }
}

task copyConfig(type: Copy) {
    from 'src/main/config'
    into 'build/config'
}

task copyBuildInfo << {
    ['src/test/resources', 'src/main/resources'].each { dest ->
        copy {
            from 'src/main/config/build_info.properties'
            into dest
            ant.property(name: 'version', value: featureVersion)
            ant.property(name: 'buildVersion', value: buildVersion)
            ant.property(name: 'gitRevision', value: gitRevision)
            filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.antProject)
        }
    }
}

task deleteBuildInfo(type: Delete) {
    delete 'src/main/resources/build_info.properties'
    delete 'src/test/resources/build_info.properties'
}

task copyBaseConfig << {
    resourceDirs.each { destDir ->
        copy {
            from ('src/main/config/log4j.xml')
            into "build/config/$destDir"
        }
    }
}

task copyGeneratedSrc(type: Copy) {
    from 'identity/build/generated-src'
    into "$buildDir/generated-src"
}

task zipConfig(type: Zip) {
    classifier = 'config'
    resourceDirs.each { destdir ->
        into ("$destdir") {
            from "build/config/$destdir"
        }
    }
}

task zipResources(type: Zip) {
    classifier = 'resources'
    from "src/main/resources"
}

task zipLdap(type: Zip) {
    classifier = 'ldap'
    from "ldap"
}

task zipSql(type: Zip) {
    classifier = 'sql'
    from "sql"
    exclude "sql_dump.sh"
}

task zipEdirLdif(type: Zip) {
    classifier = 'edir-ldif'
    from "edir/ldif"
}

task zipEdirConfig(type: Zip) {
    classifier = 'edir-config'
    from "edir/config"
}

task zipRepose(type: Zip) {
    classifier = 'repose'
    from "repose"
}

idea {
    module {
        sourceDirs += file(generatedSrc)
        excludeDirs.clear()
        excludeDirs = []
    }
}

jacoco {
    toolVersion = "0.7.5.201505241946"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task applicationCodeCoverageReport(type:JacocoReport){
    executionData "coverage/target/jacoco.exec" 
    classDirectories = files("coverage/target/classes")
    sourceDirectories = files("src")
}

test {
    // set heap size for the test JVM(s)
    minHeapSize = "256m"
    maxHeapSize = "1024m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=1024m'
    systemProperties['idm.properties.location']  = System.getProperty('idm.properties.location', 'build/config/VAGRANT')
    systemProperties['jersey.test.port']  = System.getProperty('jersey.test.port', '9998')
    systemProperties['spring.profiles.active'] = System.getProperty('spring.profiles.active', 'LDAP')

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }

    // show standard out and standard error of the test JVM(s) on the console. Useful for debugging tests that fail via gradle build only
    //testLogging.showStandardStreams = true
}

jettyRun {
    httpPort = 8083

    // set heap size for the test JVM(s)
    //minHeapSize = "256m"
    //maxHeapSize = "1024m"

    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=1024m'
}

jettyRunWar {
    httpPort = 8083
}


artifacts {
    archives zipConfig
    archives zipLdap
    archives zipSql
    archives zipEdirLdif
    archives zipEdirConfig
    archives zipResources
    archives zipRepose
    archives jar
}

nexus {
    sign = false
    repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
    snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
            snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
            addFilter('jar') {artifact, file ->
                artifact.name == 'identity' && artifact.type == 'jar'
            }
            addFilter('war') {artifact, file ->
                artifact.name == 'idm'
            }
            pom('jar').artifactId = 'identity'
            pom('war').artifactId = 'idm'
        }
    }
}

def getWarArtifacts(){
    def result = []
    def directory = fileTree(war.destinationDir) {
        include '**/*.war'
    }
    directory.each {File file ->
       result.add(file)
    }
    return result
}

task appRevision() << {
    File location = getWarArtifacts().get(0)
    println(location.name.replace("idm-","").replace(".war",""))
}

task wadl << {
    ant.taskdef(name: 'wadl', classname: 'com.sun.jersey.api.wadl.WadlGeneratorTask', classpath: configurations.wadl.asPath )
    ant.wadl(destFile: sourceSets.main.output.classesDir.toString()+'/application.wadl',
        classpath: sourceSets.main.output.classesDir,
        baseUri: 'http://localhost:8083'
    )
}

nexus {
    sign = false
    repositoryUrl = "$nexusHost/nexus/content/repositories/releases/"
    snapshotRepositoryUrl = "$nexusHost/nexus/content/repositories/snapshots/"
}

task jaxb() {
    doLast {
        file(generatedSrc).mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.jaxb.asPath)

        ant.xjc(destdir: generatedSrc, extension: true) {
            schema(dir: 'src/main/resources/xsd')
        }

        def cloudv11dir = 'src/main/resources/cloudv11'
        ant.xjc(destdir: generatedSrc, extension: true, binding: "$cloudv11dir/cloudv11.xjb") {
            schema(dir: cloudv11dir, excludes: '*.xjb')
            arg(value: '-nv')
            arg(value: '-Xannotate')
        }

        def cloudv20dir = 'src/main/resources/cloudv20'
        ant.xjc(destdir: generatedSrc, extension: true, binding: "$cloudv20dir/v20.xjb") {
            schema(dir: cloudv20dir, excludes: '*.xjb')
            arg(value: '-nv')
            arg(value: '-Xannotate')
        }
    }
}

compileJava() {
    inputs.dir sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.output.classesDir
}

tasks.withType(AbstractCompile) {
    options.encoding = 'UTF-8'
}

copyBaseConfig.dependsOn copyConfig
test.dependsOn copyBaseConfig
test.dependsOn copyBuildInfo
zipConfig.dependsOn copyBaseConfig
copyBaseConfig.dependsOn copyGeneratedSrc
war.dependsOn zipConfig
war.dependsOn zipLdap
war.dependsOn zipSql
war.dependsOn zipEdirLdif
war.dependsOn zipEdirConfig
war.dependsOn zipRepose
war.dependsOn copyBuildInfo
jettyRun.dependsOn copyBaseConfig
jettyRun.dependsOn copyBuildInfo
clean.dependsOn deleteBuildInfo

compileJava.dependsOn jaxb

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
    from configurations.compile
}

jar {
    dependsOn copyToLib
    baseName = 'identity'
    enabled = true
}

war {
    dependsOn jar
    classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
    into('WEB-INF/classes') {
        from sourceSets.main.resources
    }
}

task echo << {
    println "source main sets=$sourceSets.main.java.srcDirs"
    println "source test sets=$sourceSets.test.java.srcDirs"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "$buildDir/jacocoHtml"
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://identity-ci.corp.rackspace.com:9000"
        property "sonar.jdbc.url", "jdbc:mysql://identity-ci.corp.rackspace.com/sonarqube"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonarqube"
        property "sonar.jdbc.password", "sonarqube"
        property "sonar.exclusions", "**/generated-src/jaxb/**,**/domain/entity/*.java"
    }
}

sourceSets {
    main {
        java {
            srcDirs = [srcJava, generatedSrc]
        }
    }
}

