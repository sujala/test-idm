.. _CID-1270:
.. _CID-1275: https://jira.rax.io/browse/CID-1275

==========================================================
EPS: Update "List users for tenant" to support user groups
==========================================================

Description ~~~~~~~~~~~ EPS need to be able to list all the users with an
effective role on the dedicated tenant. Currently the service performing this
operation does not take user groups into consideration. It solely returns users
explicitly assigned the specified role. This story updates the service to
account for roles received via user group membership.

Affected API Services
---------------------
`(GET /v2.0/tenants/{tenantId}/users) <https://pages.github.rackspace.com/ServiceAPIContracts/global-auth-keystone-extensions/api-reference/tenant-operations.html#list-users-for-tenant>`_

This service must be updated to include users which receive access to the tenant
via membership in one or more groups. The service will only consider roles
explicitly assigned on the specified tenant for the user group; global roles
assigned to user groups are out of scope.

Support for global roles requires modifying the service to recognize the
standard `apply_rcn_roles` query param, which is out of scope for this story and
will be implemented as part of `CID-1275`_. Similarly, RCN role logic is **not**
in scope for this story as RCN Roles can not currently be assigned to user
groups. When such assignment is supported `CID-1275`_ will add the necessary
support to consider tenant access that users receive via RCN roles on user
groups.

---------------------- 
Enabled/Disabled Users 
---------------------- 

This service currently inconsistently returns disabled users. The documentation
states it returns users on the tenant, but doesn't explain how it behaves with
respect to enabled/disabled users. An example shows returning a disabled user.
However, the code explicitly attempts to return only enabled users.
Unfortunately, there is a bug where the code includes disabled users in the
following scenarios:

1. When `roleId` is **not** specified, disabled users within the same domain as
   the specified tenant are included 

2. When `roleId` **is** specified **and** the value is set to the id of the
   *identity:tenant-access* role, disabled users within the same domain as the
   tenant are included

This inconsistency appears to have been added with the Jan '17 release (when
identity:tenant-access role was introduced).

The inconsistency must be fixed as part of this story by limiting the result to
**only** enabled users. A separate discussion will take place on whether we want
to introduce a new feature to allow the caller to specify whether to
include/exclude disabled users. If so, a separate story will be created.

----------------------------- 
Implementation Considerations
----------------------------- 

As part of investigating the changes required for
this story it was realized the service supports the undocumented query param
`roleId` in order to provide the overall 'list users with role for tenant'. It
treats the following 2 calls as distinct services rather than a single service
with an optional query param: 1. GET /v2.0/tenants/{tenantId}/users?roleId 2.
GET /v2.0/tenants/{tenantId}/users

These requests have distinct authentication/authorization checks, response
processing logic, etc. This bifurcation makes the service, as a whole, more
difficult to maintain with a higher risk of unexpected inconsistencies based on
the query params provided.

While technically this existing split would allow us to only add user group
support when the caller specifies a roleId (the EPS need), this would add an
unacceptable amount of tech debt and maintenance overhead - while also
increasing the number of edge cases for this service. Instead, user group
support must be added to the service as a whole - both when the `roleId` query
param is provided, and when it is not.

From an implementation perspective, a refactoring of the service therefore
appears justified in order to streamline the codebase not only for this change,
but upcoming changes to this service as well.

There are 2 considerations that could limit the performance penalty of
implementing user group service in certain cases:

1. The only roles that are currently assignable to groups are those with
   adminstratorRole=identity:user-manage (1000 weight roles). As such, groups only
   need to be taken into consideration when the specified role is a 1000 weight
   role. This will likely change in the future to allow some other roles to be
   assigned to groups (e.g. identity:user-manager), but there is currently no story
   on the roadmap to allow such functionality.
2. RCN roles currently can only have administratorRole=identity:admin roles and
   therefore can't be assigned to groups.

These current limitations in group role assignment mean only groups within the
tenant's own domain need to be searched for the specified role. Furthermore the
group search only needs to occur when the specified role has an
adminstratorRole=identity:user-manage.

Business Acceptance Criteria
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Service must be fixed to only return enabled users
2. When the `roleId` param **is not** supplied, the service must be augmented
   to return enabled users which receive any role on the tenant via an explicit
   assignment on the tenant to one or more user groups in which
   the user belongs
    
   1) Globally assigned roles to user groups are ignored
3. When the `roleId` param **is** supplied, the service must be augmented to
   return enabled users which receive the specified role on the tenant via an
   explicit assignment on the tenant to one or more groups in which 
   the user belongs

   1) Global assignments of the role to user groups are ignored
4. Update internal documentation to document the roleId query param and clarify
   that the service only returns enabled users
5. Update external documentation to document the roleId query param and clarify
   that the service only returns enabled users

Test Acceptance Criteria
~~~~~~~~~~~~~~~~~~~~~~~~
TBD