# This is a configuration file for Identity
# To get more information about Identity, visit https://one.rackspace.com/display/auth

### Customer LDAP Settings

# ldap.bind.dn
#   Purpose: Distinguished name to bind (connect) to the LDAP server
#   Type: string
#   Mandatory: yes
#   Default:

# ldap.server.trusted
#   Purpose: LDAP server is trusted
#   Type: boolean
#   Mandatory: yes
#   Default:

# ldap.server.useSSL
#   Purpose: Connect over sercure connection
#   Type: boolean
#   Mandatory: yes
#   Default:

# ldap.server.pool.size.init
#   Purpose: Initial LDAP pool size
#   Type: integer
#   Mandatory: yes
#   Default:

# ldap.server.pool.size.max
#   Purpose: Max LDAP pool size
#   Type: integer
#   Mandatory: yes
#   Default:

# ldap.paging.offset.defualt
#   Purpose: Default offset for LDAP paging
#   Type: integer
#   Mandatory: yes
#   Default:

# ldap.paging.limit.default
#   Purpose: Default size of page returned by LDAP
#   Type: integer
#   Mandatory: yes
#   Default:

# ldap.paging.limit.max
#   Purpose: Max size of page returned by LDAP
#   Type: integer
#   Mandatory: yes
#   Default:

# ldap.password.failure.lockout.min
#   Purpose: Lockout time for locked account
#   Type: integer
#   Mandatory: yes
#   Default:

ldap.bind.dn=cn=admin\,ou=internal\,dc=rackspace\,dc=com
ldap.server.trusted=true
ldap.server.useSSL=true
ldap.server.pool.size.init=10
ldap.server.pool.size.max=1000
ldap.paging.offset.default=0
ldap.paging.limit.default=25
ldap.paging.limit.max=1000
ldap.password.failure.lockout.min=30

### Idm Settings

# idm.clientId
#   Purpose: Foundation application ID
#   Type: string
#   Mandatory: yes
#   Default:

# idm.AdminGroupName
#   Purpose: Admin group name
#   Type: string
#   Mandatory: yes
#   Default:

# idm.superAdminRole
#   Purpose: Admin super user role name
#   Type: string
#   Mandatory: yes
#   Default:

# idm.racker
#   Purpose: Racker name
#   Type: string
#   Mandatory: yes
#   Default:

idm.clientId=18e7a7032733486cd32f472d7bd58f709ac0d221
idm.AdminGroupName=Idm Admin
idm.superAdminRole=Super Admin
idm.racker=Racker

### Token Settings

# token.expirationSeconds
#   Purpose: Token expiration (foundation API)
#   Type: integer
#   Mandatory: yes
#   Default:

# token.entropy
#   Purpose: Token entropy percentage for expiration time
#   Type: float
#   Mandatory: yes
#   Default:

# token.cloudAuthExpirationSeconds
#   Purpose: Cloud Auth token expiration (v1.0, v1.1, v2.0)
#   Type: integer
#   Mandatory: yes
#   Default:

# token.impersonatedExpirationSeconds
#   Purpose: Default expiration for impersonated tokens by Cloud Admin user
#   Type: integer
#   Mandatory: yes
#   Default:

# token.impersonatedByRackerDefaultSeconds
#   Purpose: Default expiration for impersonated tokens by racker
#   Type: integer
#   Mandatory: yes
#   Default:

# token.impersonatedByRackerMaxSeconds
#   Purpose: Max expiration for impersonated tokens by racker
#   Type: integer
#   Mandatory: yes
#   Default:

# token.impersonatedByServiceDefaultSeconds
#   Purpose: Default expiration for impersonated tokens by service
#   Type: integer
#   Mandatory: yes
#   Default:

# token.impersonatedByServiceMaxSeconds
#   Purpose: Max expiration for impersonated tokens by service
#   Type: integer
#   Mandatory: yes
#   Default:

# token.maxExpirationSeconds
#   Purpose: Max expiration for impersonated token
#   Type: integer
#   Mandatory: yes
#   Default:

# token.minExpirationSeconds
#   Purpose: Min expiration for impersonated token
#   Type: integer
#   Mandatory: yes
#   Default:

# token.refreshWindowHours
#   Purpose: Token refresh window in hours
#   Type: integer
#   Mandatory: yes
#   Default:

token.expirationSeconds=43200
token.entropy=0.01
token.cloudAuthExpirationSeconds=86400
token.impersonatedExpirationSeconds=3600
token.impersonatedByRackerDefaultSeconds=10800
token.impersonatedByRackerMaxSeconds=10800
token.impersonatedByServiceDefaultSeconds=10800
token.impersonatedByServiceMaxSeconds=43200
token.maxExpirationSeconds=86400
token.minExpirationSeconds=10
token.refreshWindowHours=0

### Service Name Settings

# serviceName.cloudFiles
#   Purpose: Name of Cloud Files service
#   Type: string
#   Mandatory: yes
#   Default:

# serviceName.cloudServers
#   Purpose: Name of Cloud Servers service
#   Type: string
#   Mandatory: yes
#   Default:

serviceName.cloudFiles=cloudFiles
serviceName.cloudServers=cloudServers

### Miscellaneous Settings

# cloudAuth.clientId
#   Purpose: Cloud Identity application ID
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.adminRole
#   Purpose: Identity admin role name
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.serviceAdminRole
#   Purpose: Service admin role name (super user)
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.userAdminRole
#   Purpose: User admin role name
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.userRole
#   Purpose: Default user role name
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.userManagedRole
#   Purpose: User manage role name
#   Type: string
#   Mandatory: yes
#   Default:

# cloudAuth.rackerRoleRsId
#   Purpose: Racker role rsId
#   Type: integer
#   Mandatory: yes
#   Default:

# cloudAuth.allowedRoleWeights
#   Purpose: List of role weights allowed upon role creation
#   Type: list of integers
#   Mandatory: yes
#   Default:

# cloudAuth.globalRoles.clientId
#   Purpose: Cloud Identity application ID used for global roles
#   Type: string
#   Mandatory: yes
#   Default:

cloudAuth.clientId=bde1268ebabeeabb70a0e702a4626977c331d5c4
cloudAuth.adminRole=identity:admin
cloudAuth.serviceAdminRole=identity:service-admin
cloudAuth.userAdminRole=identity:user-admin
cloudAuth.userRole=identity:default
cloudAuth.userManagedRole=identity:user-manage
cloudAuth.rackerRoleRsId=9
cloudAuth.allowedRoleWeights=0,100,500,1000,2000
cloudAuth.globalRoles.clientId=bde1268ebabeeabb70a0e702a4626977c331d5c4

# default.rsWeight
#   Purpose: Default value for new create roles
#   Type: integer
#   Mandatory: yes
#   Default:

default.rsWeight=1000

# generate.apiKey.userForCreate
#   Purpose: Generate an apiKey on user creation
#   Type: boolean
#   Mandatory: yes
#   Default:

generate.apiKey.userForCreate=true

# password.rules.enforced
#   Purpose: Enables check for password complexity
#   Type: boolean
#   Mandatory: yes
#   Default:

password.rules.enforced=true

# user.uuid.enabled.foundation
#   Purpose: UUID is generated for foundation user's ID
#   Type: boolean
#   Mandatory: yes
#   Default:

# user.uuid.enabled
#   Purpose: UUID is generated for cloud user's ID
#   Type: boolean
#   Mandatory: yes
#   Default:

user.uuid.enabled.foundation=true
user.uuid.enabled=true

# validate.entities
#   Purpose: Validate the entities attribute's length on incoming request
#   Type: boolean
#   Mandatory: yes
#   Default:

validate.entities=true

# allowSoftDeleteDeletion
#   Purpose: Allow deletion of users from soft-deleted tree
#   Type: boolean
#   Mandatory: yes
#   Default:

# maxNumberOfUsersInDomain
#   Purpose: Maximum number of users within a domain
#   Type: integer
#   Mandatory: yes
#   Default:

# defaultGroupId
#   Purpose: Default ID assigned to group on creation
#   Type: integer
#   Mandatory: yes
#   Default:

# version
#   Purpose: Current version number (set at build)
#   Type: string
#   Mandatory: yes
#   Default:

# buildVersion
#   Purpose: Current build version (seconds from epoch on build)
#   Type: string
#   Mandatory: yes
#   Default:

# stalePasswordMsg
#   Purpose: A list of messages returned when password is repeated
#   Type: string, takes multipule instances
#   Mandatory: yes
#   Default:

# virtualPath
#   Purpose: Path for test and dev environments (/cloud)
#   Type: string
#   Mandatory: yes
#   Default:

allowSoftDeleteDeletion=true
maxNumberOfUsersInDomain=100
defaultGroupId=0
version=0.1.0
buildVersion=1
stalePasswordMsg=Password matches previous password
stalePasswordMsg=Password match in history
virtualPath=
