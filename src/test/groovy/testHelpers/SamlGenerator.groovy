package testHelpers

import com.rackspace.idm.Constants
import com.rackspace.idm.SAMLConstants
import org.apache.commons.codec.binary.StringUtils
import org.apache.xml.security.utils.Base64
import org.bouncycastle.util.encoders.Base64Encoder
import testHelpers.saml.SamlFactory

/**
 * Simple demo helper class to generate signed saml assertions.
 */
class SamlGenerator {

    public static void main(String[] args) {

        decode64("")
//        decode64("")

        //local docker environment
//        generate(Constants.DEFAULT_IDP_URI, "983452", Constants.DEFAULT_IDP_PRIVATE_KEY, Constants.DEFAULT_IDP_PUBLIC_KEY, "testUser")
        generateRacker(Constants.RACKER_IDP_URI, Constants.DEFAULT_IDP_PRIVATE_KEY, Constants.DEFAULT_IDP_PUBLIC_KEY, Constants.RACKER_IMPERSONATE)

        //qe racker staging (https://passwordsafe.corp.rackspace.com/projects/1441/credentials/30674)
//        String qeRackerStagingIssuer = "http://identityqe.rackspace.com/racker";
//        String qeRackerStagingPubKey = "/etc/idm/config/saml_keys/qeidentityracker_staging_public.crt";
//        String qeRackerStagingPriKey = "/etc/idm/config/saml_keys/qeidentityracker_staging_private.pkcs8";
//        generate(qeRackerStagingIssuer, qeRackerStagingPriKey, qeRackerStagingPubKey, "robe4218")


    }

    private static void decode64(String coded) {
        print(new String(Base64.decode(coded)))
    }

    private static void generate(String issuer, String domain, String privateKeyPath, String publicKeyPath, String validUser) {
        def factory = new SamlFactory()

        print("VALID PWD AUTH", factory.generateSamlAssertionStringForFederatedUser(issuer, validUser, 30000, domain))

        print("LOGOUT REQUEST FOR VALID PWD AUTH", factory.generateLogoutRequestStringForFederatedUser(issuer, validUser, privateKeyPath, publicKeyPath))

        print("VALID TOKEN AUTH", factory.generateSamlAssertionStringForFederatedUser(issuer, validUser, 30000, domain))
        print("INVALID EXPIRATION DATE REQUEST", factory.generateSamlAssertionStringForFederatedUser(issuer, validUser, -10, domain))
    }

    private static void generateRacker(String issuer, String privateKeyPath, String publicKeyPath, String validUser) {
        def factory = new SamlFactory()

        String samlResponseStr = factory.generateSamlAssertionStringForFederatedRacker(issuer, validUser, 30000, SAMLConstants.PASSWORD_PROTECTED_AUTHCONTEXT_REF_CLASS, privateKeyPath, publicKeyPath)
        print("VALID PWD AUTH", samlResponseStr)
        print("VALID PWD AUTH (Base64)", Base64.encode(StringUtils.getBytesUtf8(samlResponseStr)));

        print("VALID TOKEN AUTH", factory.generateSamlAssertionStringForFederatedRacker(issuer, validUser, 30000, SAMLConstants.TIMESYNCTOKEN_PROTECTED_AUTHCONTEXT_REF_CLASS, privateKeyPath, publicKeyPath))
        print("NON-EXISTANT USER", factory.generateSamlAssertionStringForFederatedRacker(issuer, "iDoNotExist", 30000, SAMLConstants.TIMESYNCTOKEN_PROTECTED_AUTHCONTEXT_REF_CLASS, privateKeyPath, publicKeyPath))
        print("INVALID ISSUER", factory.generateSamlAssertionStringForFederatedRacker("http://i.do.not.exist", validUser, 30000, SAMLConstants.TIMESYNCTOKEN_PROTECTED_AUTHCONTEXT_REF_CLASS, privateKeyPath, publicKeyPath))
        print("INVALID EXPIRATION DATE REQUEST", factory.generateSamlAssertionStringForFederatedRacker(issuer, validUser, -10, SAMLConstants.TIMESYNCTOKEN_PROTECTED_AUTHCONTEXT_REF_CLASS, privateKeyPath, publicKeyPath))
    }

    private static void print(String header, String samlAssertion) {
        System.out.println()
        System.out.println(String.format("**************** START %s *******************", header))
        System.out.println(samlAssertion)
        System.out.println(String.format("**************** END %s *******************", header))
        System.out.println()
    }
}
